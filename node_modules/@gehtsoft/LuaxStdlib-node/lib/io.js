'use strict';
let fs = require('fs');
let path = require('path');

const CP_ANSI_STR = "ascii";
const CP_UTF7_STR = "ascii";
const CP_UTF8_STR = "utf8";

class StdlibIo {
    static M_OPEN = 1;
    static M_CREATE = 2;
    static M_READ = 16;
    static M_WRITE = 32;
    static M_READWRITE = 48;
    static M_SHARE_READ = 64;
    static M_SHARE_WRITE = 128;
    static M_SHARE = 192;

    static CP_ANSI = 437;
    static CP_UTF7 = 65000;
    static CP_UTF8 = 65001;

    static convertCodePage(code) {
        switch(code) {
            case io.CP_ANSI:
                return CP_ANSI_STR;
            case io.CP_UTF7:
                return CP_UTF7_STR;
            case io.CP_UTF8:
                return CP_UTF8_STR;
            default:
                return "";
        }
    }

    static exists(fullPath) {
        try {
            if (fs.existsSync(fullPath)) {
              return true;
            }
        } catch(err) {
            return false;
        }
        return false;
    }

    static size(fullPath) {
        throw  new Error("Unsupported operation");
    }

    static isFolder(fullPath) {
        throw  new Error("Unsupported operation");
    }

    static isFile(fullPath) {
        throw  new Error("Unsupported operation");
    }

    static files(fullPath) {
        throw  new Error("Unsupported operation");
    }

    static folders(fullPath) {
        throw  new Error("Unsupported operation");
    }

    static delete(fullPath) {
        throw  new Error("Unsupported operation");
    }

    static writeTextToFile(fullPath, text, codepage) {
        throw  new Error("Unsupported operation");
    }

    static readTextFromFile(fullPath, codepage) {
        if(fs == null)
            throw  new Error("Unsupported operation at this platform");
        return fs.readFileSync(fullPath, {encoding: io.convertCodePage(codepage), flag :'r'});
    }

    static tempFolder() {
        throw  new Error("Unsupported operation");
    }

    static combinePath(path1, path2) {

        if(path == null) {
            let slash = getSlash(path1);
            if(!path2.startsWith("/") && !path2.startsWith("\\")) {
                if(slash.length == 0)
                    return path1 + "\\" + path2;
                else
                    return path1 + path2;
            } else if(slash.length == 0)
                    return path1 + path2;
                else
                    return path1 + path2.sunstr(1);
            
        }
        return path.join(path1, path2);
    }

    static getSlash(pathp) {
        let slash = "";
        if(path1.endsWith("/"))
            slash = "/";
        if(path1.endsWith("\\"))
            slash = "\\";
        return slash;
    }

    static fullPath(pathTo) {
        if(path == null)
            throw new Error("Unsupported operation at this platform");
        return path.resolve(pathTo);
    }

    static currentFolder() {
        if(path == null)
            throw new Error("Unsupported operation at this platform");
        let s = path.resolve("");
        if (s.endsWith("/") || s.endsWith("\\"))
            s = s.substr(0, s.length() - 1);
        return  s;
    }

    static createFolder(name) {
        throw  new Error("Unsupported operation");
    }

    static open(filename, mode, codepage) {
        throw  new Error("Unsupported operation");
    }
}

let io = StdlibIo;
// execute if used with Node.JS
if (typeof module !== 'undefined' && module !== null) {
    module.exports = io;
}
