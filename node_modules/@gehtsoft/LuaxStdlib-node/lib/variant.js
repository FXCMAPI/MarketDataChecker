'use strict';
//@@DocBrief("The class to convert any primitive type into an object")
//@@DocDescription("Use the regular `cast` to create an instance of the `variant` object.")
//@@DocDescription("To convert `nil` constant to a `variant`, first cast `nil` to `object`.")
class StdlibVariant {
    #data;
    constructor(data) {
        this.#data = data;
    }

    type() {
        switch (typeof this.#data) {
            case ('boolean'):
                return 'boolean';
            case ('number'): 
                if ((this.#data) % 1 !== 0)
                    return 'real';
                else
                    return 'int';
            case ('string'):
                return 'string';
            case ('object'):
                if (typeof this.#data.getTime === 'function')
                    return 'datetime';
                return 'object';
            default:
                return 'object';
        }
    }
    asInt() {
        if(this.type() === 'string') {
            const result = parseInt(this.#data);
            return isNaN(result) ? 0 : result;
        }
        if(this.type() === 'real') {
            return parseInt(this.#data, 10);
        }
        return this.#data;
    }
    asReal() {
        if(this.type() === 'string') {
            const result = parseFloat(this.#data);
            return isNaN(result) ? 0 : result;
        }
        return this.#data;
    }
    asDatetime() {
        return this.#data;
    }
    asBoolean() {
        return this.#data;
    }
    asString() {
        if(this.type() !== 'string') {
            return "" + this.#data;
        }
        return this.#data;
    }
    asObject() {
        return this.#data;
    }
    isInt() {
        return typeof this.#data == 'number' && (this.#data) % 1 === 0;
    }
    isReal() {
        return typeof this.#data == 'number' && (this.#data) % 1 !== 0;
    }
    isDatetime() {
        return typeof this.#data == 'object' && typeof this.#data.getTime === 'function';
    }
    isBoolean() {
        return typeof this.#data == "boolean";
    }
    isString() {
        return typeof this.#data == "string";
    }
    isObject() {
        return typeof this.#data != "string" && typeof this.#data != "boolean" && typeof this.#data != "number";
    }
}
let variant = StdlibVariant;
module.exports = variant
