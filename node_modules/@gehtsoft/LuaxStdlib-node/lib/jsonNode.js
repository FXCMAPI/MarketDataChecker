'use strict';
let exception = null;

if (typeof require !== 'undefined' && require !== null) {
    try {
       exception = require('./exception');
    } catch {}
}

//@@DocBrief("A Json node")
class CtdtrlJsonNode {
    static get OBJECT() { return "object"; }
    static get ARRAY() { return "array"; }
    static get PROPERTY() { return "property"; }
    static get INT() { return "int"; }
    static get REAL() { return "real"; }
    static get STRING() { return "string"; }
    static get BOOLEAN() { return "boolean"; }
    static get NIL() { return "nil"; }

    value = null;
    type = "undefined";
    name = null;

    static fromObject(obj, name) {
        let node = new jsonNode()
        node.value = obj;
        if (typeof name !== "undefined") {
            node.name = name;
            node.type = CtdtrlJsonNode.PROPERTY;
        } else if (obj === null || typeof obj === "undefined")
            node.type = CtdtrlJsonNode.NIL;
        else if (typeof obj === "string")
            node.type = CtdtrlJsonNode.STRING;
        else if (typeof obj === "boolean")
            node.type = CtdtrlJsonNode.BOOLEAN;
        else if (typeof obj === "number")
            jsonNode.checkNumber(node, obj);
        else if (typeof obj === "object") {
            if (typeof obj.forEach !== "undefined")
                node.type = CtdtrlJsonNode.ARRAY;
            else
                node.type = CtdtrlJsonNode.OBJECT;
        }
        return node;
    }

    static checkNumber(node, obj) {
        if (JSON.stringify(obj).indexOf(".") >= 0)
            node.type = CtdtrlJsonNode.REAL;
        else
            node.type = CtdtrlJsonNode.INT;
    }

    getType() {
        return this.type;
    }
    getName() {
        if (this.type !== CtdtrlJsonNode.PROPERTY)
            this.throwError("The node isn't a property");
        return this.name;
    }
    getValueAsNode() {
        if (this.type !== CtdtrlJsonNode.PROPERTY)
            this.throwError("The node isn't a property");
        return jsonNode.fromObject(this.value);
    }
    getValueAsString() {
        if (this.type !== CtdtrlJsonNode.STRING)
            this.throwError("The node isn't a string");
        return this.value;
    }
    getValueAsInt() {
        if (this.type !== CtdtrlJsonNode.INT)
            this.throwError("The node isn't a int");
        return this.value;
    }
    getValueAsDatetime() {
        if (this.type !== CtdtrlJsonNode.INT)
            this.throwError("The node isn't a int");
        return new Date(this.value);
    }    
    getValueAsIntegerString() {
        if (this.type !== CtdtrlJsonNode.INT)
            this.throwError("The node isn't a int");
        return BigInt(this.value).toString();
    }    
    getValueAsBoolean() {
        if (this.type !== CtdtrlJsonNode.BOOLEAN)
            this.throwError("The node isn't a boolean");
        return this.value;
    }
    getValueAsReal() {
        if (this.type !== CtdtrlJsonNode.REAL)
            this.throwError("The node isn't a real");
        return this.value;
    }
    getChildrenCount() {
        if (this.type === CtdtrlJsonNode.ARRAY)
            return this.value.length;
        if (this.type === CtdtrlJsonNode.OBJECT) {
            return Object.keys(this.value).length;
        }
        this.throwError("The node isn't an array or object");
    }
    getChildByIndex(index) {
        if (index >= this.getChildrenCount())
            this.throwError("Index exceeds array size");
        if (this.type === CtdtrlJsonNode.ARRAY) 
            return jsonNode.fromObject(this.value[index]);
        if (this.type === CtdtrlJsonNode.OBJECT) {
            let n = 0;
            for(let name in this.value) {
                if (n === index)
                    return jsonNode.fromObject(this.value[name], name);
                n++;
            }
        }
        this.throwError("The node isn't an array or object");
    }
    getPropertyByName(propertyName) {
        if (this.type !== CtdtrlJsonNode.OBJECT)
            this.throwError("The node isn't an object");
        return jsonNode.fromObject(this.value[propertyName]);
    }

    throwError(text) {
        if (exception != null && typeof exception !== 'undefined')
            throw exception.create(0, text);
        else
            throw new Error(text);
    }
}
let jsonNode = CtdtrlJsonNode;
module.exports = jsonNode
