'use strict';

class StdlibStdlib {
    static PI = 3.141592653589793;
    static E = 2.718281828459045;

    static _div_(x, y) {
        let q, r;
        q = Math.floor(x / y);
        r = x - y * Math.floor(x / y);
        r = Math.trunc(r);
        return [q, r];
    }

    // -------------------------------------------------------
    // String functions
    // -------------------------------------------------------
    static len(s) {
        return s.length;
    }

    static indexOf(s, sub, caseSensitive) {
        return caseSensitive ? s.indexOf(sub) :  s.toLowerCase().indexOf(sub.toLowerCase());
    }

    static lastIndexOf(s, sub, caseSensitive) {
        return caseSensitive ? s.lastIndexOf(sub) :  s.toLowerCase().lastIndexOf(sub.toLowerCase());
    }

    static compareStrings(a, b, caseSensitive) {
        if(!caseSensitive) {
            a = a.toLowerCase();
            b = b.toLowerCase();
        }
        if (a < b)
            return -1;
        else if (a > b)
            return 1
        else
            return 0       
    }

    static charIndex(s, charValue, startOffset, caseSensitive) {
        return (caseSensitive
            ? s.substr(startOffset).indexOf(String.fromCharCode(charValue))
            : s.substr(startOffset).toLowerCase().indexOf(String.fromCharCode(charValue).toLowerCase())) + startOffset;
    }

    static lastCharIndex(s, charValue, startOffset, caseSensitive) {
        return caseSensitive
            ? s.substr(0, s.length - startOffset).lastIndexOf(String.fromCharCode(charValue))
            : s.substr(0, s.length - startOffset).toLowerCase().lastIndexOf(String.fromCharCode(charValue).toLowerCase());
    }

    static upper(s) {
        return s.toUpperCase();
    }

    static lower(s) {
        return s.toLowerCase();
    }

    static left(s, length) {
        return s.substr(0, length);
    }

    static trim(s) {
       return s.trim();
    }

    static rtrim(s) {

        return s.trimRight();
    }

    static ltrim(s) {
        return s.trimLeft();
    }

    static right(s, length) {
        return s.substr(s.length - length);
    }

    static substring(s, from, length) {

        return s.substr(from, length);
    }

    static match(s, re) {
        let options = "";
        if (re[0] == '/')
        {
            let ix = re.lastIndexOf('/');
            for (let i = ix + 1; i < re.length; i++)
            {
                options += re[i];
            }
            re = re.substring(1, ix);
        }
        const regex = new RegExp(re, options);
        return regex.test(s);
    }

    static unicode(s, position) {
        return s.charCodeAt(position);
    }

    static char(unicode) {
        return String.fromCharCode(unicode);
    }

    static print(s) {
        console.log(s);
    }

    // -------------------------------------------------------
    // Integer functions
    // -------------------------------------------------------    

    static iabs(x) {
        return x < 0 ? -x : x;
    }

    static abs(x) {
        return x < 0 ? -x : x;
    }

    static isgn(x) {
        if (x > 0) return 1;
        return (x < 0 ? -1 : 0);
    }

    static log10(x) {
        return Math.log(x) / Math.LN10;
    }

    static log(x) {
        return Math.log(x);
    }

    static round(dblValue, iDigits){
        return parseFloat(dblValue.toFixed(iDigits));
    }

    static roundInl(dblValue, iDigits)
    {
        let dMult = 1.0;
        for (let i = 0; i < iDigits; i++)
            dMult *= 10.0;
    
        let val = dblValue * dMult;
        if( val < 0 ) 
            val = Math.ceil(val - 0.5);
        else
            val = Math.floor(val + 0.5);
        return val / dMult;
    }

    static floor(x) {
        return Math.floor(x);
    }

    static ceil(x) {
        return Math.ceil(x);
    }

    //-- ---------------------------------------------------------
    //-- date/time functions
    //-- ---------------------------------------------------------

    static mkdatetime(year, month, day, hour, minute, second, milliseconds) {
        return new Date(Date.UTC(year, month - 1, day, hour, minute, second, milliseconds));
    }

    static mkdate(year, month, day) {
        return new Date(Date.UTC(year, month - 1, day, 0, 0, 0, 0));
    }

    static toutc(date) {
        return new Date(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate(),date.getUTCHours(), date.getUTCMinutes(), 
        date.getUTCSeconds(), date.getMilliseconds())
    }
    static month(date) {
        return date.getMonth() + 1;
    }
    static year(date) {
        return date.getFullYear();
    }
    static day(date) {
        return date.getDate();
    }
    static hour(date) {
        return date.getHours();
    }
    static minute(date) {
        return date.getMinutes();
    }
    static second(date) {
        return date.getSeconds();
    }
    static millisecond(date) {
        return date.getMilliseconds();
    }
    static toJdn(date) {
        return stdlib.ToJDN(date) + stdlib.ToJT(date);
    }
    // algorithm from https://www.aa.quae.nl/en/reken/juliaansedag.html#4_1
    static ToJDN(date) {
        let [a1, m1] = stdlib._div_(date.getMonth() - 2, 12);
        let [c1, a2] = stdlib._div_(date.getFullYear() + a1, 100);
        return Math.floor((146097 * c1) / 4) + Math.floor((36525 * a2) / 100) + Math.floor((153 * m1 + 2) / 5) + date.getDate() + 1721119;
    }
    static ToJT(date) {
        return (date.getHours() * 3600.0 + date.getMinutes() * 60.0 + date.getSeconds() + date.getMilliseconds() / 1000.0) / 86400.0;
    }
    static nowlocal() {
        return new Date();
    }
    static nowutc() {
        return stdlib.toutc(new Date());
    }
    // for date algorithm from https://www.aa.quae.nl/en/reken/juliaansedag.html#4_2
    static fromJdn(jt) {
        let a, m, d;
        let jdn = Math.trunc(jt);

        let [c1, e1] = stdlib._div_(4 * jdn - 6884477, 146097);
        let [a1, e2] = stdlib._div_(100 * Math.floor(e1 / 4) + 99, 36525);
        let [m1, e3] = stdlib._div_(5 * Math.floor(e2 / 100) + 2, 153);
        let [a2, m2] = stdlib._div_(m1 + 2, 12);
        a = 100 * c1 + a1 + a2;
        m = m2 + 1;
        d = Math.floor(e3 / 5) + 1;

        jt = (jt - jdn) * 86400.0;
        let milliseconds =  Math.trunc((jt - Math.trunc(jt)).toFixed(3) * 1000);
        let jti = Math.trunc(jt);
        let second = jti % 60;
        jti /= 60;
        let minute = jti % 60;
        jti /= 60;
        let hour = jti;

        return this.toutc(this.mkdatetime(a, m, d, hour, minute, second, milliseconds));
    }
    // create 'exception' compatible object if necessary
    static ensureException(ex) {
        const strValue = (ex === null) ? "" : ex.toString(); 
        if (ex === null || (typeof ex !== 'object' && typeof ex !== 'function')) {
            ex = {};
        }
        if (typeof ex.getMessage === 'undefined') {
            ex.getMessage = function() { return strValue; };
        }
        if (typeof ex.getCode === 'undefined') {
            ex.getCode = function() { return 0; };
        }
        return ex;
    }
}

let stdlib = StdlibStdlib;
module.exports = stdlib;
