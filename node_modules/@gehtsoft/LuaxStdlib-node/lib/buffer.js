'use strict';
let io = require('./io');
let Buffer = require('buffer/').Buffer;
let exception = null;

if (typeof require !== 'undefined' && require !== null) {
    try {
       exception = require('./exception');
    } catch {}
}

class StdlibBuffer {
    innerBuffer;
    toBase64(){
        return this.innerBuffer.toString('base64');
    }

    static fromBuffer(value){
        let retval = new buffer();
        retval.innerBuffer = Buffer.from(value);
        return retval;
    }

    static fromBase64(value){
        try {
            let retval = new buffer();
            retval.innerBuffer = Buffer.from(value, 'base64');
            return retval;
        } catch {
            throwError("bad base64 content");
        }
    }

    static throwError(text) {
        if (exception != null && typeof exception !== 'undefined')
            throw exception.create(0, text);
        else
            throw new Error(text);
    }

    length(){
        return this.innerBuffer.length;
    }

    static create(length){
        let retval = new buffer();
        retval.innerBuffer = Buffer.alloc(length);
        return retval;
    }

    setEncodedString(offset, value, codePage) {
        this.innerBuffer.fill(value, offset, io.convertCodePage(codePage));
    }

    static getEncodedStringLength(value, codePage){
        return Buffer.from(value, io.convertCodePage(codePage)).length;
    }

    getEncodedString(index, encodedLength, codePage){
        let buf = this.innerBuffer.slice(index, encodedLength);
        let ind = buf.indexOf(0);
        if (ind >= 0)
            buf = buf.slice(0, ind);
        return buf.toString(io.convertCodePage(codePage));
    }

    resize(newsize) {
        let newbuf = new buffer();
        let lengthOfCopy = newsize > this.length() ? this.length() : newsize;
        newbuf.innerBuffer = Buffer.alloc(newsize);
        this.innerBuffer.copy(newbuf.innerBuffer, 0, 0, lengthOfCopy);
        this.innerBuffer = newbuf.innerBuffer;
    }

    setBuffer(index, value, sourceIndex, sourceLength) {
        for (let i = 0; i < sourceLength; i++)
           this.innerBuffer[index + i] = value.innerBuffer[sourceIndex + i];
    }

    toHexString() {
        return this.innerBuffer.toString('hex');
    }
}

let buffer = StdlibBuffer;
module.exports = buffer;