'use strict';
let stdlib = require('@gehtsoft/LuaxStdlib-node').stdlib;
class SubscribeInstrumentsInQueueCallback {
    callback;
    requestsQueue;
    logger;
    executeNextAction;
    static create(callback, requestsQueue, logger, executeNextAction) {
        let instance;
        instance = new SubscribeInstrumentsInQueueCallback();
        instance.callback = callback;
        instance.requestsQueue = requestsQueue;
        instance.logger = logger;
        instance.executeNextAction = executeNextAction;
        return instance;
    }
    onSuccess() {
        let ex;
        try {
            this.logger.info("DependenciesManager.InnerSubscribeInstrumentsCallback.onSuccess()");
            this.callback.onSuccess();
        } catch(exTemp1) {
            ex = stdlib.ensureException(exTemp1);
            this.logger.error("Can't execute onSuccess callback: " + ex.getMessage());
        }
        this.requestsQueue.dequeue();
        this.executeNextAction.invoke();
    }
    onError(error, unsucceededSymbols) {
        let ex;
        try {
            this.logger.error("DependenciesManager.InnerSubscribeInstrumentsCallback.onError('" + error + "')");
            this.callback.onError(error, unsucceededSymbols);
        } catch(exTemp2) {
            ex = stdlib.ensureException(exTemp2);
            this.logger.error("Can't execute onError callback: " + ex.getMessage());
        }
        this.requestsQueue.dequeue();
        this.executeNextAction.invoke();
    }
}
module.exports = SubscribeInstrumentsInQueueCallback
