'use strict';
let exception = require('@gehtsoft/LuaxStdlib-node').exception;
let PriceFeedCommandDescriptorBuilder = require('./PriceFeedCommandDescriptorBuilder.js');
class ASubscriptionInstrumentCommandFactory {
    commandFactory;
    messageExecutor;
    sessionProvider;
    messageFactory;
    instrumentsStorage;
    createInstrumentSubscribingStatusCommand(subscriptionInstrumentRequest, commandType) {
        return this.commandFactory.createInstrumentSubscribingCommand(this.messageExecutor, this.sessionProvider.getSession(), this.messageFactory, subscriptionInstrumentRequest.getRequestNumber(), subscriptionInstrumentRequest.getOfferIds(), commandType);
    }
    createPriceFeedCommand(subscriptionInstrumentRequest, commandType) {
        let instrumentDescriptors, priceStream;
        instrumentDescriptors = this.createInstrumentDescriptors(subscriptionInstrumentRequest.getOfferIds());
        if (!this.isEqualPriceStream(instrumentDescriptors)) {
            throw exception.create(0, "PriceFeedCommand requirement: price stream must be equals");
        }
        if (instrumentDescriptors.length > 0) {
            priceStream = instrumentDescriptors[0].getPriceStreamId();
        }
        return this.commandFactory.createPriceFeedCommand(instrumentDescriptors, this.preparePriceFeedCommandDescriptor(commandType, priceStream), subscriptionInstrumentRequest.getRequestNumber(), subscriptionInstrumentRequest.getPriceFeedCommandCallback());
    }
    isEqualPriceStream(instrumentDescriptors) {
        let i, priceStream, result;
        result = true;
        for (i = 0; i <= instrumentDescriptors.length - 1; i += 1) {
            if (i == 0) {
                priceStream = instrumentDescriptors[i].getPriceStreamId();
                continue;
            }
            if (instrumentDescriptors[i].getPriceStreamId() != priceStream) {
                result = false;
                break;
            }
        }
        return result;
    }
    createInstrumentDescriptors(offerIds) {
        let instrumentDescriptors, instrumentDescriptor, i;
        instrumentDescriptors = new Array(offerIds.length);
        for (i = 0; i <= offerIds.length - 1; i += 1) {
            instrumentDescriptor = this.instrumentsStorage.getInstrumentDescriptorByOfferId(offerIds[i]);
            if (instrumentDescriptor != null) {
                instrumentDescriptors[i] = instrumentDescriptor;
            }
            else {
                throw exception.create(0, "Instrument descriptor for offerId = " + offerIds[i] + " not found.");
            }
        }
        return instrumentDescriptors;
    }
    preparePriceFeedCommandDescriptor(subscriptionType, priceStreamId) {
        let builder;
        builder = new PriceFeedCommandDescriptorBuilder();
        builder.setSubscriptionRequestType(subscriptionType);
        builder.setMarketDepth(1);
        builder.setMdUpdateType(0);
        builder.setFxcmTimingInterval("0");
        builder.setFxcmDasMessagePriceStream(priceStreamId);
        builder.setIncludeWeekends(true);
        return builder.build();
    }
}
module.exports = ASubscriptionInstrumentCommandFactory
