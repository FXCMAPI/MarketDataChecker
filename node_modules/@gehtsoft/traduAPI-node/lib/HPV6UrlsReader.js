'use strict';
let HostsParserXmlUtils = require('./HostsParserXmlUtils.js');
class HPV6UrlsReader {
    getUrls(root, terminalUrlFactory) {
        let urls, urlsTmp, i, j, k, node;
        for (i = 0; i <= root.getChildrenCount() - 1; i += 1) {
            node = root.getChild(i);
            if (node.getName() == "urls") {
                urlsTmp = new Array(node.getChildrenCount());
                k = this.getUrlsInner(node, urlsTmp, terminalUrlFactory);
                urls = new Array(k);
                for (j = 0; j <= k - 1; j += 1) {
                    urls[j] = urlsTmp[j];
                }
                return urls;
            }
        }
        urls = new Array(0);
        return urls;
    }
    getUrlsInner(node, urlsTmp, terminalUrlFactory) {
        let j, k, nodeInner, name, url, protocol, secure, params;
        k = 0;
        for (j = 0; j <= node.getChildrenCount() - 1; j += 1) {
            nodeInner = node.getChild(j);
            if (nodeInner.getName() == "url") {
                secure = false;
                params = "";
                name = HostsParserXmlUtils.getAttrStringValue(nodeInner, "name");
                url = HostsParserXmlUtils.getAttrStringValue(nodeInner, "urlString");
                protocol = HostsParserXmlUtils.getAttrStringValue(nodeInner, "protocol");
                if (HostsParserXmlUtils.getAttrStringValue(nodeInner, "secure") == "true") {
                    secure = true;
                }
                params = HostsParserXmlUtils.getAttrStringValue(nodeInner, "params");
                urlsTmp[k] = terminalUrlFactory.createTerminalUrl(name, url, protocol, secure, params);
                k = k + 1;
            }
        }
        return k;
    }
}
module.exports = HPV6UrlsReader
