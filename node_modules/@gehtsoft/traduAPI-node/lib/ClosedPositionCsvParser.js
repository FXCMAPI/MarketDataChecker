'use strict';
let csvParser = require('@gehtsoft/LuaxStdlib-node').csvParser;
let stdlib = require('@gehtsoft/LuaxStdlib-node').stdlib;
let ClosedPositionUpdateBuilder = require('./ClosedPositionUpdateBuilder.js');
class ClosedPositionCsvParser {
    fieldParser;
    constructor() {
        this.fieldParser = new csvParser();
        this.fieldParser.valueSeparator = ";";
    }
    parse(line) {
        let parts, builder, closedPositionLine;
        if (line == null) {
            return null;
        }
        closedPositionLine = stdlib.trim(line);
        if (closedPositionLine == "0" || stdlib.len(closedPositionLine) == 0) {
            return null;
        }
        parts = this.fieldParser.splitLine(closedPositionLine);
        builder = new ClosedPositionUpdateBuilder();
        builder.setTradeID(parts[0]);
        builder.setAccountId(parts[4]);
        builder.setAccountName(parts[5]);
        builder.setAccountKind(parts[24]);
        builder.setOfferId(parts[6]);
        builder.setAmount(parts[17]);
        builder.setBuySell(parts[16]);
        builder.setGrossPL(parts[9]);
        builder.setCommission(parts[8]);
        builder.setRolloverInterest(parts[7]);
        builder.setOpenRate(parts[12]);
        builder.setOpenQuoteId(parts[13]);
        builder.setOpenTime(parts[10]);
        builder.setOpenOrderId(parts[25]);
        builder.setOpenOrderReqId(parts[26]);
        builder.setOpenOrderRequestTXT(parts[27]);
        builder.setCloseRate(parts[14]);
        builder.setCloseQuoteId(parts[15]);
        builder.setCloseTime(parts[11]);
        builder.setCloseOrderId(parts[28]);
        builder.setCloseOrderReqId(parts[29]);
        builder.setCloseOrderRequestTXT(parts[30]);
        builder.setCloseOrderParties(parts[37]);
        builder.setTradeIdOrigin(parts[32]);
        builder.setTradeIdRemain(parts[35]);
        builder.setValueDate(parts[33]);
        builder.setDividends(parts[38]);
        return builder.build();
    }
}
module.exports = ClosedPositionCsvParser
