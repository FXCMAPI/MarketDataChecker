'use strict';
let APdasBatchRequestMessage = require('./APdasBatchRequestMessage.js');
let PdasMessageFieldFactory = require('./PdasMessageFieldFactory.js');
let PdasMessageSerializer = require('./PdasMessageSerializer.js');
let PdasMessageFieldTag = require('./PdasMessageFieldTag.js');
let PdasRequestCommand = require('./PdasRequestCommand.js');
let PdasConstants = require('./PdasConstants.js');
let PdasTransportMessage = require('./PdasTransportMessage.js');
let TransportMessageType = require('./TransportMessageType.js');
let APdasRequestMessage = require('./APdasRequestMessage.js');
let PdasMessageValue = require('./PdasMessageValue.js');
let stdlib = require('@gehtsoft/LuaxStdlib-node').stdlib;
let DateTimeParser = require('./DateTimeParser.js');
let variantCast = require('@gehtsoft/LuaxStdlib-node').variantCast;
class PdasCloseAllPositionsMessage extends APdasBatchRequestMessage {
    buildMessage(tradingSession, request, descriptors, requestNumberGenerator, transactTime, timeController) {
        let pdasMessageSerializer, factory, pdasMessage, requestId, pdasMessageList, result, terminalUrl, i;
        factory = new PdasMessageFieldFactory();
        pdasMessageSerializer = new PdasMessageSerializer();
        terminalUrl = tradingSession.getTradingTerminal().getUrls()[0];
        requestId = tradingSession.getSessionId() + "-" + (requestNumberGenerator.getNextRequestNumber()).toString();
        pdasMessage = APdasBatchRequestMessage.createBatchMessage(0, factory, tradingSession, transactTime, requestId);
        pdasMessage.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_COMMAND_ID, PdasRequestCommand.CREATE_ORDER));
        pdasMessageList = factory.createList(PdasMessageFieldTag.FXCM_EMB_MSG);
        for (i = 0; i <= descriptors.length - 1; i += 1) {
            pdasMessageList.addChild(this.creatCloseGroup(factory, tradingSession, request, requestNumberGenerator, descriptors[i], timeController, i + 1));
        }
        pdasMessage.addChild(pdasMessageList);
        pdasMessage.addChild(factory.createIntField(PdasMessageFieldTag.BATCH_RESPONSE, 0));
        pdasMessage.addChild(factory.createStringField(PdasConstants.SID, tradingSession.getSessionId()));
        result = PdasTransportMessage.create(TransportMessageType.CloseOrder, this.createRequestUrl(terminalUrl), pdasMessageSerializer.serialize(pdasMessage));
        return result;
    }
    creatCloseGroup(factory, tradingSession, request, requestNumberGenerator, descriptor, timeController, n) {
        let innerList, group, innerGroup, requestId;
        requestId = tradingSession.getSessionId() + "-" + (requestNumberGenerator.getNextRequestNumber()).toString();
        group = factory.createGroup();
        APdasRequestMessage.fillPdasMessageItem(group, factory, tradingSession, null, requestId);
        innerList = factory.createList(PdasMessageFieldTag.FXCM_NO_PARAM);
        innerGroup = factory.createGroup();
        innerGroup.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_NAME, PdasMessageValue.CLIENT_ACCT_ID));
        innerGroup.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_VALUE, request.getAcctId()));
        innerList.addChild(innerGroup);
        innerGroup = factory.createGroup();
        innerGroup.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_NAME, PdasMessageValue.CLIENT_OFFER_ID));
        innerGroup.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_VALUE, descriptor.getOfferId()));
        innerList.addChild(innerGroup);
        innerGroup = factory.createGroup();
        innerGroup.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_NAME, PdasMessageValue.CLIENT_BUY_SELL));
        innerGroup.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_VALUE, descriptor.getBuySell()));
        innerList.addChild(innerGroup);
        if (request.getCustomId() != null && stdlib.len(request.getCustomId()) > 0) {
            innerGroup = factory.createGroup();
            innerGroup.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_NAME, PdasMessageValue.CLIENT_QTXT));
            innerGroup.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_VALUE, request.getCustomId()));
            innerList.addChild(innerGroup);
        }
        if (request.getTimeInForce() != null && stdlib.len(request.getTimeInForce()) > 0) {
            innerGroup = factory.createGroup();
            innerGroup.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_NAME, PdasMessageValue.CLIENT_TIME_IN_FORCE));
            innerGroup.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_VALUE, request.getTimeInForce()));
            innerList.addChild(innerGroup);
            if (request.getTimeInForce() == "GTD") {
                innerGroup = factory.createGroup();
                innerGroup.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_NAME, PdasMessageValue.CLIENT_EXPIRE_DT));
                innerGroup.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_VALUE, DateTimeParser.toDateTimeString(timeController.toServerTime(request.getExpirationDate()))));
                innerList.addChild(innerGroup);
            }
        }
        innerGroup = factory.createGroup();
        innerGroup.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_NAME, PdasMessageValue.CLIENT_NET_QTY_FLG));
        innerGroup.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_VALUE, "Y"));
        innerList.addChild(innerGroup);
        if (request.isRateRangeFilled()) {
            if (request.getRateRange() != 0.0) {
                innerGroup = factory.createGroup();
                innerGroup.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_NAME, PdasMessageValue.CLIENT_RATE2));
                innerGroup.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_VALUE, variantCast.castToString(variantCast.fromReal(descriptor.getClientRate() - request.getRateRange() * descriptor.getPointSize()))));
                innerList.addChild(innerGroup);
                innerGroup = factory.createGroup();
                innerGroup.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_NAME, PdasMessageValue.CLIENT_RATE3));
                innerGroup.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_VALUE, variantCast.castToString(variantCast.fromReal(descriptor.getClientRate() + request.getRateRange() * descriptor.getPointSize()))));
                innerList.addChild(innerGroup);
            }
            else {
                innerGroup = factory.createGroup();
                innerGroup.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_NAME, PdasMessageValue.CLIENT_RATE));
                innerGroup.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_VALUE, variantCast.castToString(variantCast.fromReal(descriptor.getClientRate()))));
                innerList.addChild(innerGroup);
            }
        }
        innerGroup = factory.createGroup();
        innerGroup.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_NAME, PdasMessageValue.CLIENT_CLIENTRATE));
        innerGroup.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_VALUE, variantCast.castToString(variantCast.fromReal(descriptor.getClientRate()))));
        innerList.addChild(innerGroup);
        innerGroup = factory.createGroup();
        innerGroup.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_NAME, PdasMessageValue.CLIENT_QID));
        innerGroup.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_VALUE, requestId));
        innerList.addChild(innerGroup);
        if (descriptor.getParties() != null && stdlib.len(descriptor.getParties()) > 0) {
            innerGroup = factory.createGroup();
            innerGroup.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_NAME, PdasMessageValue.CLIENT_PARTIES));
            innerGroup.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_VALUE, descriptor.getParties()));
            innerList.addChild(innerGroup);
        }
        group.addChild(innerList);
        group.addChild(factory.createIntField(PdasMessageFieldTag.FXCM_CONTINUOUS_FLAG, n));
        group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_COMMAND_ID, PdasRequestCommand.CREATE_ORDER));
        group.addChild(factory.createStringField(PdasConstants.SID, tradingSession.getSessionId()));
        return group;
    }
}
module.exports = PdasCloseAllPositionsMessage
