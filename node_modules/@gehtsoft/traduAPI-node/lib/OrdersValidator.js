'use strict';
let logger = require('@gehtsoft/LuaxStdlib-node').logger;
let exception = require('@gehtsoft/LuaxStdlib-node').exception;
let FXConnectLiteErrorCodes = require('./FXConnectLiteErrorCodes.js');
class OrdersValidator {
    storage;
    openPositionsProvider;
    static create(storage, openPositionsProvider) {
        let result;
        result = new OrdersValidator();
        result.storage = storage;
        result.openPositionsProvider = openPositionsProvider;
        return result;
    }
    checkStopLimitFields(request) {
        let error;
        error = this.checkStopLimitRequiredFields(request.getTradeId(), request.getOrderId());
        if (error == "") {
            error = this.checkRateFields(request.getRate(), request.getPips());
        }
        return error;
    }
    checkRateFields(rate, pips) {
        let error;
        error = "";
        if (rate != 0.0 && pips != 0.0) {
            error = "Attach stop or limit order possible only with rate or pips. You filled both params rate = " + (rate).toString() + " and pips = " + (pips).toString() + ", should be fill only one.";
        }
        return error;
    }
    checkStopLimitRequiredFields(tradeId, orderId) {
        let error, openPosition, order;
        error = "";
        if (tradeId != "" && orderId != "") {
            error = "Attach stop or limit order possible only for trade or order. You filled both params tradeId = " + tradeId + " and orderId = " + orderId + ", should be fill only one.";
        }
        if (tradeId != "") {
            openPosition = this.openPositionsProvider.getInternalOpenPosition(tradeId);
            if (openPosition == null) {
                error = this.generateErrorMessageTradeNotFound(tradeId);
            }
        } else if (orderId != "") {
            order = this.storage.getOrderById(orderId);
            if (order == null) {
                error = this.generateErrorMessageOrderNotFound(orderId);
            }
        }         else {
            error = "TradeId or orderId parameter should be filled.";
        }
        return error;
    }
    generateErrorMessageTradeNotFound(tradeId) {
        return "Trade with id '" + tradeId + "' not found";
    }
    generateErrorMessageOrderNotFound(orderId) {
        return "Order with id '" + orderId + "' not found";
    }
    checkMarketOrderRequestRequiredFields(marketOrderRequest) {
        if (marketOrderRequest == null) {
            logger.error("OrdersValidator.checkMarketOrderRequestRequiredFields(): marketOrderRequest is not set");
            throw exception.create(FXConnectLiteErrorCodes.CODE_REQUIRED_PARAMETER_NOT_SET, "marketOrderRequest is not set");
        }
        if (marketOrderRequest.getAccountId() == "") {
            logger.error("OrdersValidator.checkMarketOrderRequestRequiredFields(): AccountId for marketOrderRequest is not set");
            throw exception.create(FXConnectLiteErrorCodes.CODE_REQUIRED_PARAMETER_NOT_SET, "AccountId for marketOrderRequest is not set");
        }
        if (marketOrderRequest.getOfferId() == "") {
            logger.error("OrdersValidator.checkMarketOrderRequestRequiredFields(): OfferId for marketOrderRequest is not set");
            throw exception.create(FXConnectLiteErrorCodes.CODE_REQUIRED_PARAMETER_NOT_SET, "OfferId for marketOrderRequest is not set");
        }
        if (marketOrderRequest.getAmount() == 0) {
            logger.error("OrdersValidator.checkMarketOrderRequestRequiredFields(): Amount for marketOrderRequest is 0");
            throw exception.create(FXConnectLiteErrorCodes.CODE_REQUIRED_PARAMETER_NOT_SET, "Amount for marketOrderRequest is 0");
        }
        if (marketOrderRequest.getBuySell() == "") {
            logger.error("OrdersValidator.checkMarketOrderRequestRequiredFields(): BuySell for marketOrderRequest is not set");
            throw exception.create(FXConnectLiteErrorCodes.CODE_REQUIRED_PARAMETER_NOT_SET, "BuySell for marketOrderRequest is not set");
        }
    }
    checkCloseMarketOrderRequestRequiredFields(closeMarketOrderRequest) {
        if (closeMarketOrderRequest == null) {
            logger.error("OrdersValidator.checkCloseMarketOrderRequestRequiredFields(): closeMarketOrderRequest is not set");
            throw exception.create(FXConnectLiteErrorCodes.CODE_REQUIRED_PARAMETER_NOT_SET, "closeMarketOrderRequest is not set");
        }
        if (closeMarketOrderRequest.getTradeId() == "") {
            logger.error("OrdersValidator.checkCloseMarketOrderRequestRequiredFields(): tradeId for closeMarketOrderRequest is not set");
            throw exception.create(FXConnectLiteErrorCodes.CODE_REQUIRED_PARAMETER_NOT_SET, "tradeId for closeMarketOrderRequest is not set");
        }
        if (closeMarketOrderRequest.getAmount() == 0) {
            logger.error("OrdersValidator.checkCloseMarketOrderRequestRequiredFields(): Amount for closeMarketOrderRequest is 0");
            throw exception.create(FXConnectLiteErrorCodes.CODE_REQUIRED_PARAMETER_NOT_SET, "Amount for closeMarketOrderRequest is 0");
        }
    }
    checkEntryOrderRequestRequiredFields(entryOrderRequest) {
        if (entryOrderRequest == null) {
            logger.error("OrdersValidator.checkEntryOrderRequestRequiredFields(): entryOrderRequest is not set");
            throw exception.create(FXConnectLiteErrorCodes.CODE_REQUIRED_PARAMETER_NOT_SET, "entryOrderRequest is not set");
        }
        if (entryOrderRequest.getAccountId() == "") {
            logger.error("OrdersValidator.checkEntryOrderRequestRequiredFields(): AccountId for entryOrderRequest is not set");
            throw exception.create(FXConnectLiteErrorCodes.CODE_REQUIRED_PARAMETER_NOT_SET, "AccountId for entryOrderRequest is not set");
        }
        if (entryOrderRequest.getOfferId() == "") {
            logger.error("OrdersValidator.checkEntryOrderRequestRequiredFields(): OfferId for entryOrderRequest is not set");
            throw exception.create(FXConnectLiteErrorCodes.CODE_REQUIRED_PARAMETER_NOT_SET, "OfferId for entryOrderRequest is not set");
        }
        if (entryOrderRequest.getAmount() == 0) {
            logger.error("OrdersValidator.checkEntryOrderRequestRequiredFields(): Amount for entryOrderRequest is 0");
            throw exception.create(FXConnectLiteErrorCodes.CODE_REQUIRED_PARAMETER_NOT_SET, "Amount for entryOrderRequest is 0");
        }
        if (entryOrderRequest.getBuySell() == "") {
            logger.error("OrdersValidator.checkEntryOrderRequestRequiredFields(): BuySell for entryOrderRequest is not set");
            throw exception.create(FXConnectLiteErrorCodes.CODE_REQUIRED_PARAMETER_NOT_SET, "BuySell for entryOrderRequest is not set");
        }
        if (entryOrderRequest.getTimeInForce() == "") {
            logger.error("OrdersValidator.checkEntryOrderRequestRequiredFields(): TimeInForce for entryOrderRequest is not set");
            throw exception.create(FXConnectLiteErrorCodes.CODE_REQUIRED_PARAMETER_NOT_SET, "TimeInForce for entryOrderRequest is not set");
        }
        if (entryOrderRequest.getRate() == 0) {
            logger.error("OrdersValidator.checkEntryOrderRequestRequiredFields(): Rate for entryOrderRequest is 0");
            throw exception.create(FXConnectLiteErrorCodes.CODE_REQUIRED_PARAMETER_NOT_SET, "Rate for entryOrderRequest is 0");
        }
    }
    checkStopOrderRequestRequiredFields(stopOrderRequest) {
        if (stopOrderRequest == null) {
            logger.error("OrdersValidator.checkStopOrderRequestRequiredFields(): stopOrderRequest is not set");
            throw exception.create(FXConnectLiteErrorCodes.CODE_REQUIRED_PARAMETER_NOT_SET, "stopOrderRequest is not set");
        }
        if (stopOrderRequest.getTradeId() == "" && stopOrderRequest.getOrderId() == "") {
            logger.error("OrdersValidator.checkStopOrderRequestRequiredFields(): TradeId or OrderId for stopOrderRequest must be specified");
            throw exception.create(FXConnectLiteErrorCodes.CODE_REQUIRED_PARAMETER_NOT_SET, "TradeId or OrderId for stopOrderRequest must be specified");
        }
        if (stopOrderRequest.getRate() == 0 && stopOrderRequest.getPips() == 0) {
            logger.error("OrdersValidator.checkStopOrderRequestRequiredFields(): Rate or OrderId Pips stopOrderRequest must be specified");
            throw exception.create(FXConnectLiteErrorCodes.CODE_REQUIRED_PARAMETER_NOT_SET, "Rate or Pips for stopOrderRequest must be specified");
        }
    }
    checkLimitOrderRequestRequiredFields(limitOrderRequest) {
        if (limitOrderRequest == null) {
            logger.error("OrdersValidator.checkLimitOrderRequestRequiredFields(): limitOrderRequest is not set");
            throw exception.create(FXConnectLiteErrorCodes.CODE_REQUIRED_PARAMETER_NOT_SET, "limitOrderRequest is not set");
        }
        if (limitOrderRequest.getTradeId() == "" && limitOrderRequest.getOrderId() == "") {
            logger.error("OrdersValidator.checkLimitOrderRequestRequiredFields(): TradeId or OrderId for limitOrderRequest must be specified");
            throw exception.create(FXConnectLiteErrorCodes.CODE_REQUIRED_PARAMETER_NOT_SET, "TradeId or OrderId for limitOrderRequest must be specified");
        }
        if (limitOrderRequest.getRate() == 0 && limitOrderRequest.getPips() == 0) {
            logger.error("OrdersValidator.checkLimitOrderRequestRequiredFields(): Rate or OrderId Pips limitOrderRequest must be specified");
            throw exception.create(FXConnectLiteErrorCodes.CODE_REQUIRED_PARAMETER_NOT_SET, "Rate or Pips for limitOrderRequest must be specified");
        }
    }
    checkChangeOrderRequestRequiredFields(changeOrderRequest) {
        if (changeOrderRequest == null) {
            logger.error("OrdersValidator.checkChangeOrderRequestRequiredFields(): changeOrderRequest is not set");
            throw exception.create(FXConnectLiteErrorCodes.CODE_REQUIRED_PARAMETER_NOT_SET, "changeOrderRequest is not set");
        }
        if (changeOrderRequest.getOrderId() == "") {
            logger.error("OrdersValidator.checkChangeOrderRequestRequiredFields(): OrderId for changeOrderRequest must be specified");
            throw exception.create(FXConnectLiteErrorCodes.CODE_REQUIRED_PARAMETER_NOT_SET, "OrderId for changeOrderRequest must be specified");
        }
    }
}
module.exports = OrdersValidator
