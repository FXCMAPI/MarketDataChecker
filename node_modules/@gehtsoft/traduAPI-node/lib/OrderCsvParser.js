'use strict';
let csvParser = require('@gehtsoft/LuaxStdlib-node').csvParser;
let stdlib = require('@gehtsoft/LuaxStdlib-node').stdlib;
let OrderUpdateBuilder = require('./OrderUpdateBuilder.js');
class OrderCsvParser {
    fieldParser;
    constructor() {
        this.fieldParser = new csvParser();
        this.fieldParser.valueSeparator = ";";
    }
    parse(line) {
        let parts, builder, trimmedLine;
        if (line == null) {
            return null;
        }
        trimmedLine = stdlib.trim(line);
        if (trimmedLine == "0" || stdlib.len(trimmedLine) == 0) {
            return null;
        }
        parts = this.fieldParser.splitLine(trimmedLine);
        builder = new OrderUpdateBuilder();
        builder.setOrderId(parts[0]);
        builder.setRequestId(parts[2]);
        builder.setRate(parts[7]);
        builder.setExecutionRate(parts[41]);
        builder.setRateMin(parts[47]);
        builder.setRateMax(parts[49]);
        builder.setTradeId(parts[9]);
        builder.setAccountId(parts[10]);
        builder.setAccountName(parts[11]);
        builder.setOfferId(parts[12]);
        builder.setNetQuantity(parts[52]);
        builder.setBuySell(parts[13]);
        builder.setStage(parts[15]);
        builder.setType(parts[32]);
        builder.setStatus(parts[33]);
        builder.setStatusTime(parts[4]);
        builder.setAmount(parts[14]);
        builder.setLifetime(parts[6]);
        builder.setAtMarket(parts[25]);
        builder.setTrailStep(parts[27]);
        builder.setTrailRate(parts[28]);
        builder.setTimeInForce(parts[29]);
        builder.setAccountKind(parts[26]);
        builder.setRequestTxt(parts[3]);
        builder.setContingentOrderID(parts[45]);
        builder.setContingencyType(parts[53]);
        builder.setPrimaryId(parts[54]);
        builder.setOriginAmount(parts[38]);
        builder.setFilledAmount(parts[39]);
        builder.setWorkingIndicator(parts[43]);
        builder.setPegType(parts[51]);
        builder.setPegOffset(parts[46]);
        builder.setPegOffsetMin(parts[59]);
        builder.setPegOffsetMax(parts[60]);
        builder.setExpireDate(parts[55]);
        builder.setValueDate(parts[56]);
        builder.setParties(parts[58]);
        builder.setSide(parts[16]);
        return builder.build();
    }
    parseCreated(line) {
        let parts, builder, trimmedLine;
        if (line == null) {
            return null;
        }
        trimmedLine = stdlib.trim(line);
        if (trimmedLine == "0" || stdlib.len(trimmedLine) == 0) {
            return null;
        }
        parts = this.fieldParser.splitLine(trimmedLine);
        builder = new OrderUpdateBuilder();
        builder.setOrderId(parts[0]);
        return builder.build();
    }
}
module.exports = OrderCsvParser
