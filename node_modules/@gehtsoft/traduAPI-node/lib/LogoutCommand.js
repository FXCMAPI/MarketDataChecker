'use strict';
let CommandStatusPublisher = require('./CommandStatusPublisher.js');
let LogManager = require('./LogManager.js');
//@@DocBrief("The command for sending logout message")
class LogoutCommand {
    tradingSession;
    messageFactory;
    requestNumberGenerator;
    messageExecutor;
    messageExecutorCallback;
    logger;
    publisher;
    constructor() {
        this.publisher = new CommandStatusPublisher();
        this.messageExecutorCallback = new LogoutCommand.MessageExecutorCallback(this);
        this.logger = LogManager.getLogger();
    }
    execute() {
        let transportMessage;
        this.logger.debug("Execute command 'LogoutCommand'");
        transportMessage = this.messageFactory.createLogoutRequestMessage(this.tradingSession, this.requestNumberGenerator);
        this.messageExecutor.execute(transportMessage, this.messageExecutorCallback);
    }
    subscribeStatusChange(callback) {
        this.publisher.subscribe(callback);
    }
    unsubscribeStatusChange(callback) {
        this.publisher.unsubscribe(callback);
    }
}
module.exports = LogoutCommand
LogoutCommand.MessageExecutorCallback = class {
    _owner_;
    constructor(_owner_) {
        this._owner_ = _owner_;
    }
    onSuccessSent() {
        this._owner_.logger.debug("Message 'LogoutCommand' successfully sent");
        this._owner_.publisher.notifySuccess(null);
    }
    onError(error) {
        let mess;
        mess = "Send message 'LogoutCommand' failed: " + error;
        this._owner_.logger.warning(mess);
        this._owner_.publisher.notifyError(mess);
    }
}
