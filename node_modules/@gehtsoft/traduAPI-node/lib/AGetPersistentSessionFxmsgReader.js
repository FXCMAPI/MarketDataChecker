'use strict';
let AAuthFxmsgReader = require('./AAuthFxmsgReader.js');
let string_map = require('@gehtsoft/LuaxStdlib-node').string_map;
let PdasMessageFieldTag = require('./PdasMessageFieldTag.js');
let PdasMessageType = require('./PdasMessageType.js');
let PdasSessionOptions = require('./PdasSessionOptions.js');
let StringValueObject = require('./StringValueObject.js');
let stdlib = require('@gehtsoft/LuaxStdlib-node').stdlib;
class AGetPersistentSessionFxmsgReader extends AAuthFxmsgReader {
    options;
    processMessage(responseList, messageNode) {
        this.prepareOptions();
        super.processMessage(responseList, messageNode);
    }
    prepareOptions() {
        let i, mlist, optionsData;
        optionsData = new string_map();
        if (this.messages != null) {
            for (i = 0; i <= this.messages.length - 1; i += 1) {
                if (this.messages[i].getType() == PdasMessageType.USER_RESPONSE) {
                    mlist = this.messages[i].getList(PdasMessageFieldTag.FXCM_NO_PARAM);
                    if (mlist != null) {
                        this.processList(mlist, optionsData);
                        break;
                    }
                }
            }
        }
        this.options = PdasSessionOptions.create(optionsData);
    }
    processList(mlist, optionsData) {
        let groups, group, name, value, j;
        groups = mlist.getGroups();
        for (j = 0; j <= groups.length() - 1; j += 1) {
            group = groups.get(j);
            name = group.getName();
            value = group.getFieldValue(PdasMessageFieldTag.FXCM_PARAM_VALUE);
            if (name != null && value != null && stdlib.indexOf(name, "EXTRA.", false) < 0) {
                optionsData.set(name, StringValueObject.create(value));
            }
        }
    }
}
module.exports = AGetPersistentSessionFxmsgReader
