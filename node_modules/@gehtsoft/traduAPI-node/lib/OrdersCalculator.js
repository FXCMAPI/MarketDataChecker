'use strict';
let OrderTrailingStopCalculator = require('./OrderTrailingStopCalculator.js');
let LogManager = require('./LogManager.js');
let exception = require('@gehtsoft/LuaxStdlib-node').exception;
let FXConnectLiteErrorCodes = require('./FXConnectLiteErrorCodes.js');
let OrderCalculatedFieldsBuilder = require('./OrderCalculatedFieldsBuilder.js');
let stdlib = require('@gehtsoft/LuaxStdlib-node').stdlib;
let RateType = require('./RateType.js');
class OrdersCalculator {
    ordersProvider;
    offersProvider;
    instrumentsProvider;
    systemSettingsProvider;
    orderTrailingStopCalculator;
    constructor() {
        this.orderTrailingStopCalculator = new OrderTrailingStopCalculator();
    }
    setOrdersProvider(ordersProvider) {
        if (ordersProvider == null) {
            LogManager.getLogger().error("OrdersCalculator.setOrdersProvider(): ordersProvider is not set");
            throw exception.create(FXConnectLiteErrorCodes.CODE_REQUIRED_PARAMETER_NOT_SET, "ordersProvider is not set");
        }
        this.ordersProvider = ordersProvider;
    }
    setOffersProvider(offersProvider) {
        if (offersProvider == null) {
            LogManager.getLogger().error("OrdersCalculator.setOffersProvider(): offersProvider is not set");
            throw exception.create(FXConnectLiteErrorCodes.CODE_REQUIRED_PARAMETER_NOT_SET, "offersProvider is not set");
        }
        this.offersProvider = offersProvider;
    }
    setInstrumentsProvider(instrumentsProvider) {
        if (instrumentsProvider == null) {
            LogManager.getLogger().error("OrdersCalculator.setInstrumentsProvider(): instrumentsProvider is not set");
            throw exception.create(FXConnectLiteErrorCodes.CODE_REQUIRED_PARAMETER_NOT_SET, "instrumentsProvider is not set");
        }
        this.instrumentsProvider = instrumentsProvider;
    }
    setSystemSettingsProvider(systemSettingsProvider) {
        if (systemSettingsProvider == null) {
            LogManager.getLogger().error("OrdersCalculator.setSystemSettingsProvider(): systemSettingsProvider is not set");
            throw exception.create(FXConnectLiteErrorCodes.CODE_REQUIRED_PARAMETER_NOT_SET, "systemSettingsProvider is not set");
        }
        this.systemSettingsProvider = systemSettingsProvider;
    }
    calculatePublicFields(source) {
        let orders, order, i, builder, orderTrailingStopData, offer, instrument;
        if (source == null) {
            LogManager.getLogger().error("OrdersCalculator.calculatePublicFields(): source order is not set");
            throw exception.create(FXConnectLiteErrorCodes.CODE_REQUIRED_PARAMETER_NOT_SET, "source order is not set");
        }
        builder = new OrderCalculatedFieldsBuilder();
        orders = this.ordersProvider.getRawOrdersForPrimaryOrderId(source.getOrderId());
        for (i = 0; i <= orders.length - 1; i += 1) {
            order = orders[i];
            if (order.getStage() == "C" && stdlib.indexOf(order.getType(), "S", false) > -1) {
                this.fillStop(builder, order);
            } else if (order.getStage() == "C" && stdlib.indexOf(order.getType(), "L", false) > -1) {
                this.fillLimit(builder, order);
            }
        }
        if (source.getType() == "ST" && source.getWorkingIndicator() && source.getTradeId() != "" || this.isTrailingEntry(source)) {
            offer = this.offersProvider.getCalculatedOfferById(source.getOfferId());
            instrument = this.instrumentsProvider.getInstrumentByOfferId(source.getOfferId());
            orderTrailingStopData = this.orderTrailingStopCalculator.calculate(source, offer, instrument, this.systemSettingsProvider.getTrailingType());
            builder.setOrderTrailingStopData(orderTrailingStopData);
        }
        return builder.build();
    }
    isTrailingEntry(order) {
        return order.getType() == "STE" || order.getType() == "LTE" || order.getType() == "RTE";
    }
    fillLimit(builder, order) {
        if (order.getPegType() == null || stdlib.len(order.getPegType()) == 0) {
            builder.setCalculatedLimit(order.getRate());
            builder.setCalculatedTypeLimit(RateType.RateNonPegged);
        }
        else {
            builder.setCalculatedLimit(order.getPegOffset());
            if (order.getPegType() == "O") {
                builder.setCalculatedTypeLimit(RateType.RatePeggedOpen);
            }
            else {
                builder.setCalculatedTypeLimit(RateType.RatePeggedClose);
            }
        }
        builder.setCalculatedLimitOrderId(order.getOrderId());
    }
    fillStop(builder, order) {
        if (order.getPegType() == null || stdlib.len(order.getPegType()) == 0) {
            builder.setCalculatedStop(order.getRate());
            builder.setCalculatedTypeStop(RateType.RateNonPegged);
        }
        else {
            builder.setCalculatedStop(order.getPegOffset());
            if (order.getPegType() == "O") {
                builder.setCalculatedTypeStop(RateType.RatePeggedOpen);
            }
            else {
                builder.setCalculatedTypeStop(RateType.RatePeggedClose);
            }
        }
        builder.setCalculatedStopOrderId(order.getOrderId());
        builder.setCalculatedStopTrailStep(order.getTrailStep());
        builder.setCalculatedStopTrailRate(order.getTrailRate());
    }
}
module.exports = OrdersCalculator
