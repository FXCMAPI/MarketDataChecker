'use strict';
let cryptography = require('@gehtsoft/LuaxStdlib-node').cryptography;
let buffer = require('@gehtsoft/LuaxStdlib-node').buffer;
let io = require('@gehtsoft/LuaxStdlib-node').io;
//@@DocBrief("Abstract salt data using a specific algorithm using sha1.")
class ASaltGenerator {
    generate(data, salt) {
        let result;
        result = this.prepareSaltedData(data, salt);
        result = cryptography.SHA1(result);
        return result.toBase64();
    }
    prepareSaltedData(data, salt) {
        let length, result, saltBuffer;
        length = buffer.getEncodedStringLength(data, io.CP_ANSI);
        result = buffer.create(length);
        result.setEncodedString(0, data, io.CP_ANSI);
        saltBuffer = this.decryptSalt(salt);
        result.resize(length + saltBuffer.length());
        result.setBuffer(length, saltBuffer, 0, saltBuffer.length());
        return result;
    }
    decryptSalt(salt) {
        return null;
    }
}
module.exports = ASaltGenerator
