'use strict';
let DxFeedReceiveTimeSeriesPublisher = require('./DxFeedReceiveTimeSeriesPublisher.js');
let LogManager = require('./LogManager.js');
let DxFeedTimeSeriesDataReader = require('./DxFeedTimeSeriesDataReader.js');
let stdlib = require('@gehtsoft/LuaxStdlib-node').stdlib;
class DxFeedReceiveTimeSeriesCommand {
    socketCommunicator;
    logger;
    socketReceiveMessageListener;
    dxFeedReceiveTimeSeriesPublisher;
    constructor() {
        this.socketCommunicator = null;
        this.socketReceiveMessageListener = new DxFeedReceiveTimeSeriesCommand.SocketReceiveMessageListener(this);
        this.dxFeedReceiveTimeSeriesPublisher = new DxFeedReceiveTimeSeriesPublisher();
        this.logger = LogManager.getLogger();
    }
    processMessage(json) {
        let reader, data, ex;
        reader = new DxFeedTimeSeriesDataReader();
        try {
            data = reader.read(json);
            if (data.length > 0) {
                this.dxFeedReceiveTimeSeriesPublisher.notifyReceivedTimeSeries(data);
            }
        } catch(exTemp1) {
            ex = stdlib.ensureException(exTemp1);
            this.logger.error("can not process DxFeedReceiveTimeSeriesCommand response: " + ex.getMessage());
        }
    }
    subscribe(listener) {
        this.dxFeedReceiveTimeSeriesPublisher.subscribe(listener);
    }
    unsubscribe(listener) {
        this.dxFeedReceiveTimeSeriesPublisher.unsubscribe(listener);
    }
    stop() {
        this.socketCommunicator.unsubscribeJsonReceive(this.socketReceiveMessageListener);
    }
    onChange(state) {
        if (state.isOpen() && !state.hasError()) {
            this.socketCommunicator.subscribeJsonReceive(this.socketReceiveMessageListener);
        }
    }
    static create(socketCommunicator) {
        let dxFeedReceiveTimeSeriesCommand;
        dxFeedReceiveTimeSeriesCommand = new DxFeedReceiveTimeSeriesCommand();
        dxFeedReceiveTimeSeriesCommand.socketCommunicator = socketCommunicator;
        return dxFeedReceiveTimeSeriesCommand;
    }
}
module.exports = DxFeedReceiveTimeSeriesCommand
DxFeedReceiveTimeSeriesCommand.SocketReceiveMessageListener = class {
    _owner_;
    constructor(_owner_) {
        this._owner_ = _owner_;
    }
    onReceive(json) {
        this._owner_.processMessage(json);
    }
}
