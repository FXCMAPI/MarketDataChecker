'use strict';
let string_map = require('@gehtsoft/LuaxStdlib-node').string_map;
let AccountInfoBuilder = require('./AccountInfoBuilder.js');
//@@DocBrief("class provides access to a collection of account information")
class AccountsStorage {
    accountsStorage;
    accountInfoStorage;
    constructor() {
        this.accountsStorage = new string_map();
        this.accountInfoStorage = new string_map();
    }
    getAccountInfoCollection() {
        let length, i, keys, accountInfoCollection, accountInfo;
        keys = this.accountInfoStorage.keys();
        length = keys.length;
        accountInfoCollection = new Array(length);
        for (i = 0; i <= length - 1; i += 1) {
            accountInfo = this.accountInfoStorage.get(keys[i]);
            accountInfoCollection[i] = accountInfo;
        }
        return accountInfoCollection;
    }
    setAccount(account) {
        let accountInfoBuilder;
        this.accountsStorage.set(account.getAccountId(), account);
        accountInfoBuilder = new AccountInfoBuilder();
        accountInfoBuilder.setId(account.getAccountId());
        accountInfoBuilder.setName(account.getAccountName());
        accountInfoBuilder.setType(account.getAccountKind());
        this.accountInfoStorage.set(account.getAccountId(), accountInfoBuilder.build());
    }
    changeAccount(key, newAccount) {
        let accountBuilder;
        if (!this.accountsStorage.contains(key)) {
            return;
        }
        accountBuilder = this.accountsStorage.get(key);
        accountBuilder.setOrderAmountLimit(newAccount.getOrderAmountLimit());
        accountBuilder.setATPId(newAccount.getATPId());
        accountBuilder.setBalance(newAccount.getBalance());
        accountBuilder.setBaseUnitSize(newAccount.getBaseUnitSize());
        accountBuilder.setLastMarginCallDate(newAccount.getLastMarginCallDate());
        accountBuilder.setLeverageProfileId(newAccount.getLeverageProfileId());
        accountBuilder.setM2MEquity(newAccount.getM2MEquity());
        accountBuilder.setMaintenanceFlag(newAccount.getMaintenanceFlag());
        accountBuilder.setMaintenanceType(newAccount.getMaintenanceType());
        accountBuilder.setManagerAccountId(newAccount.getManagerAccountId());
        accountBuilder.setMarginCallFlag(newAccount.getMarginCallFlag());
        accountBuilder.setRefreshProfileFlags(newAccount.getRefreshProfileFlags());
        accountBuilder.setNonTradeEquity(newAccount.getNonTradeEquity());
    }
    removeAccount(key) {
        if (this.accountInfoStorage.contains(key)) {
            this.accountInfoStorage.remove(key);
        }
        if (this.accountsStorage.contains(key)) {
            this.accountsStorage.remove(key);
        }
    }
    getAccount(key) {
        if (!this.accountsStorage.contains(key)) {
            return null;
        }
        return this.accountsStorage.get(key);
    }
    getAccountInfo(key) {
        if (!this.accountInfoStorage.contains(key)) {
            return null;
        }
        return this.accountInfoStorage.get(key);
    }
    clear() {
        this.accountsStorage.clear();
        this.accountInfoStorage.clear();
    }
}
module.exports = AccountsStorage
