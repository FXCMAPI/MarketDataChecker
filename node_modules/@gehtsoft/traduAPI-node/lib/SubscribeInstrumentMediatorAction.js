'use strict';
let LogManager = require('./LogManager.js');
let CreateInstrumentChangeNotificationMessage = require('./CreateInstrumentChangeNotificationMessage.js');
class SubscribeInstrumentMediatorAction {
    callback;
    subscribeInstrumentDescriptors;
    crossInstrumentDescriptors;
    storage;
    beforeCallback;
    messageRouter;
    sendInCW;
    logger;
    constructor() {
        this.logger = LogManager.getLogger();
    }
    onSuccess() {
        let i, builder, instrument, instrumentBuilder;
        this.logger.info("SubscribeInstrumentMediatorAction.onSuccess(): main instruments: " + (this.subscribeInstrumentDescriptors.length).toString() + ", cross instruments: " + (this.crossInstrumentDescriptors.length).toString());
        for (i = 0; i <= this.subscribeInstrumentDescriptors.length - 1; i += 1) {
            builder = this.subscribeInstrumentDescriptors[i];
            builder.setSubscriptionStatus("T");
            instrument = this.storage.getInstrumentByOfferId(this.subscribeInstrumentDescriptors[i].getOfferId());
            if (instrument != null) {
                instrumentBuilder = instrument;
                instrumentBuilder.setSubscriptionStatus("T");
                this.sendNotification(this.subscribeInstrumentDescriptors[i].getOfferId());
            }
        }
        for (i = 0; i <= this.crossInstrumentDescriptors.length - 1; i += 1) {
            builder = this.crossInstrumentDescriptors[i];
            if (builder.getSubscriptionStatus() == "D") {
                builder.setSubscriptionStatus("V");
                instrument = this.storage.getInstrumentByOfferId(this.crossInstrumentDescriptors[i].getOfferId());
                if (instrument != null) {
                    instrumentBuilder = instrument;
                    instrumentBuilder.setSubscriptionStatus("V");
                    this.sendNotification(this.crossInstrumentDescriptors[i].getOfferId());
                }
            }
        }
        this.callback.onSuccess();
    }
    onError(error, unsucceededSymbols) {
        this.beforeCallback.invoke();
        this.callback.onError(error, unsucceededSymbols);
    }
    sendNotification(offerId) {
        if (this.sendInCW) {
            return;
        }
        this.messageRouter.publishNewMessage([CreateInstrumentChangeNotificationMessage.create(offerId)]);
    }
    static create(storage, callback, subscribeInstrumentDescriptors, crossInstrumentDescriptors, beforeCallback, messageRouter, sendInCW) {
        let instance;
        instance = new SubscribeInstrumentMediatorAction();
        instance.messageRouter = messageRouter;
        instance.sendInCW = sendInCW;
        instance.storage = storage;
        instance.callback = callback;
        instance.subscribeInstrumentDescriptors = subscribeInstrumentDescriptors;
        instance.crossInstrumentDescriptors = crossInstrumentDescriptors;
        instance.beforeCallback = beforeCallback;
        return instance;
    }
}
module.exports = SubscribeInstrumentMediatorAction
