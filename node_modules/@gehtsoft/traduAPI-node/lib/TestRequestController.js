'use strict';
let LogManager = require('./LogManager.js');
let MessageType = require('./MessageType.js');
class TestRequestController {
    sessionProvider;
    testRequestCommand;
    receiveNewMessageListener;
    messageRouter;
    logger;
    isStartedFlag;
    testRequestControllerCallback;
    testRequestCommandCallback;
    subscriptionsMdtRecover;
    constructor() {
        this.logger = LogManager.getLogger();
        this.isStartedFlag = false;
    }
    static create(sessionProvider, messageRouter, testRequestCommand, testRequestControllerCallback, subscriptionsMdtRecover) {
        let testRequestController;
        testRequestController = new TestRequestController();
        testRequestController.sessionProvider = sessionProvider;
        testRequestController.messageRouter = messageRouter;
        testRequestController.testRequestCommand = testRequestCommand;
        testRequestController.testRequestControllerCallback = testRequestControllerCallback;
        testRequestController.subscriptionsMdtRecover = subscriptionsMdtRecover;
        testRequestController.initialize();
        return testRequestController;
    }
    initialize() {
        this.testRequestCommandCallback = new TestRequestController.TestRequestCommandCallback(this);
        this.testRequestCommand.setTestRequestCommandCallback(this.testRequestCommandCallback);
        this.createReceiveNewMessageListener();
        this.messageRouter.subscribeNewMessageReceive(MessageType.Connected, this.receiveNewMessageListener);
        this.messageRouter.subscribeNewMessageReceive(MessageType.Disconnected, this.receiveNewMessageListener);
        this.messageRouter.subscribeNewMessageReceive(MessageType.LogicError, this.receiveNewMessageListener);
        this.messageRouter.subscribeNewMessageReceive(MessageType.Reconnecting, this.receiveNewMessageListener);
    }
    createReceiveNewMessageListener() {
        this.receiveNewMessageListener = new TestRequestController.ReceiveNewMessageListener(this);
        this.receiveNewMessageListener.initialize(this.sessionProvider, this.testRequestCommand);
    }
    start() {
        this.isStartedFlag = true;
        this.logger.debug("TestRequest for " + this.sessionProvider.getSession().getSessionId() + " was started");
        this.testRequestCommand.setSession(this.sessionProvider.getSession());
        this.testRequestCommand.execute();
    }
    stop() {
        if (this.isStartedFlag) {
            this.isStartedFlag = false;
            this.logger.debug("TestRequest was stopped");
            this.testRequestCommand.stop();
        }
    }
    shutdown() {
        this.stop();
        this.messageRouter.unsubscribeNewMessageReceive(MessageType.Connected, this.receiveNewMessageListener);
        this.messageRouter.unsubscribeNewMessageReceive(MessageType.Disconnected, this.receiveNewMessageListener);
        this.messageRouter.unsubscribeNewMessageReceive(MessageType.LogicError, this.receiveNewMessageListener);
        this.messageRouter.unsubscribeNewMessageReceive(MessageType.Reconnecting, this.receiveNewMessageListener);
    }
    getLogger() {
        return this.logger;
    }
}
module.exports = TestRequestController
TestRequestController.ReceiveNewMessageListener = class {
    sessionProvider;
    testRequestCommand;
    _owner_;
    constructor(_owner_) {
        this._owner_ = _owner_;
        this.sessionProvider = null;
        this.testRequestCommand = null;
    }
    onNewMessageReceive(message) {
        let logicErrorMessage;
        this._owner_.getLogger().debug("TestRequestController. Receive message: " + message.getType());
        if (message.getType() == MessageType.Connected && !this._owner_.isStartedFlag) {
            this._owner_.getLogger().debug("TestRequest for " + this.sessionProvider.getSession().getSessionId() + " was executed");
            this._owner_.isStartedFlag = true;
            this.testRequestCommand.setSession(this.sessionProvider.getSession());
            this.testRequestCommand.execute();
        } else if (message.getType() == MessageType.Reconnecting) {
            this._owner_.stop();
        } else if (message.getType() == MessageType.Disconnected) {
            this._owner_.stop();
        } else if (message.getType() == MessageType.LogicError) {
            this._owner_.stop();
            logicErrorMessage = message;
            this._owner_.getLogger().error("TestRequest was stopped due to the error: " + logicErrorMessage.getError());
            if (this._owner_.testRequestControllerCallback != null) {
                this._owner_.testRequestControllerCallback.onError(logicErrorMessage.getError());
            }
        }
    }
    initialize(sessionProvider, testRequestCommand) {
        this.testRequestCommand = testRequestCommand;
        this.sessionProvider = sessionProvider;
    }
}
TestRequestController.TestRequestCommandCallback = class {
    _owner_;
    constructor(_owner_) {
        this._owner_ = _owner_;
    }
    onSuccess(subscribedSymbolsCheckSum, numberOfSubscribedSymbols, streams, terminalId) {
        if (this._owner_.subscriptionsMdtRecover != null) {
            this._owner_.subscriptionsMdtRecover.checkAndRecover(subscribedSymbolsCheckSum, numberOfSubscribedSymbols, streams, terminalId);
        }
    }
    onError(error) {
        this._owner_.getLogger().info("TestRequestCommandCallback error: " + error);
    }
}
