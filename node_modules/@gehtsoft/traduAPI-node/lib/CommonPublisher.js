'use strict';
let list = require('@gehtsoft/LuaxStdlib-node').list;
let LogManager = require('./LogManager.js');
let stdlib = require('@gehtsoft/LuaxStdlib-node').stdlib;
class CommonPublisher {
    listeners;
    logger;
    constructor() {
        this.listeners = new list();
        this.logger = LogManager.getLogger();
    }
    length() {
        return this.listeners.length();
    }
    subscribe(callback) {
        let isAlreadySub, ex;
        try {
            isAlreadySub = this.isAlreadySubscribed(callback);
            if (!isAlreadySub) {
                this.listeners.add(callback);
            }
        } catch(exTemp1) {
            ex = stdlib.ensureException(exTemp1);
            this.logger.error("Listener subscribe failed: " + ex.getMessage());
        }
    }
    unsubscribe(callback) {
        let i, listener, ex;
        try {
            for (i = 0; i <= this.listeners.length() - 1; i += 1) {
                listener = this.listeners.get(i);
                if (callback == listener) {
                    this.listeners.remove(i);
                    break;
                }
            }
        } catch(exTemp2) {
            ex = stdlib.ensureException(exTemp2);
            this.logger.error("Listener unsubscribe failed: " + ex.getMessage());
        }
    }
    notifyAction(action) {
        let i, listener, ex, copy;
        copy = this.listeners.toArray();
        for (i = 0; i <= copy.length - 1; i += 1) {
            listener = copy[i];
            action.setListener(listener);
            try {
                action.execute();
            } catch(exTemp3) {
                ex = stdlib.ensureException(exTemp3);
                this.logger.error("Listener failed: " + ex.getMessage());
            }
        }
    }
    isAlreadySubscribed(listener) {
        let currentListener, i;
        for (i = 0; i <= this.listeners.length() - 1; i += 1) {
            currentListener = this.listeners.get(i);
            if (listener == currentListener) {
                return true;
            }
        }
        return false;
    }
}
module.exports = CommonPublisher
