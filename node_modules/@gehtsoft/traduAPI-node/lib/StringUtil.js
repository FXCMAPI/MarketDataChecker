'use strict';
let csvParser = require('@gehtsoft/LuaxStdlib-node').csvParser;
let stdlib = require('@gehtsoft/LuaxStdlib-node').stdlib;
let variantCast = require('@gehtsoft/LuaxStdlib-node').variantCast;
let list = require('@gehtsoft/LuaxStdlib-node').list;
let IntValueObject = require('./IntValueObject.js');
let StringValueObject = require('./StringValueObject.js');
class StringUtil {
    static arrayToString(strArray) {
        let i, stringList;
        stringList = "";
        for (i = 0; i <= strArray.length - 1; i += 1) {
            if (i != 0) {
                stringList = stringList + ", ";
            }
            stringList = stringList + strArray[i];
        }
        return stringList;
    }
    static split(text, by) {
        let fieldParser;
        fieldParser = new csvParser();
        fieldParser.valueSeparator = by;
        return fieldParser.splitLine(text);
    }
    static replace(source, oldSubstring, newSubstring) {
        let result, index, temp;
        result = source;
        if (source != null) {
            index = stdlib.indexOf(result, oldSubstring, false);
            while(index > -1) {
                temp = stdlib.left(result, index) + newSubstring + stdlib.substring(result, index + stdlib.len(oldSubstring), stdlib.len(result) - index - stdlib.len(oldSubstring));
                result = temp;
                index = stdlib.indexOf(result, oldSubstring, false);
            }
        }
        return result;
    }
    static getRequestNumber(requestId) {
        let lastDashIndex, substring, result;
        result = -1;
        if (requestId != null) {
            lastDashIndex = stdlib.lastIndexOf(requestId, "-", false);
            if (lastDashIndex > -1) {
                substring = stdlib.substring(requestId, lastDashIndex + 1, stdlib.len(requestId) - 1 - lastDashIndex);
                result = variantCast.castToInt(variantCast.fromString(substring));
            }
        }
        return result;
    }
    static getSessionId(requestId) {
        let lastDashIndex, substring;
        substring = "";
        if (requestId != null) {
            lastDashIndex = stdlib.lastIndexOf(requestId, "-", false);
            if (lastDashIndex > -1) {
                substring = stdlib.substring(requestId, 0, lastDashIndex);
            }
        }
        return substring;
    }
    static isIntNumber(source) {
        return StringUtil.isNumber(source, false);
    }
    static isRealNumber(source) {
        return StringUtil.isNumber(source, true);
    }
    static isNumber(source, pointIsAvailable) {
        let i, s;
        if (source != null && stdlib.len(source) > 0) {
            for (i = 0; i <= stdlib.len(source) - 1; i += 1) {
                s = stdlib.substring(source, i, 1);
                if (s != "0" && s != "1" && s != "2" && s != "3" && s != "4" && s != "5" && s != "6" && s != "7" && s != "8" && s != "9") {
                    if (s == "." && pointIsAvailable) {
                        continue;
                    }
                    return false;
                }
            }
        }
        else {
            return false;
        }
        return true;
    }
    static sortAsIntegersAsc(strArray) {
        let sourceList, resultList, resultArray, i, foundIndex, min, value;
        sourceList = new list();
        resultList = new list();
        for (i = 0; i <= strArray.length - 1; i += 1) {
            sourceList.add(IntValueObject.create(variantCast.castToInt(variantCast.fromString(strArray[i]))));
        }
        while(sourceList.length() > 0) {
            min = 999999999;
            foundIndex = -1;
            for (i = 0; i <= sourceList.length() - 1; i += 1) {
                value = sourceList.get(i).get();
                if (value < min) {
                    min = value;
                    foundIndex = i;
                }
            }
            resultList.add(StringValueObject.create("" + (min).toString() + ""));
            sourceList.remove(foundIndex);
        }
        resultArray = new Array(resultList.length());
        for (i = 0; i <= resultList.length() - 1; i += 1) {
            resultArray[i] = resultList.get(i).get();
        }
        return resultArray;
    }
}
module.exports = StringUtil
