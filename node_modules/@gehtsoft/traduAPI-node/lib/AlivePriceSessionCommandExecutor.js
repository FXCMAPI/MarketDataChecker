'use strict';
class AlivePriceSessionCommandExecutor {
    static get DEFAULT_PERIOD_MILLISECOND() { return 60000; }
    priceSessionCommandExecutor;
    pdasPriceTerminalControllerCallback;
    alivePriceSessionController;
    connectionParameters;
    commandFactory;
    messageFactory;
    requestNumberGenerator;
    messageExecutor;
    messageRouter;
    priceSessionProvider;
    connectionStatusManager;
    priceTerminal;
    aliveControllerFactory;
    alivePriceControllerCallback;
    constructor() {
        this.priceSessionCommandExecutor = null;
        this.pdasPriceTerminalControllerCallback = null;
        this.alivePriceSessionController = null;
        this.connectionParameters = null;
        this.commandFactory = null;
        this.messageFactory = null;
        this.requestNumberGenerator = null;
        this.messageExecutor = null;
        this.messageRouter = null;
        this.priceSessionProvider = null;
        this.connectionStatusManager = null;
        this.priceTerminal = null;
        this.alivePriceControllerCallback = null;
    }
    setSuccessor(priceSessionCommandExecutor) {
        this.priceSessionCommandExecutor = priceSessionCommandExecutor;
    }
    execute(pdasPriceTerminalControllerCallback) {
        this.pdasPriceTerminalControllerCallback = pdasPriceTerminalControllerCallback;
        if (this.priceSessionProvider.getSession() != null) {
            this.alivePriceSessionController = this.aliveControllerFactory.createAlivePrices(this.commandFactory, this.connectionParameters, this.priceSessionProvider, this.messageFactory, this.messageExecutor, this.messageRouter, this.requestNumberGenerator, AlivePriceSessionCommandExecutor.DEFAULT_PERIOD_MILLISECOND, this.priceTerminal, this.alivePriceControllerCallback);
            this.alivePriceSessionController.start();
            if (this.priceSessionCommandExecutor != null) {
                this.priceSessionCommandExecutor.execute(pdasPriceTerminalControllerCallback);
            }
        }
        else {
            pdasPriceTerminalControllerCallback.onError("The pdas price session is empty.");
        }
    }
    static create(commandEnvironment, commandFactory, priceSessionProvider, connectionStatusManager, priceTerminal, aliveControllerFactory, alivePriceControllerCallback) {
        let alivePriceSessionCommandExecutor;
        alivePriceSessionCommandExecutor = new AlivePriceSessionCommandExecutor();
        alivePriceSessionCommandExecutor.connectionParameters = commandEnvironment.getConnectionParameters();
        alivePriceSessionCommandExecutor.commandFactory = commandFactory;
        alivePriceSessionCommandExecutor.messageFactory = commandEnvironment.getMessageFactory();
        alivePriceSessionCommandExecutor.requestNumberGenerator = commandEnvironment.getRequestNumberGenerator();
        alivePriceSessionCommandExecutor.messageExecutor = commandEnvironment.getMessageExecutor();
        alivePriceSessionCommandExecutor.messageRouter = commandEnvironment.getMessageRouter();
        alivePriceSessionCommandExecutor.priceSessionProvider = priceSessionProvider;
        alivePriceSessionCommandExecutor.connectionStatusManager = connectionStatusManager;
        alivePriceSessionCommandExecutor.priceTerminal = priceTerminal;
        alivePriceSessionCommandExecutor.aliveControllerFactory = aliveControllerFactory;
        alivePriceSessionCommandExecutor.alivePriceControllerCallback = alivePriceControllerCallback;
        return alivePriceSessionCommandExecutor;
    }
    stop() {
        if (this.alivePriceSessionController != null) {
            this.alivePriceSessionController.shutdown();
        }
    }
}
module.exports = AlivePriceSessionCommandExecutor
