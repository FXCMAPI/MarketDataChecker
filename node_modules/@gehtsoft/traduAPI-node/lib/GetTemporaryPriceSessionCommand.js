'use strict';
let CommandStatusPublisher = require('./CommandStatusPublisher.js');
let LogManager = require('./LogManager.js');
let MessageType = require('./MessageType.js');
let UniqueStringBuilder = require('./UniqueStringBuilder.js');
//@@DocBrief("The command for getting temporary price session")
class GetTemporaryPriceSessionCommand {
    saltedPassword;
    login;
    applicationName;
    agent;
    messageFactory;
    terminal;
    requestNumberGenerator;
    publisher;
    messageRouter;
    receiveNewMessageListener;
    messageExecutor;
    tradingSession;
    logger;
    constructor() {
        this.publisher = new CommandStatusPublisher();
        this.receiveNewMessageListener = new GetTemporaryPriceSessionCommand.ReceiveNewMessageListener(this);
        this.logger = LogManager.getLogger();
    }
    execute() {
        let transportMessage, messageExecutorCallback;
        this.logger.debug("Execute command 'GetTemporaryPriceSessionCommand'");
        messageExecutorCallback = new GetTemporaryPriceSessionCommand.MessageExecutorCallback(this);
        this.messageRouter.subscribeNewMessageReceive(MessageType.GetTemporaryPriceSession, this.receiveNewMessageListener);
        transportMessage = this.messageFactory.createGetTemporaryPriceSessionRequestMessage(this.saltedPassword, this.login, this.applicationName, this.agent, this.terminal, this.tradingSession, this.requestNumberGenerator, UniqueStringBuilder.getString());
        this.messageExecutor.execute(transportMessage, messageExecutorCallback);
    }
    subscribeStatusChange(callback) {
        this.publisher.subscribe(callback);
    }
    unsubscribeStatusChange(callback) {
        this.publisher.unsubscribe(callback);
    }
    stop() {
        this.logger.debug("Stop command 'GetTemporaryPriceSessionCommand'");
        this.messageExecutor.cancel();
    }
}
module.exports = GetTemporaryPriceSessionCommand
GetTemporaryPriceSessionCommand.ReceiveNewMessageListener = class {
    _owner_;
    constructor(_owner_) {
        this._owner_ = _owner_;
    }
    onNewMessageReceive(message) {
        let getTemporaryPriceSessionMessage, error;
        this._owner_.messageRouter.unsubscribeNewMessageReceive(MessageType.GetTemporaryPriceSession, this._owner_.receiveNewMessageListener);
        this._owner_.logger.debug("GetTemporaryPriceSessionCommand. Receive message: " + message.getType());
        if (message.getType() != MessageType.GetTemporaryPriceSession) {
            this._owner_.publisher.notifyError("Unexpected message type: " + message.getType());
        }
        else {
            getTemporaryPriceSessionMessage = message;
            error = getTemporaryPriceSessionMessage.getError();
            if (error != null) {
                this._owner_.publisher.notifyError(error);
            }
            else {
                this._owner_.publisher.notifySuccess(message);
            }
        }
    }
}
GetTemporaryPriceSessionCommand.MessageExecutorCallback = class {
    _owner_;
    constructor(_owner_) {
        this._owner_ = _owner_;
    }
    onSuccessSent() {
        this._owner_.logger.debug("Message 'GetTemporaryPriceSessionCommand' successfully sent");
    }
    onError(error) {
        this._owner_.logger.error("Send message 'GetTemporaryPriceSessionCommand' failed: " + error);
        this._owner_.messageRouter.unsubscribeNewMessageReceive(MessageType.GetTemporaryPriceSession, this._owner_.receiveNewMessageListener);
        this._owner_.publisher.notifyError(error);
    }
}
