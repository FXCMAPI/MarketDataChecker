'use strict';
let CommonSubscribeInstrumentAction = require('./CommonSubscribeInstrumentAction.js');
let LogManager = require('./LogManager.js');
let list = require('@gehtsoft/LuaxStdlib-node').list;
let UnsubscribeInstrumentMediatorAction = require('./UnsubscribeInstrumentMediatorAction.js');
let SubscriptionInstrumentRequest = require('./SubscriptionInstrumentRequest.js');
let MessageType = require('./MessageType.js');
let StringUtil = require('./StringUtil.js');
let InstrumentDescriptorSplitterByPriceStream = require('./InstrumentDescriptorSplitterByPriceStream.js');
let InstrumentDescriptorFinderBySymbol = require('./InstrumentDescriptorFinderBySymbol.js');
let CompositeSubscriptionRequest = require('./CompositeSubscriptionRequest.js');
let MediatorBeforeCallback = require('./MediatorBeforeCallback.js');
let stdlib = require('@gehtsoft/LuaxStdlib-node').stdlib;
class UnsubscribeInstrumentAction extends CommonSubscribeInstrumentAction {
    unsubscriptionInstrumentCommandFactory;
    manageOffersProvider;
    messageRouter;
    clientCrossSymbolsProvider;
    logger;
    constructor() {
        super();
        this.logger = LogManager.getLogger();
    }
    static create(commandFactory, messageRouter, messageExecutor, sessionStorage, messageFactory, requestNumberGenerator, descriptorsStorage, instrumentsStorage, instrumentDescriptorsSeparator, clientCrossSymbolsProvider, unsubscriptionInstrumentCommandFactory, subscriptionStatusTracker, manageOffersProvider, instrumentUpdatesStorage, sendInCW) {
        let result;
        result = new UnsubscribeInstrumentAction();
        result.unsubscriptionInstrumentCommandFactory = unsubscriptionInstrumentCommandFactory;
        result.requestNumberGenerator = requestNumberGenerator;
        result.descriptorsStorage = descriptorsStorage;
        result.instrumentUpdatesStorage = instrumentUpdatesStorage;
        result.subscriptionStatusTracker = subscriptionStatusTracker;
        result.instrumentsStorage = instrumentsStorage;
        result.sessionStorage = sessionStorage;
        result.manageOffersProvider = manageOffersProvider;
        result.sendInCW = sendInCW;
        result.instrumentDescriptorsSeparator = instrumentDescriptorsSeparator;
        result.clientCrossSymbolsProvider = clientCrossSymbolsProvider;
        result.messageRouter = messageRouter;
        return result;
    }
    changeSatatusOnCrosses(symbolsToChangeStatus) {
        let instrumentDescriptor, instrumentDescriptors, instrumentDescriptorsList, i;
        instrumentDescriptorsList = new list();
        for (i = 0; i <= symbolsToChangeStatus.length - 1; i += 1) {
            instrumentDescriptor = this.descriptorsStorage.getInstrumentDescriptorBySymbol(symbolsToChangeStatus[i]);
            if (instrumentDescriptor != null) {
                instrumentDescriptorsList.add(instrumentDescriptor);
            }
        }
        if (instrumentDescriptorsList.length() > 0) {
            instrumentDescriptors = new Array(instrumentDescriptorsList.length());
            for (i = 0; i <= instrumentDescriptorsList.length() - 1; i += 1) {
                instrumentDescriptors[i] = instrumentDescriptorsList.get(i);
            }
            UnsubscribeInstrumentMediatorAction.create(this.instrumentsStorage, null, instrumentDescriptors, this.manageOffersProvider, new UnsubscribeInstrumentAction.DummyMediatorBeforeCallback(this), this.messageRouter, this.sendInCW, "V").onSuccess();
        }
    }
    sendPriceFeedCommands(groupedResult) {
        let priceStreams, offerIds, i;
        priceStreams = groupedResult.getPriceStreams();
        for (i = 0; i <= priceStreams.length - 1; i += 1) {
            if (this.sessionStorage.getPriceTerminalInitializerByPriceStreamId(priceStreams[i]) == null) {
                continue;
            }
            offerIds = groupedResult.getOffersIds(priceStreams[i]);
            this.unsubscriptionInstrumentCommandFactory.createCommandByRequest(SubscriptionInstrumentRequest.create(this.requestNumberGenerator.getNextRequestNumber(), MessageType.PriceFeed, offerIds)).execute();
        }
    }
    run() {
        let command, compositeSubscriptionRequest, splitter, groupedResult, instrumentDescriptorFinderBySymbol, instrumentDescriptorsResult, i, ex, trackNumber, beforeCallback, symbolsToUnsibscribe, symbolsToChangeStatus, referencedCrossSymbolsSeparator;
        if (this.symbols == null || this.symbols.length == 0) {
            this.callback.onError("Symbols array is empty or nil", new Array(0));
            return;
        }
        this.logger.info("UnsubscribeInstrumentAction.run(" + StringUtil.arrayToString(this.symbols) + ")");
        referencedCrossSymbolsSeparator = this.clientCrossSymbolsProvider.separateReferencedCrossSymbols(this.symbols);
        symbolsToUnsibscribe = referencedCrossSymbolsSeparator.getSymbolsNotReferencedAsCross();
        symbolsToChangeStatus = referencedCrossSymbolsSeparator.getSymbolsReferencedAsCross();
        this.changeSatatusOnCrosses(symbolsToChangeStatus);
        if (symbolsToUnsibscribe.length == 0) {
            this.callback.onSuccess();
            return;
        }
        splitter = new InstrumentDescriptorSplitterByPriceStream();
        instrumentDescriptorFinderBySymbol = InstrumentDescriptorFinderBySymbol.create(this.descriptorsStorage);
        instrumentDescriptorsResult = instrumentDescriptorFinderBySymbol.find(symbolsToUnsibscribe);
        if (instrumentDescriptorsResult.getError() != null) {
            this.callback.onError(instrumentDescriptorsResult.getError(), symbolsToUnsibscribe);
            return;
        }
        groupedResult = splitter.split(instrumentDescriptorsResult.getResult());
        this.sendPriceFeedCommands(groupedResult);
        if (this.sendInCW) {
            compositeSubscriptionRequest = CompositeSubscriptionRequest.create();
            compositeSubscriptionRequest.addRequest(SubscriptionInstrumentRequest.create(this.requestNumberGenerator.getNextRequestNumber(), MessageType.InstrumentSubscribingStatus, groupedResult.getAllOffersIds()));
            this.instrumentUpdatesStorage.addSymbols(symbolsToUnsibscribe);
            beforeCallback = MediatorBeforeCallback.create(symbolsToUnsibscribe, this.instrumentUpdatesStorage);
            trackNumber = this.subscriptionStatusTracker.track(compositeSubscriptionRequest, UnsubscribeInstrumentMediatorAction.create(this.instrumentsStorage, this.callback, instrumentDescriptorsResult.getResult(), this.manageOffersProvider, beforeCallback, this.messageRouter, this.sendInCW, "D"));
            try {
                for (i = 0; i <= compositeSubscriptionRequest.length() - 1; i += 1) {
                    command = this.unsubscriptionInstrumentCommandFactory.createCommandByRequest(compositeSubscriptionRequest.getRequest(i));
                    command.execute();
                }
            } catch(exTemp1) {
                ex = stdlib.ensureException(exTemp1);
                this.instrumentUpdatesStorage.removeSymbols(symbolsToUnsibscribe);
                this.subscriptionStatusTracker.cancel(trackNumber);
                this.callback.onError(ex.getMessage(), symbolsToUnsibscribe);
            }
        }
        else {
            UnsubscribeInstrumentMediatorAction.create(this.instrumentsStorage, this.callback, instrumentDescriptorsResult.getResult(), this.manageOffersProvider, new UnsubscribeInstrumentAction.DummyMediatorBeforeCallback(this), this.messageRouter, this.sendInCW, "D").onSuccess();
        }
    }
}
module.exports = UnsubscribeInstrumentAction
UnsubscribeInstrumentAction.DummyMediatorBeforeCallback = class {
    _owner_;
    constructor(_owner_) {
        this._owner_ = _owner_;
    }
    invoke() {
        return void(0);
    }
}
