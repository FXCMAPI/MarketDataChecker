'use strict';
let stdlib = require('@gehtsoft/LuaxStdlib-node').stdlib;
let variantCast = require('@gehtsoft/LuaxStdlib-node').variantCast;
class DateTimeParser {
    static get DAYS_IN_1970_YEARS() { return 719162; }
    static get DAY_IN_SECONDS() { return 86400; }
    static isValidDateTimeString(dateTimeString) {
        return dateTimeString != null && (stdlib.len(dateTimeString) == 14 || stdlib.len(dateTimeString) == 17);
    }
    static parseDateTimeFromString(dateTimeString) {
        let year, month, day, hour, minute, second, milli;
        if (!DateTimeParser.isValidDateTimeString(dateTimeString)) {
            return stdlib.mkdatetime(1900, 1, 1, 0, 0, 0, 0);
        }
        month = variantCast.castToInt(variantCast.fromString(stdlib.substring(dateTimeString, 0, 2)));
        day = variantCast.castToInt(variantCast.fromString(stdlib.substring(dateTimeString, 2, 2)));
        year = variantCast.castToInt(variantCast.fromString(stdlib.substring(dateTimeString, 4, 4)));
        hour = variantCast.castToInt(variantCast.fromString(stdlib.substring(dateTimeString, 8, 2)));
        minute = variantCast.castToInt(variantCast.fromString(stdlib.substring(dateTimeString, 10, 2)));
        second = variantCast.castToInt(variantCast.fromString(stdlib.substring(dateTimeString, 12, 2)));
        milli = 0;
        if (stdlib.len(dateTimeString) == 17) {
            milli = variantCast.castToInt(variantCast.fromString(stdlib.substring(dateTimeString, 14, 3)));
        }
        return stdlib.mkdatetime(year, month, day, hour, minute, second, milli);
    }
    static isValidDateTimeLongString(dateTimeString) {
        return dateTimeString != null && (stdlib.len(dateTimeString) == 21 || stdlib.len(dateTimeString) == 17);
    }
    static parseDateTimeFromLongString(dateTimeString) {
        let year, month, day, hour, minute, second, milli;
        if (!DateTimeParser.isValidDateTimeLongString(dateTimeString)) {
            return stdlib.mkdatetime(1900, 1, 1, 0, 0, 0, 0);
        }
        year = variantCast.castToInt(variantCast.fromString(stdlib.substring(dateTimeString, 0, 4)));
        month = variantCast.castToInt(variantCast.fromString(stdlib.substring(dateTimeString, 4, 2)));
        day = variantCast.castToInt(variantCast.fromString(stdlib.substring(dateTimeString, 6, 2)));
        hour = variantCast.castToInt(variantCast.fromString(stdlib.substring(dateTimeString, 9, 2)));
        minute = variantCast.castToInt(variantCast.fromString(stdlib.substring(dateTimeString, 12, 2)));
        second = variantCast.castToInt(variantCast.fromString(stdlib.substring(dateTimeString, 15, 2)));
        milli = 0;
        if (stdlib.len(dateTimeString) == 21) {
            milli = variantCast.castToInt(variantCast.fromString(stdlib.substring(dateTimeString, 18, 3)));
        }
        return stdlib.mkdatetime(year, month, day, hour, minute, second, milli);
    }
    static toShortIso(dateTime) {
        let result;
        result = (stdlib.year(dateTime)).toString();
        result = result + DateTimeParser.print2digits(stdlib.month(dateTime));
        result = result + DateTimeParser.print2digits(stdlib.day(dateTime)) + "T";
        result = result + DateTimeParser.print2digits(stdlib.hour(dateTime));
        result = result + DateTimeParser.print2digits(stdlib.minute(dateTime));
        result = result + DateTimeParser.print2digits(stdlib.second(dateTime)) + ".";
        result = result + DateTimeParser.print3digits(stdlib.millisecond(dateTime));
        return result;
    }
    static toFormatDateString(dateTime) {
        let result;
        result = DateTimeParser.print2digits(stdlib.month(dateTime)) + "/";
        result = result + DateTimeParser.print2digits(stdlib.day(dateTime)) + "/";
        result = result + (stdlib.year(dateTime)).toString();
        return result;
    }
    static toDateTimeString(dateTime) {
        let result;
        result = DateTimeParser.print2digits(stdlib.month(dateTime));
        result = result + DateTimeParser.print2digits(stdlib.day(dateTime));
        result = result + (stdlib.year(dateTime)).toString();
        result = result + DateTimeParser.print2digits(stdlib.hour(dateTime));
        result = result + DateTimeParser.print2digits(stdlib.minute(dateTime));
        result = result + DateTimeParser.print2digits(stdlib.second(dateTime));
        result = result + DateTimeParser.print3digits(stdlib.millisecond(dateTime));
        return result;
    }
    static toDateTimeStringWithoutMilliseconds(dateTime) {
        let result;
        result = DateTimeParser.print2digits(stdlib.month(dateTime));
        result = result + DateTimeParser.print2digits(stdlib.day(dateTime));
        result = result + (stdlib.year(dateTime)).toString();
        result = result + DateTimeParser.print2digits(stdlib.hour(dateTime));
        result = result + DateTimeParser.print2digits(stdlib.minute(dateTime));
        result = result + DateTimeParser.print2digits(stdlib.second(dateTime));
        return result;
    }
    static toUnixTimestampString(dateTime) {
        let timeInSeconds, milliseconds;
        if (stdlib.year(dateTime) >= 1970) {
            timeInSeconds = DateTimeParser.dateToSeconds(stdlib.year(dateTime), stdlib.month(dateTime), stdlib.day(dateTime)) + DateTimeParser.timeToSeconds(stdlib.hour(dateTime), stdlib.minute(dateTime), stdlib.second(dateTime));
            milliseconds = stdlib.millisecond(dateTime);
            if (timeInSeconds > 0 || milliseconds > 0) {
                return variantCast.fromInt(timeInSeconds).asString() + DateTimeParser.print3digits(stdlib.millisecond(dateTime));
            }
        }
        return "0";
    }
    static print2digits(value) {
        if (value < 10) {
            return "0" + (value).toString();
        }
        else {
            return variantCast.fromInt(value).asString();
        }
    }
    static print3digits(value) {
        if (value < 100) {
            return "0" + DateTimeParser.print2digits(value);
        }
        else {
            return variantCast.fromInt(value).asString();
        }
    }
    static isLeapYear(year) {
        if (year % 4 != 0) {
            return false;
        }
        if (year % 100 == 0) {
            return year % 400 == 0;
        }
        return true;
    }
    static dateToSeconds(year, month, day) {
        let daysToMonth, previousYear, daysInPreviousYears, totalDays, temp;
        if (DateTimeParser.isLeapYear(year)) {
            daysToMonth = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335, 366];
        }
        else {
            daysToMonth = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365];
        }
        previousYear = year - 1;
        daysInPreviousYears = previousYear * 365;
        temp = DateTimeParser.getIntegerPart(previousYear, 4);
        temp = temp - DateTimeParser.getIntegerPart(previousYear, 100);
        temp = temp + DateTimeParser.getIntegerPart(previousYear, 400);
        daysInPreviousYears = daysInPreviousYears + temp;
        daysInPreviousYears = daysInPreviousYears - DateTimeParser.DAYS_IN_1970_YEARS;
        totalDays = daysInPreviousYears + daysToMonth[month - 1] + day - 1;
        return totalDays * DateTimeParser.DAY_IN_SECONDS;
    }
    static getIntegerPart(previousYear, divider) {
        return Math.trunc(stdlib.floor((previousYear / divider)));
    }
    static timeToSeconds(hour, minute, second) {
        return hour * 3600 + minute * 60 + second;
    }
}
module.exports = DateTimeParser
