'use strict';
let LoginError = require('./LoginError.js');
let stdlib = require('@gehtsoft/LuaxStdlib-node').stdlib;
let LoginParametersCheckResultBuilder = require('./LoginParametersCheckResultBuilder.js');
//@@DocBrief("The class for checking the parameters of the login")
class LoginParametersChecker {
    check(user, passwordOrSso, tradingSystemUrl, connection, loginCallback, isSso) {
        if (loginCallback == null) {
            return this.createResponse(LoginError.CODE_EMPTY_PARAMETER, "Login callback should be set", false);
        }
        if (tradingSystemUrl == null || stdlib.len(tradingSystemUrl) == 0) {
            return this.createResponse(LoginError.CODE_EMPTY_PARAMETER, "Empty trading system URL", false);
        }
        if (connection == null || stdlib.len(connection) == 0) {
            return this.createResponse(LoginError.CODE_EMPTY_PARAMETER, "Empty connection name", false);
        }
        if (user == null || stdlib.len(user) == 0 || passwordOrSso == null || stdlib.len(passwordOrSso) == 0) {
            if (isSso) {
                return this.createResponse(LoginError.CODE_EMPTY_PARAMETER, "Empty user name or SSO token", false);
            }
            else {
                return this.createResponse(LoginError.CODE_EMPTY_PARAMETER, "Empty user name or password", false);
            }
        }
        return this.createResponse(LoginError.CODE_NOT_SPECIFIED, null, true);
    }
    checkAttachWithJWT(jwt, tradingSystemUrl, connection) {
        if (tradingSystemUrl == null || stdlib.len(tradingSystemUrl) == 0) {
            return this.createResponse(LoginError.CODE_EMPTY_PARAMETER, "Empty trading system URL", false);
        }
        if (connection == null || stdlib.len(connection) == 0) {
            return this.createResponse(LoginError.CODE_EMPTY_PARAMETER, "Empty connection name", false);
        }
        if (jwt == null) {
            return this.createResponse(LoginError.CODE_EMPTY_PARAMETER, "Empty JWT", false);
        }
        if (jwt.getLogin() == null || stdlib.len(jwt.getLogin()) == 0) {
            return this.createResponse(LoginError.CODE_EMPTY_PARAMETER, "Empty login", false);
        }
        if (jwt.getSsoToken() == null || stdlib.len(jwt.getSsoToken()) == 0) {
            return this.createResponse(LoginError.CODE_EMPTY_PARAMETER, "Empty SSO token", false);
        }
        return this.createResponse(LoginError.CODE_NOT_SPECIFIED, null, true);
    }
    createResponse(code, error, passed) {
        let result;
        result = new LoginParametersCheckResultBuilder();
        result.setCode(code);
        result.setError(error);
        result.setCheckPassed(passed);
        return result.build();
    }
}
module.exports = LoginParametersChecker
