'use strict';
let ClosedPositionUpdate = require('./ClosedPositionUpdate.js');
let ClosedPositionBuilder = require('./ClosedPositionBuilder.js');
let FieldChangeChecker = require('./FieldChangeChecker.js');
let variantCast = require('@gehtsoft/LuaxStdlib-node').variantCast;
let DateTimeParser = require('./DateTimeParser.js');
let stdlib = require('@gehtsoft/LuaxStdlib-node').stdlib;
//@@DocBrief("The builder of the ClosedPosition class")
class ClosedPositionUpdateBuilder extends ClosedPositionUpdate {
    ClosedPositionBuilder;
    constructor() {
        super();
        this.ClosedPositionBuilder = new ClosedPositionBuilder();
    }
    setTradeID(value) {
        this.tradeIdChanged = false;
        if (FieldChangeChecker.isFieldChange(value)) {
            this.ClosedPositionBuilder.setTradeID(value);
            this.tradeIdChanged = true;
        }
    }
    setAccountId(value) {
        this.accountIdChanged = false;
        if (FieldChangeChecker.isFieldChange(value)) {
            this.ClosedPositionBuilder.setAccountId(value);
            this.accountIdChanged = true;
        }
    }
    setAccountName(value) {
        this.accountNameChanged = false;
        if (FieldChangeChecker.isFieldChange(value)) {
            this.ClosedPositionBuilder.setAccountName(value);
            this.accountNameChanged = true;
        }
    }
    setAccountKind(value) {
        this.accountKindChanged = false;
        if (FieldChangeChecker.isFieldChange(value)) {
            this.ClosedPositionBuilder.setAccountKind(value);
            this.accountKindChanged = true;
        }
    }
    setOfferId(value) {
        this.offerIdChanged = false;
        if (FieldChangeChecker.isFieldChange(value)) {
            this.ClosedPositionBuilder.setOfferId(value);
            this.offerIdChanged = true;
        }
    }
    setAmount(value) {
        this.amountChanged = false;
        if (FieldChangeChecker.isFieldChange(value)) {
            this.ClosedPositionBuilder.setAmount(variantCast.castToInt(variantCast.fromString(value)));
            this.amountChanged = true;
        }
    }
    setBuySell(value) {
        this.buySellChanged = false;
        if (FieldChangeChecker.isFieldChange(value)) {
            this.ClosedPositionBuilder.setBuySell(value);
            this.buySellChanged = true;
        }
    }
    setOpenRate(value) {
        this.openRateChanged = false;
        if (FieldChangeChecker.isFieldChange(value)) {
            this.ClosedPositionBuilder.setOpenRate(variantCast.castToReal(variantCast.fromString(value)));
            this.openRateChanged = true;
        }
    }
    setOpenTime(value) {
        this.openTimeChanged = false;
        if (FieldChangeChecker.isFieldChange(value)) {
            this.ClosedPositionBuilder.setOpenTime(DateTimeParser.parseDateTimeFromString(value));
            this.openTimeChanged = true;
        }
    }
    setOpenQuoteId(value) {
        this.openQuoteIdChanged = false;
        if (FieldChangeChecker.isFieldChange(value)) {
            this.ClosedPositionBuilder.setOpenQuoteId(value);
            this.openQuoteIdChanged = true;
        }
    }
    setOpenOrderId(value) {
        this.openOrderIdChanged = false;
        if (FieldChangeChecker.isFieldChange(value)) {
            this.ClosedPositionBuilder.setOpenOrderId(value);
            this.openOrderIdChanged = true;
        }
    }
    setOpenOrderReqId(value) {
        this.openOrderReqIdChanged = false;
        if (FieldChangeChecker.isFieldChange(value)) {
            this.ClosedPositionBuilder.setOpenOrderReqId(value);
            this.openOrderReqIdChanged = true;
        }
    }
    setOpenOrderRequestTXT(value) {
        this.openOrderRequestTXTChanged = false;
        if (FieldChangeChecker.isFieldChange(value)) {
            this.ClosedPositionBuilder.setOpenOrderRequestTXT(value);
            this.openOrderRequestTXTChanged = true;
        }
    }
    setCloseRate(value) {
        this.closeRateChanged = false;
        if (FieldChangeChecker.isFieldChange(value)) {
            this.ClosedPositionBuilder.setCloseRate(variantCast.castToReal(variantCast.fromString(value)));
            this.closeRateChanged = true;
        }
    }
    setCloseTime(value) {
        this.closeTimeChanged = false;
        if (FieldChangeChecker.isFieldChange(value)) {
            this.ClosedPositionBuilder.setCloseTime(DateTimeParser.parseDateTimeFromString(value));
            this.closeTimeChanged = true;
        }
    }
    setCloseQuoteId(value) {
        this.closeQuoteIdChanged = false;
        if (FieldChangeChecker.isFieldChange(value)) {
            this.ClosedPositionBuilder.setCloseQuoteId(value);
            this.closeQuoteIdChanged = true;
        }
    }
    setCloseOrderId(value) {
        this.closeOrderIdChanged = false;
        if (FieldChangeChecker.isFieldChange(value)) {
            this.ClosedPositionBuilder.setCloseOrderId(value);
            this.closeOrderIdChanged = true;
        }
    }
    setCloseOrderReqId(value) {
        this.closeOrderReqIdChanged = false;
        if (FieldChangeChecker.isFieldChange(value)) {
            this.ClosedPositionBuilder.setCloseOrderReqId(value);
            this.closeOrderReqIdChanged = true;
        }
    }
    setCloseOrderRequestTXT(value) {
        this.closeOrderRequestTXTChanged = false;
        if (FieldChangeChecker.isFieldChange(value)) {
            this.ClosedPositionBuilder.setCloseOrderRequestTXT(value);
            this.closeOrderRequestTXTChanged = true;
        }
    }
    setCloseOrderParties(value) {
        this.partiesChanged = false;
        if (FieldChangeChecker.isFieldChange(value)) {
            this.ClosedPositionBuilder.setCloseOrderParties(value);
            this.partiesChanged = true;
        }
    }
    setGrossPL(value) {
        this.grossPLChanged = false;
        if (FieldChangeChecker.isFieldChange(value)) {
            this.ClosedPositionBuilder.setGrossPL(variantCast.castToReal(variantCast.fromString(value)));
            this.grossPLChanged = true;
        }
    }
    setCommission(value) {
        this.commissionChanged = false;
        if (FieldChangeChecker.isFieldChange(value)) {
            this.ClosedPositionBuilder.setCommission(variantCast.castToReal(variantCast.fromString(value)));
            this.commissionChanged = true;
        }
    }
    setRolloverInterest(value) {
        this.rolloverInterestChanged = false;
        if (FieldChangeChecker.isFieldChange(value)) {
            this.ClosedPositionBuilder.setRolloverInterest(variantCast.castToReal(variantCast.fromString(value)));
            this.rolloverInterestChanged = true;
        }
    }
    setTradeIdOrigin(value) {
        this.tradeIdOriginChanged = false;
        if (FieldChangeChecker.isFieldChange(value)) {
            this.ClosedPositionBuilder.setTradeIdOrigin(value);
            this.tradeIdOriginChanged = true;
        }
    }
    setTradeIdRemain(value) {
        this.tradeIdRemainChanged = false;
        if (FieldChangeChecker.isFieldChange(value)) {
            this.ClosedPositionBuilder.setTradeIdRemain(value);
            this.tradeIdRemainChanged = true;
        }
    }
    setValueDate(value) {
        this.valueDateChanged = false;
        if (FieldChangeChecker.isFieldChange(value)) {
            this.ClosedPositionBuilder.setValueDate(value);
            this.valueDateChanged = true;
        }
    }
    setDividends(value) {
        this.dividendsChanged = false;
        if (FieldChangeChecker.isFieldChange(value)) {
            if (stdlib.len(value) == 0) {
                this.ClosedPositionBuilder.setDividends(0.0);
                return;
            }
            this.ClosedPositionBuilder.setDividends(variantCast.castToReal(variantCast.fromString(value)));
            this.dividendsChanged = true;
        }
    }
    build() {
        this.ClosedPosition = this.ClosedPositionBuilder.build();
        return this;
    }
}
module.exports = ClosedPositionUpdateBuilder
