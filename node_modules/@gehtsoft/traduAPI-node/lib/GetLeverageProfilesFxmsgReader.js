'use strict';
let ABatchFxmsgReader = require('./ABatchFxmsgReader.js');
let LeverageProfileCsvParser = require('./LeverageProfileCsvParser.js');
let PdasRequestCommand = require('./PdasRequestCommand.js');
let GetLeverageProfilesMessageBuilder = require('./GetLeverageProfilesMessageBuilder.js');
let LeverageProfilesList = require('./LeverageProfilesList.js');
class GetLeverageProfilesFxmsgReader extends ABatchFxmsgReader {
    leverageProfileCsvParser;
    constructor() {
        super();
        this.leverageProfileCsvParser = new LeverageProfileCsvParser();
    }
    getExpectedCommand() {
        return PdasRequestCommand.GET_LEVERAGE_PROFILE;
    }
    processData(responseList, data, acctId, offerIds) {
        let getLeverageProfilesMessageBuilder;
        getLeverageProfilesMessageBuilder = new GetLeverageProfilesMessageBuilder();
        getLeverageProfilesMessageBuilder.addLeverageProfiles(this.parseLeverageProfile(data, acctId));
        responseList.add(this.createLockedMessage(getLeverageProfilesMessageBuilder.build()));
    }
    parseLeverageProfile(data, acctId) {
        let lines, i, leverageProfilesList, leverageProfile;
        leverageProfilesList = new LeverageProfilesList();
        lines = this.linesParser.splitLine(data);
        for (i = 0; i <= lines.length - 1; i += 1) {
            leverageProfile = this.leverageProfileCsvParser.parse(lines[i], acctId);
            if (leverageProfile != null) {
                leverageProfilesList.add(leverageProfile);
            }
        }
        return leverageProfilesList;
    }
}
module.exports = GetLeverageProfilesFxmsgReader
