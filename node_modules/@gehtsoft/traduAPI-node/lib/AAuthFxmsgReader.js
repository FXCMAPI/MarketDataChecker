'use strict';
let FxmsgReaderUtil = require('./FxmsgReaderUtil.js');
let PdasMessageType = require('./PdasMessageType.js');
let MessageBuilder = require('./MessageBuilder.js');
let PdasMessageFieldTag = require('./PdasMessageFieldTag.js');
class AAuthFxmsgReader {
    messages;
    read(responseList, xmlRootNode, messages) {
        let messageNode, message;
        this.messages = messages;
        messageNode = FxmsgReaderUtil.getMessageNode(xmlRootNode, PdasMessageType.USER_RESPONSE);
        if (messageNode == null) {
            message = this.processEmptyMessage();
            if (message != null) {
                responseList.add(MessageBuilder.createLockedMessage(message));
            }
            return;
        }
        if (messages != null) {
            this.processMessage(responseList, messageNode);
        }
    }
    processMessage(responseList, messageNode) {
        let i, statusString, statusTextString, userRequestType, commandId, requestId, message;
        for (i = 0; i <= this.messages.length - 1; i += 1) {
            if (this.messages[i].getType() == PdasMessageType.USER_RESPONSE) {
                statusString = this.messages[i].getFieldValue(PdasMessageFieldTag.USER_STATUS);
                statusTextString = this.messages[i].getFieldValue(PdasMessageFieldTag.USER_STATUS_TEXT);
                userRequestType = this.messages[i].getFieldValue(PdasMessageFieldTag.USER_REQUEST_TYPE);
                commandId = this.messages[i].getFieldValue(PdasMessageFieldTag.FXCM_COMMAND_ID);
                requestId = this.messages[i].getFieldValue(PdasMessageFieldTag.USER_REQUEST_ID);
                if (requestId == null) {
                    requestId = this.messages[i].getFieldValue(PdasMessageFieldTag.TEST_REQUEST_ID);
                }
                if (!this.checkFields(userRequestType, commandId, statusString, statusTextString)) {
                    continue;
                }
                message = this.processStatus(statusString, statusTextString, requestId);
                if (message != null) {
                    responseList.add(MessageBuilder.createLockedMessage(message));
                    return;
                }
            }
        }
    }
    checkFields(userRequestType, commandId, statusString, statusTextString) {
        if (!this.isProcessMessageByUserRequestTypeAndCommandId(userRequestType, commandId)) {
            return false;
        }
        return !(statusString == null || statusTextString == null);
    }
    isProcessMessageByUserRequestTypeAndCommandId(userRequestType, commandId) {
        return this.isProcessMessageByUserRequestType(userRequestType);
    }
    isProcessMessageByUserRequestType(userRequestType) {
        return true;
    }
    processStatus(status, statusText, requestId) {
        return null;
    }
    processEmptyMessage() {
        return null;
    }
}
module.exports = AAuthFxmsgReader
