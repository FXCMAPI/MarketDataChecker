'use strict';
let APdasRequestMessage = require('./APdasRequestMessage.js');
let stdlib = require('@gehtsoft/LuaxStdlib-node').stdlib;
let PdasMessageFieldFactory = require('./PdasMessageFieldFactory.js');
let PdasMessageSerializer = require('./PdasMessageSerializer.js');
let PdasMessageType = require('./PdasMessageType.js');
let PdasMessageFieldTag = require('./PdasMessageFieldTag.js');
let PdasMessageValue = require('./PdasMessageValue.js');
let PdasConstants = require('./PdasConstants.js');
let PdasTransportMessage = require('./PdasTransportMessage.js');
class PdasRakeOutRequestMessage extends APdasRequestMessage {
    build(session, stikingTime, requestNumberGenerator, terminal, priceTerminal, messageFlags, messageType) {
        let pdasMessageSerializer, factory, pdasMessage, requestId, pdasMessageList, group, terminalUrl, subId, result;
        terminalUrl = terminal.getUrls()[0];
        subId = terminal.getSubId();
        if (priceTerminal != null) {
            terminalUrl = priceTerminal.getUrls()[0];
            if (priceTerminal.getSubId() != null && stdlib.len(priceTerminal.getSubId()) > 0) {
                subId = priceTerminal.getSubId();
            }
        }
        factory = new PdasMessageFieldFactory();
        pdasMessageSerializer = new PdasMessageSerializer();
        pdasMessage = factory.createMessage(PdasMessageType.FXCM_REQUEST);
        requestId = session.getSessionId() + "-" + (requestNumberGenerator.getNextRequestNumber()).toString();
        pdasMessage.addChild(factory.createStringField(PdasMessageFieldTag.TEST_REQUEST_ID, requestId));
        pdasMessage.addChild(factory.createStringField(PdasMessageFieldTag.TRADING_SESSION_ID, session.getTradingTerminal().getId()));
        APdasRequestMessage.addSaltedRequestIdIfRequired(session, requestId, pdasMessage, factory);
        pdasMessage.addChild(factory.createStringField(PdasMessageFieldTag.MSG_TYPE, PdasMessageType.FXCM_REQUEST));
        pdasMessage.addChild(factory.createStringField(PdasMessageFieldTag.TRADING_SESSION_SUB_ID, subId));
        pdasMessageList = factory.createList(PdasMessageFieldTag.FXCM_NO_PARAM);
        group = factory.createGroup();
        group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_NAME, PdasMessageValue.CLIENT_BROADCAST_ID));
        group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_VALUE, "0"));
        pdasMessageList.addChild(group);
        group = factory.createGroup();
        group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_NAME, PdasMessageValue.CLIENT_BMESSAGE_ID));
        group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_VALUE, "0"));
        pdasMessageList.addChild(group);
        group = factory.createGroup();
        group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_NAME, PdasMessageValue.CLIENT_MAIL_ID));
        group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_VALUE, "0"));
        pdasMessageList.addChild(group);
        group = factory.createGroup();
        group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_NAME, PdasMessageValue.CLIENT_TIMEOUT));
        group.addChild(factory.createIntField(PdasMessageFieldTag.FXCM_PARAM_VALUE, stikingTime));
        pdasMessageList.addChild(group);
        group = factory.createGroup();
        group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_NAME, PdasMessageValue.CLIENT_MESSAGE_FLAG));
        group.addChild(factory.createLongField(PdasMessageFieldTag.FXCM_PARAM_VALUE, messageFlags));
        pdasMessageList.addChild(group);
        pdasMessage.addChild(pdasMessageList);
        pdasMessage.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_COMMAND_ID, "0"));
        pdasMessage.addChild(factory.createStringField(PdasConstants.SID, session.getSessionId()));
        pdasMessage.addChild(factory.createIntField(PdasMessageValue.CLIENT_WAITTIME, stikingTime));
        result = PdasTransportMessage.create(messageType, this.createRequestUrl(terminalUrl), pdasMessageSerializer.serialize(pdasMessage));
        return result;
    }
}
module.exports = PdasRakeOutRequestMessage
