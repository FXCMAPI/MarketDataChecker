'use strict';
let ASubscriptionInstrumentCommandFactory = require('./ASubscriptionInstrumentCommandFactory.js');
let PriceFeedCommandDescriptorBuilder = require('./PriceFeedCommandDescriptorBuilder.js');
let MessageType = require('./MessageType.js');
let exception = require('@gehtsoft/LuaxStdlib-node').exception;
class UnsubscriptionInstrumentCommandFactory extends ASubscriptionInstrumentCommandFactory {
    createCommandByRequest(subscriptionInstrumentRequest) {
        let command, messageType;
        command = null;
        messageType = subscriptionInstrumentRequest.getMessageType();
        if (messageType == MessageType.PriceFeed) {
            command = this.createPriceFeedCommand(subscriptionInstrumentRequest, PriceFeedCommandDescriptorBuilder.UNSUBSCRIBE);
        } else if (messageType == MessageType.InstrumentSubscribingStatus) {
            command = this.createInstrumentSubscribingStatusCommand(subscriptionInstrumentRequest, false);
        } else if (messageType == MessageType.GetOffers) {
            command = this.commandFactory.createGetAllOffersCommand(subscriptionInstrumentRequest.getOfferIds(), this.messageExecutor, this.sessionProvider.getSession(), this.messageFactory, subscriptionInstrumentRequest.getRequestNumber());
        }         else {
            throw exception.create(0, "Command for " + messageType + " is not supported");
        }
        return command;
    }
    static create(commandFactory, messageExecutor, messageFactory, sessionProvider, instrumentsStorage) {
        let result;
        result = new UnsubscriptionInstrumentCommandFactory();
        result.commandFactory = commandFactory;
        result.messageExecutor = messageExecutor;
        result.sessionProvider = sessionProvider;
        result.messageFactory = messageFactory;
        result.instrumentsStorage = instrumentsStorage;
        return result;
    }
}
module.exports = UnsubscriptionInstrumentCommandFactory
