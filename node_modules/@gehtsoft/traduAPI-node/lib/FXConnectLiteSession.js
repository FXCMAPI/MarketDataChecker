'use strict';
let LogManager = require('./LogManager.js');
let EventManager = require('./EventManager.js');
let DasFxmsgReader = require('./DasFxmsgReader.js');
let ResilienceBuilder = require('./ResilienceBuilder.js');
let KeepAliveFxmsgReader = require('./KeepAliveFxmsgReader.js');
let KeepAlivePricesFxmsgReader = require('./KeepAlivePricesFxmsgReader.js');
let ConnectionParametersBuilder = require('./ConnectionParametersBuilder.js');
let ConnectionStatusManager = require('./ConnectionStatusManager.js');
let PdasMessageFactory = require('./PdasMessageFactory.js');
let TimeController = require('./TimeController.js');
let RequestNumberGenerator = require('./RequestNumberGenerator.js');
let stdlib = require('@gehtsoft/LuaxStdlib-node').stdlib;
let PdasResponseMessageCommonParser = require('./PdasResponseMessageCommonParser.js');
let PdasMessageFieldFactory = require('./PdasMessageFieldFactory.js');
let TransportMessageType = require('./TransportMessageType.js');
let GetTemporarySessionFxmsgReader = require('./GetTemporarySessionFxmsgReader.js');
let GetAccountsFxmsgReader = require('./GetAccountsFxmsgReader.js');
let SystemPropertiesFxmsgReader = require('./SystemPropertiesFxmsgReader.js');
let GetInstrumentDescriptorsFxmsgReader = require('./GetInstrumentDescriptorsFxmsgReader.js');
let GetInstrumentDescriptorsAndRawOffersFxmsgReader = require('./GetInstrumentDescriptorsAndRawOffersFxmsgReader.js');
let GetTradingSessionFxmsgReader = require('./GetTradingSessionFxmsgReader.js');
let GetTemporaryPriceSessionFxmsgReader = require('./GetTemporaryPriceSessionFxmsgReader.js');
let GetPriceSessionFxmsgReader = require('./GetPriceSessionFxmsgReader.js');
let GetInstrumentsFxmsgReader = require('./GetInstrumentsFxmsgReader.js');
let GetOffersFxmsgReader = require('./GetOffersFxmsgReader.js');
let InstrumentSubscribingFxmsgReader = require('./InstrumentSubscribingFxmsgReader.js');
let GetOpenPositionsFxmsgReader = require('./GetOpenPositionsFxmsgReader.js');
let GetLeverageProfilesFxmsgReader = require('./GetLeverageProfilesFxmsgReader.js');
let GetClosedPositionsFxmsgReader = require('./GetClosedPositionsFxmsgReader.js');
let CreateOrderFxmsgReader = require('./CreateOrderFxmsgReader.js');
let GetRolloverProfilesFxmsgReader = require('./GetRolloverProfilesFxmsgReader.js');
let GetAccountCommissionsFxmsgReader = require('./GetAccountCommissionsFxmsgReader.js');
let GetOrdersFxmsgReader = require('./GetOrdersFxmsgReader.js');
let RemoveOrderFxmsgReader = require('./RemoveOrderFxmsgReader.js');
let ChangeOrderFxmsgReader = require('./ChangeOrderFxmsgReader.js');
let GetSsoTokenFxmsgReader = require('./GetSsoTokenFxmsgReader.js');
let PriceFeedFxmsgReader = require('./PriceFeedFxmsgReader.js');
let HeartbeatFxmsgReader = require('./HeartbeatFxmsgReader.js');
let TradingHeartbeatFxmsgReader = require('./TradingHeartbeatFxmsgReader.js');
let GetPriceHistoryFxmsgReader = require('./GetPriceHistoryFxmsgReader.js');
let MessageRouter = require('./MessageRouter.js');
let PdasMessageExecutor = require('./PdasMessageExecutor.js');
let SessionStorage = require('./SessionStorage.js');
let ControllersBreaker = require('./ControllersBreaker.js');
let TradingSessionProvider = require('./TradingSessionProvider.js');
let DxFeedNamesProvider = require('./DxFeedNamesProvider.js');
let CommissionsProvider = require('./CommissionsProvider.js');
let DXFeedPriceHistoryMediatorFactory = require('./DXFeedPriceHistoryMediatorFactory.js');
let CommandFactory = require('./CommandFactory.js');
let LogoutController = require('./LogoutController.js');
let SsoTokenController = require('./SsoTokenController.js');
let DefaultSsoTokenDecoder = require('./DefaultSsoTokenDecoder.js');
let SystemPropertiesController = require('./SystemPropertiesController.js');
let SystemSettingsProvider = require('./SystemSettingsProvider.js');
let OpenPositionsProvider = require('./OpenPositionsProvider.js');
let AccountCalculator = require('./AccountCalculator.js');
let AccountsManager = require('./AccountsManager.js');
let RawAccountsProvider = require('./RawAccountsProvider.js');
let InstrumentDescriptorsSeparator = require('./InstrumentDescriptorsSeparator.js');
let ManageOffersProvider = require('./ManageOffersProvider.js');
let AccountBaseSymbolsProvider = require('./AccountBaseSymbolsProvider.js');
let InstrumentsManager = require('./InstrumentsManager.js');
let InstrumentsProvider = require('./InstrumentsProvider.js');
let InstrumentsSubscriptionProvider = require('./InstrumentsSubscriptionProvider.js');
let LeverageProfilesManager = require('./LeverageProfilesManager.js');
let LeverageProfilesUpdater = require('./LeverageProfilesUpdater.js');
let CalculationPathCrossSymbolsProvider = require('./CalculationPathCrossSymbolsProvider.js');
let ClientCrossSymbolsProvider = require('./ClientCrossSymbolsProvider.js');
let OffersCalculator = require('./OffersCalculator.js');
let OfferSubscriber = require('./OfferSubscriber.js');
let OffersSnapshotsLoader = require('./OffersSnapshotsLoader.js');
let RawOffersStorage = require('./RawOffersStorage.js');
let OffersManager = require('./OffersManager.js');
let InternalOffersProvider = require('./InternalOffersProvider.js');
let InternalOffersLoader = require('./InternalOffersLoader.js');
let ToAccountCCYConverter = require('./ToAccountCCYConverter.js');
let UnitCostCalculator = require('./UnitCostCalculator.js');
let PipCostProvider = require('./PipCostProvider.js');
let TradingSettingsProvider = require('./TradingSettingsProvider.js');
let OpenPositionMarginCalculator = require('./OpenPositionMarginCalculator.js');
let OrdersProvider = require('./OrdersProvider.js');
let OpenPositionCalculator = require('./OpenPositionCalculator.js');
let OpenPositionsManager = require('./OpenPositionsManager.js');
let OpenPositionsManagerAccountWrapperStorage = require('./OpenPositionsManagerAccountWrapperStorage.js');
let ClosedPositionCalculator = require('./ClosedPositionCalculator.js');
let ClosedPositionsManager = require('./ClosedPositionsManager.js');
let PositionsSummaryManager = require('./PositionsSummaryManager.js');
let PositionsSummaryManagerAccountWrapperStorage = require('./PositionsSummaryManagerAccountWrapperStorage.js');
let PriceHistoryManager = require('./PriceHistoryManager.js');
let OrdersCalculator = require('./OrdersCalculator.js');
let OrdersManager = require('./OrdersManager.js');
let RolloverProfilesStorage = require('./RolloverProfilesStorage.js');
let RolloversCalculator = require('./RolloversCalculator.js');
let RolloverMarkupProvider = require('./RolloverMarkupProvider.js');
let RolloverProfilesManager = require('./RolloverProfilesManager.js');
let RolloverProfilesUpdater = require('./RolloverProfilesUpdater.js');
let AccountCommissionsStorage = require('./AccountCommissionsStorage.js');
let CommissionsCalculator = require('./CommissionsCalculator.js');
let AccountCommissionsManager = require('./AccountCommissionsManager.js');
let AccountCommissionsUpdater = require('./AccountCommissionsUpdater.js');
let MarginProvider = require('./MarginProvider.js');
let DividendsProvider = require('./DividendsProvider.js');
let ClientMessagesManager = require('./ClientMessagesManager.js');
let DependenciesManager = require('./DependenciesManager.js');
let SubscriptionsMdtRecover = require('./SubscriptionsMdtRecover.js');
let HttpPdasCommunicatorFactory = require('./HttpPdasCommunicatorFactory.js');
let DXFeedConnectionFactory = require('./DXFeedConnectionFactory.js');
let CommandEnvironmentBuilder = require('./CommandEnvironmentBuilder.js');
let TemporaryLockedMessageHandler = require('./TemporaryLockedMessageHandler.js');
let LoginError = require('./LoginError.js');
let ConnectionStatus = require('./ConnectionStatus.js');
let exception = require('@gehtsoft/LuaxStdlib-node').exception;
let PdasMessageParser = require('./PdasMessageParser.js');
//@@DocBrief("The class for getting access to the trading system")
class FXConnectLiteSession {
    connectionStatusManager;
    connectionParametersBuilder;
    connectionParameters;
    systemSettingsProvider;
    timeoutScheduler;
    loginCallback;
    communicator;
    loginController;
    rakeOutController;
    pdasMessageFactory;
    pdasMessageParser;
    requestNumberGenerator;
    pdasMessageExecutor;
    messageParser;
    messageRouter;
    aliveController;
    sessionStorage;
    logoutController;
    controllersBreaker;
    systemPropertiesController;
    accountsManager;
    rawAccountsProvider;
    instrumentsManager;
    instrumentsProvider;
    internalOffersProvider;
    internalOffersLoader;
    openPositionsManager;
    closedPositionsManager;
    commandFactory;
    offersManager;
    tradingSessionProvider;
    leverageProfilesManager;
    leverageProfilesUpdater;
    accountCommissionsManager;
    accountCommissionsUpdater;
    marginProvider;
    dividendsProvider;
    positionsSummaryManager;
    openPositionsProvider;
    ordersManager;
    priceHistoryManager;
    rolloverProfilesManager;
    rolloverProfilesUpdater;
    tradingSettingsProvider;
    logger;
    eventLogger;
    openPositionsManagerAccountWrapperStorage;
    positionsSummaryManagerAccountWrapperStorage;
    ssoTokenController;
    clientMessagesManager;
    timeController;
    dxfeedConnectionFactory;
    dxFeedNamesProvider;
    instrumentsSubscriptionProvider;
    commissionsProvider;
    calculationPathCrossSymbolsProvider;
    unitCostCalculator;
    pipCostProvider;
    toAccountCCYConverter;
    dependenciesManager;
    commandEnvironment;
    offersManagerObj;
    rawOffersStorage;
    httpPdasCommunicatorFactory;
    subscriptionsMdtRecover;
    testRequestController;
    constructor() {
        let resilienceBuilder, getInstrumentsFxmsgReader, getOffersFxmsgReader, dasFxmsgReader, systemPropertiesFxmsgReader, keepAliveFxmsgReader, keepAlivePricesFxmsgReader, ex, getAccountsFxmsgReader, getInstrumentDescriptorsFxmsgReader, manageOffersProvider, getSsoTokenFxmsgReader, pdaspdasMessageExecutor, dxfeedPriceHistoryMediatorFactory, accountCalculator, instrumentDescriptorsSeparator, accountBaseSymbolsProvider, instrumentsManagerObj, offersCalculator, offerSubscriber, offersSnapshotsLoader, openPositionCalculator, openPositionMarginCalculator, ordersProvider, closePositionCalculator, ordersCalculator, rolloversCalculator, rolloverProfilesStorage, accountCommissionsStorage, commissionsCalculator;
        this.logger = LogManager.getLogger();
        LogManager.setEventLogger(EventManager.getLogger());
        dasFxmsgReader = new DasFxmsgReader();
        resilienceBuilder = new ResilienceBuilder();
        resilienceBuilder.setAttempts(10);
        resilienceBuilder.setPeriodInMilliseconds(500);
        keepAliveFxmsgReader = new KeepAliveFxmsgReader();
        keepAlivePricesFxmsgReader = new KeepAlivePricesFxmsgReader();
        this.connectionParametersBuilder = new ConnectionParametersBuilder();
        this.connectionParametersBuilder.setLoginTimeoutInSeconds(120);
        this.connectionParametersBuilder.setReconnectionDelayInSeconds(3);
        this.connectionParametersBuilder.setReconnectionsNumber(10);
        this.connectionParametersBuilder.setResilienceBuilder(resilienceBuilder);
        this.connectionParameters = this.connectionParametersBuilder.build();
        this.communicator = null;
        this.loginController = null;
        this.connectionStatusManager = new ConnectionStatusManager();
        this.pdasMessageFactory = new PdasMessageFactory();
        this.timeController = new TimeController();
        this.requestNumberGenerator = new RequestNumberGenerator();
        this.pdasMessageParser = this.getPdasMessageParser();
        try {
            this.pdasMessageParser.setPdasResponseMessageCommonParser(PdasResponseMessageCommonParser.create(new PdasMessageFieldFactory()));
            this.pdasMessageParser.registerReader(TransportMessageType.GetTemporaryTradingSession, new GetTemporarySessionFxmsgReader());
            getAccountsFxmsgReader = new GetAccountsFxmsgReader();
            this.pdasMessageParser.registerReader(TransportMessageType.GetTradingSessionStatus, getAccountsFxmsgReader);
            this.pdasMessageParser.registerReader(TransportMessageType.RakeOut, getAccountsFxmsgReader);
            systemPropertiesFxmsgReader = new SystemPropertiesFxmsgReader();
            this.pdasMessageParser.registerReader(TransportMessageType.GetTradingSessionStatus, systemPropertiesFxmsgReader);
            this.pdasMessageParser.registerReader(TransportMessageType.RakeOut, systemPropertiesFxmsgReader);
            getInstrumentDescriptorsFxmsgReader = new GetInstrumentDescriptorsFxmsgReader();
            this.pdasMessageParser.registerReader(TransportMessageType.GetTradingSessionStatus, getInstrumentDescriptorsFxmsgReader);
            this.pdasMessageParser.registerReader(TransportMessageType.RakeOut, getInstrumentDescriptorsFxmsgReader);
            this.pdasMessageParser.registerReader(TransportMessageType.GetTradingSessionStatus, new GetInstrumentDescriptorsAndRawOffersFxmsgReader());
            this.pdasMessageParser.registerReader(TransportMessageType.GetTradingSessionStatus, new GetTradingSessionFxmsgReader());
            this.pdasMessageParser.registerReader(TransportMessageType.KeepAlive, keepAliveFxmsgReader);
            this.pdasMessageParser.registerReader(TransportMessageType.KeepAlivePrices, keepAlivePricesFxmsgReader);
            this.pdasMessageParser.registerReader(TransportMessageType.RakeOut, dasFxmsgReader);
            this.pdasMessageParser.registerReader(TransportMessageType.RakeOutPrices, dasFxmsgReader);
            this.pdasMessageParser.registerReader(TransportMessageType.GetTemporaryPriceSession, new GetTemporaryPriceSessionFxmsgReader());
            this.pdasMessageParser.registerReader(TransportMessageType.GetPriceSessionStatus, new GetPriceSessionFxmsgReader());
            getInstrumentsFxmsgReader = new GetInstrumentsFxmsgReader();
            this.pdasMessageParser.registerReader(TransportMessageType.GetAllInstruments, getInstrumentsFxmsgReader);
            this.pdasMessageParser.registerReader(TransportMessageType.RakeOut, getInstrumentsFxmsgReader);
            getOffersFxmsgReader = new GetOffersFxmsgReader();
            this.pdasMessageParser.registerReader(TransportMessageType.GetAllOffers, getOffersFxmsgReader);
            this.pdasMessageParser.registerReader(TransportMessageType.RakeOut, getOffersFxmsgReader);
            this.pdasMessageParser.registerReader(TransportMessageType.RakeOut, new InstrumentSubscribingFxmsgReader());
            this.pdasMessageParser.registerReader(TransportMessageType.RakeOut, new GetOpenPositionsFxmsgReader());
            this.pdasMessageParser.registerReader(TransportMessageType.RakeOut, new GetLeverageProfilesFxmsgReader());
            this.pdasMessageParser.registerReader(TransportMessageType.RakeOut, new GetClosedPositionsFxmsgReader());
            this.pdasMessageParser.registerReader(TransportMessageType.RakeOut, new CreateOrderFxmsgReader());
            this.pdasMessageParser.registerReader(TransportMessageType.RakeOut, new GetRolloverProfilesFxmsgReader());
            this.pdasMessageParser.registerReader(TransportMessageType.RakeOut, new GetAccountCommissionsFxmsgReader());
            this.pdasMessageParser.registerReader(TransportMessageType.RakeOut, new GetOrdersFxmsgReader());
            this.pdasMessageParser.registerReader(TransportMessageType.RakeOut, new RemoveOrderFxmsgReader());
            this.pdasMessageParser.registerReader(TransportMessageType.RakeOut, new ChangeOrderFxmsgReader());
            getSsoTokenFxmsgReader = new GetSsoTokenFxmsgReader();
            this.pdasMessageParser.registerReader(TransportMessageType.RakeOut, getSsoTokenFxmsgReader);
            this.pdasMessageParser.registerReader(TransportMessageType.GetSsoToken, getSsoTokenFxmsgReader);
            this.pdasMessageParser.registerReader(TransportMessageType.GetSsoToken, keepAliveFxmsgReader);
            this.pdasMessageParser.registerReader(TransportMessageType.RakeOut, keepAliveFxmsgReader);
            this.pdasMessageParser.registerReader(TransportMessageType.RakeOutPrices, keepAlivePricesFxmsgReader);
            this.pdasMessageParser.registerReader(TransportMessageType.RakeOutPrices, new PriceFeedFxmsgReader());
            this.pdasMessageParser.registerReader(TransportMessageType.RakeOutPrices, new HeartbeatFxmsgReader());
            this.pdasMessageParser.registerReader(TransportMessageType.RakeOut, new TradingHeartbeatFxmsgReader());
            this.pdasMessageParser.registerReader(TransportMessageType.RakeOutPrices, new GetPriceHistoryFxmsgReader());
            this.messageParser = this.pdasMessageParser;
            this.messageRouter = new MessageRouter();
            pdaspdasMessageExecutor = new PdasMessageExecutor();
            pdaspdasMessageExecutor.setMessageParser(this.messageParser);
            pdaspdasMessageExecutor.setMessageRouter(this.messageRouter);
            this.pdasMessageExecutor = pdaspdasMessageExecutor;
            this.sessionStorage = new SessionStorage();
            this.controllersBreaker = new ControllersBreaker();
            this.tradingSessionProvider = TradingSessionProvider.create(this.sessionStorage);
            this.dxFeedNamesProvider = new DxFeedNamesProvider();
            this.commissionsProvider = new CommissionsProvider();
            dxfeedPriceHistoryMediatorFactory = DXFeedPriceHistoryMediatorFactory.create(this.timeController, this.dxFeedNamesProvider);
            this.commandFactory = CommandFactory.create(this.messageRouter, this.requestNumberGenerator, this.connectionParameters, this.sessionStorage, pdaspdasMessageExecutor, this.pdasMessageFactory, this.timeController, dxfeedPriceHistoryMediatorFactory, this.dxFeedNamesProvider);
            this.logoutController = LogoutController.create(this.commandFactory, this.tradingSessionProvider, this.pdasMessageFactory, this.pdasMessageExecutor, this.requestNumberGenerator, this.connectionStatusManager, this.controllersBreaker, this.messageRouter);
            this.ssoTokenController = SsoTokenController.create(this.commandFactory, this.connectionParametersBuilder, this.tradingSessionProvider, this.pdasMessageFactory, this.pdasMessageExecutor, this.messageRouter, this.requestNumberGenerator, new DefaultSsoTokenDecoder());
            this.controllersBreaker.add(this.ssoTokenController);
            this.systemPropertiesController = SystemPropertiesController.create(this.messageRouter, this.ssoTokenController, this.tradingSessionProvider);
            this.systemSettingsProvider = SystemSettingsProvider.create(this.systemPropertiesController);
            this.commandFactory.setSystemSettingsProvider(this.systemSettingsProvider);
            this.openPositionsProvider = new OpenPositionsProvider();
            accountCalculator = AccountCalculator.create(this.openPositionsProvider);
            this.accountsManager = AccountsManager.create(this.messageRouter, accountCalculator, this.systemSettingsProvider);
            this.rawAccountsProvider = RawAccountsProvider.create(this.accountsManager);
            instrumentDescriptorsSeparator = InstrumentDescriptorsSeparator.create(this.sessionStorage);
            manageOffersProvider = new ManageOffersProvider();
            accountBaseSymbolsProvider = AccountBaseSymbolsProvider.create(this.rawAccountsProvider, this.systemSettingsProvider);
            instrumentsManagerObj = InstrumentsManager.create(this.commandFactory, this.messageRouter, this.pdasMessageExecutor, this.sessionStorage, this.pdasMessageFactory, this.requestNumberGenerator, this.connectionStatusManager, instrumentDescriptorsSeparator, this.dxFeedNamesProvider, null, manageOffersProvider, accountBaseSymbolsProvider);
            this.instrumentsManager = instrumentsManagerObj;
            this.instrumentsProvider = InstrumentsProvider.create(instrumentsManagerObj);
            accountBaseSymbolsProvider.setInstrumentsProvider(this.instrumentsProvider);
            this.instrumentsSubscriptionProvider = InstrumentsSubscriptionProvider.create(instrumentsManagerObj);
            this.leverageProfilesManager = LeverageProfilesManager.create(this.accountsManager, this.instrumentsProvider, this.commandFactory, this.messageRouter, this.pdasMessageExecutor, this.tradingSessionProvider, this.pdasMessageFactory, this.requestNumberGenerator);
            this.leverageProfilesUpdater = LeverageProfilesUpdater.create(this.leverageProfilesManager);
            instrumentsManagerObj.setLeverageProfilesUpdater(this.leverageProfilesUpdater);
            this.calculationPathCrossSymbolsProvider = CalculationPathCrossSymbolsProvider.create(this.leverageProfilesManager.getLeverageProfilesProvider(), this.instrumentsProvider, this.rawAccountsProvider);
            instrumentsManagerObj.setClientCrossSymbolsProvider(ClientCrossSymbolsProvider.create(this.instrumentsProvider, this.calculationPathCrossSymbolsProvider, accountBaseSymbolsProvider));
            this.dxFeedNamesProvider.setInstrumentsProvider(this.instrumentsProvider);
            offersCalculator = OffersCalculator.create(this.instrumentsProvider);
            offerSubscriber = OfferSubscriber.create(this.commandFactory, this.instrumentsProvider, this.requestNumberGenerator, this.sessionStorage);
            offersSnapshotsLoader = OffersSnapshotsLoader.create(this.commandFactory, this.instrumentsProvider, this.requestNumberGenerator, this.messageRouter);
            this.rawOffersStorage = new RawOffersStorage();
            this.offersManagerObj = OffersManager.create(this.commandFactory, this.messageRouter, this.pdasMessageExecutor, this.tradingSessionProvider, this.pdasMessageFactory, this.requestNumberGenerator, this.connectionStatusManager, offersCalculator, this.instrumentsProvider, offerSubscriber, instrumentDescriptorsSeparator, offersSnapshotsLoader, this.rawOffersStorage);
            manageOffersProvider.setOffersManager(this.offersManagerObj);
            this.offersManager = this.offersManagerObj;
            this.internalOffersProvider = InternalOffersProvider.create(this.offersManagerObj, offersCalculator);
            this.internalOffersLoader = InternalOffersLoader.create(this.offersManagerObj);
            this.toAccountCCYConverter = ToAccountCCYConverter.create(this.instrumentsProvider, this.internalOffersProvider);
            offersCalculator.setInternalOffersProvider(this.internalOffersProvider);
            this.unitCostCalculator = UnitCostCalculator.create(this.leverageProfilesManager.getLeverageProfilesProvider(), this.instrumentsProvider, this.internalOffersProvider);
            this.pipCostProvider = PipCostProvider.create(this.internalOffersProvider, this.unitCostCalculator);
            this.tradingSettingsProvider = TradingSettingsProvider.create(this.systemSettingsProvider, this.sessionStorage, this.instrumentsProvider, this.pipCostProvider, this.calculationPathCrossSymbolsProvider);
            openPositionMarginCalculator = OpenPositionMarginCalculator.create(this.leverageProfilesManager.getUsedMarginProvider(), this.rawAccountsProvider, this.openPositionsProvider);
            ordersProvider = new OrdersProvider();
            openPositionCalculator = OpenPositionCalculator.create(this.instrumentsProvider, this.internalOffersProvider, openPositionMarginCalculator, ordersProvider, this.commissionsProvider, this.unitCostCalculator, this.rawAccountsProvider);
            this.openPositionsManager = OpenPositionsManager.create(this.commandFactory, this.messageRouter, this.pdasMessageExecutor, this.tradingSessionProvider, this.pdasMessageFactory, this.requestNumberGenerator, this.connectionStatusManager, this.accountsManager, this.leverageProfilesManager, openPositionCalculator, this.instrumentsProvider, this.instrumentsSubscriptionProvider, this.internalOffersLoader, instrumentDescriptorsSeparator);
            this.openPositionsManagerAccountWrapperStorage = OpenPositionsManagerAccountWrapperStorage.create(this.openPositionsManager);
            closePositionCalculator = ClosedPositionCalculator.create(this.instrumentsProvider);
            this.closedPositionsManager = ClosedPositionsManager.create(this.commandFactory, this.messageRouter, this.pdasMessageExecutor, this.tradingSessionProvider, this.pdasMessageFactory, this.requestNumberGenerator, this.connectionStatusManager, closePositionCalculator, this.instrumentsProvider);
            this.openPositionsProvider.setOpenPositionCalculator(openPositionCalculator);
            this.openPositionsProvider.setManager(this.openPositionsManager);
            accountCalculator.setOpenPositionCalculator(openPositionCalculator);
            this.positionsSummaryManager = PositionsSummaryManager.create(this.connectionStatusManager, this.messageRouter, this.instrumentsManager, this.offersManager, this.openPositionsManager, this.openPositionsProvider, this.rawAccountsProvider, this.toAccountCCYConverter, this.systemSettingsProvider);
            this.positionsSummaryManagerAccountWrapperStorage = PositionsSummaryManagerAccountWrapperStorage.create(this.connectionStatusManager, this.messageRouter, this.instrumentsManager, this.offersManager, this.openPositionsManagerAccountWrapperStorage, openPositionCalculator, this.rawAccountsProvider, this.toAccountCCYConverter, this.systemSettingsProvider);
            this.priceHistoryManager = PriceHistoryManager.create(this.commandFactory, this.messageRouter, this.pdasMessageExecutor, this.tradingSessionProvider, this.pdasMessageFactory, this.requestNumberGenerator, this.connectionStatusManager, this.timeController, this.dxFeedNamesProvider, this.sessionStorage);
            this.priceHistoryManager.setInstrumentsProvider(this.instrumentsProvider);
            ordersCalculator = new OrdersCalculator();
            this.ordersManager = OrdersManager.create(this.commandFactory, this.messageRouter, this.pdasMessageExecutor, this.tradingSessionProvider, this.pdasMessageFactory, this.requestNumberGenerator, this.connectionStatusManager, this.openPositionsProvider, this.internalOffersProvider, this.accountsManager, this.instrumentsProvider, ordersCalculator, this.timeController, this.instrumentsSubscriptionProvider, this.internalOffersLoader, instrumentDescriptorsSeparator);
            ordersProvider.setManager(this.ordersManager);
            ordersCalculator.setOrdersProvider(ordersProvider);
            ordersCalculator.setOffersProvider(this.internalOffersProvider);
            ordersCalculator.setInstrumentsProvider(this.instrumentsProvider);
            ordersCalculator.setSystemSettingsProvider(this.systemSettingsProvider);
            rolloverProfilesStorage = new RolloverProfilesStorage();
            rolloversCalculator = RolloversCalculator.create(RolloverMarkupProvider.create(rolloverProfilesStorage, this.systemSettingsProvider), this.systemSettingsProvider, this.toAccountCCYConverter);
            this.rolloverProfilesManager = RolloverProfilesManager.create(rolloversCalculator, rolloverProfilesStorage, this.accountsManager, this.instrumentsProvider, this.commandFactory, this.messageRouter, this.pdasMessageExecutor, this.tradingSessionProvider, this.pdasMessageFactory, this.requestNumberGenerator);
            this.rolloverProfilesUpdater = RolloverProfilesUpdater.create(this.rolloverProfilesManager);
            accountCommissionsStorage = new AccountCommissionsStorage();
            commissionsCalculator = CommissionsCalculator.create(accountCommissionsStorage, this.internalOffersProvider, this.unitCostCalculator, this.instrumentsProvider, this.toAccountCCYConverter, this.systemSettingsProvider);
            this.accountCommissionsManager = AccountCommissionsManager.create(this.accountsManager, this.instrumentsProvider, commissionsCalculator, accountCommissionsStorage, this.commandFactory, this.messageRouter, this.pdasMessageExecutor, this.tradingSessionProvider, this.pdasMessageFactory, this.requestNumberGenerator, this.systemSettingsProvider);
            this.accountCommissionsUpdater = AccountCommissionsUpdater.create(this.accountCommissionsManager);
            this.marginProvider = MarginProvider.create(this.leverageProfilesManager);
            this.dividendsProvider = DividendsProvider.create(this.toAccountCCYConverter);
            this.commissionsProvider.setCommissionsManager(this.accountCommissionsManager);
            this.commissionsProvider.setAccountsProvider(this.rawAccountsProvider);
            this.commissionsProvider.setOffersProvider(this.internalOffersProvider);
            this.clientMessagesManager = ClientMessagesManager.create(this.messageRouter, this.commandFactory);
            this.dependenciesManager = DependenciesManager.create(this.commandFactory, this.messageRouter, this.pdasMessageExecutor, this.sessionStorage, this.pdasMessageFactory, this.requestNumberGenerator, instrumentsManagerObj.getInstrumentDescriptorsStorage(), instrumentsManagerObj.getInstrumentsStorage(), instrumentDescriptorsSeparator, ClientCrossSymbolsProvider.create(this.instrumentsProvider, this.calculationPathCrossSymbolsProvider, accountBaseSymbolsProvider), instrumentsManagerObj.getInstrumentUpdatesStorage(), this.leverageProfilesUpdater, this.accountCommissionsUpdater, this.rolloverProfilesUpdater);
            this.subscriptionsMdtRecover = SubscriptionsMdtRecover.create(this.internalOffersProvider, this.instrumentsProvider, this.messageRouter);
        } catch(exTemp1) {
            ex = stdlib.ensureException(exTemp1);
            this.logger.error("FXConnectLiteSession initialization: " + ex.getMessage());
        }
    }
    getConnectionStatusManager() {
        return this.connectionStatusManager;
    }
    static create(loginControllerFactory, aliveControllerFactory, rakeOutControllerFactory, communicator, socketCommunicatorFactory, testRequestControllerFactory) {
        let fXConnectLiteSession;
        fXConnectLiteSession = new FXConnectLiteSession();
        fXConnectLiteSession.init(loginControllerFactory, aliveControllerFactory, rakeOutControllerFactory, communicator, socketCommunicatorFactory, new HttpPdasCommunicatorFactory(), testRequestControllerFactory);
        return fXConnectLiteSession;
    }
    init(loginControllerFactory, aliveControllerFactory, rakeOutControllerFactory, communicator, socketCommunicatorFactory, httpPdasCommunicatorFactory, testRequestControllerFactory) {
        this.httpPdasCommunicatorFactory = httpPdasCommunicatorFactory;
        this.communicator = communicator;
        this.pdasMessageExecutor.setHttpExecutor(communicator);
        this.pdasMessageExecutor.setHttpPdasExecutorFactory(httpPdasCommunicatorFactory);
        this.commandFactory.setHttpCommunicator(communicator);
        this.dxfeedConnectionFactory = DXFeedConnectionFactory.create(socketCommunicatorFactory);
        this.commandEnvironment = new CommandEnvironmentBuilder();
        this.commandEnvironment.setMessageRouter(this.messageRouter);
        this.commandEnvironment.setMessageExecutor(this.pdasMessageExecutor);
        this.commandEnvironment.setConnectionParameters(this.connectionParameters);
        this.commandEnvironment.setMessageFactory(this.pdasMessageFactory);
        this.commandEnvironment.setRequestNumberGenerator(this.requestNumberGenerator);
        testRequestControllerFactory.setSubscriptionsMdtRecover(this.subscriptionsMdtRecover);
        this.loginController = loginControllerFactory.create(this.commandEnvironment, this.commandFactory, communicator, this.connectionStatusManager, this.sessionStorage, this.ssoTokenController, aliveControllerFactory, rakeOutControllerFactory, this.instrumentsProvider, this.dxfeedConnectionFactory, this.systemSettingsProvider, testRequestControllerFactory);
        this.loginController.setRawOffersStorage(this.rawOffersStorage);
        this.controllersBreaker.add(this.loginController);
        this.aliveController = aliveControllerFactory.create(this.commandFactory, this.connectionParameters, this.tradingSessionProvider, this.pdasMessageFactory, this.pdasMessageExecutor, this.messageRouter, this.connectionStatusManager, this.requestNumberGenerator, 60000, this.controllersBreaker);
        this.controllersBreaker.add(this.aliveController);
        this.testRequestController = testRequestControllerFactory.createTestRequestTrading(this.commandFactory, this.connectionParameters, this.tradingSessionProvider, this.pdasMessageFactory, this.pdasMessageExecutor, this.messageRouter, this.requestNumberGenerator, 20000, null);
        this.controllersBreaker.add(this.testRequestController);
        this.rakeOutController = rakeOutControllerFactory.create(this.commandFactory, this.connectionParameters, this.tradingSessionProvider, this.pdasMessageFactory, this.pdasMessageExecutor, this.messageRouter, this.connectionStatusManager, this.requestNumberGenerator, 300);
        this.controllersBreaker.add(this.rakeOutController);
        this.initLockedMessageHandler();
    }
    initLockedMessageHandler() {
        TemporaryLockedMessageHandler.create(this.messageRouter);
    }
    setFlags(flags) {
        let i;
        if (this.commandEnvironment != null) {
            this.commandEnvironment.setConfigFlags(flags);
        }
        this.offersManagerObj.setConfigFlags(flags);
        this.loginController.setConfigFlags(flags);
        if (flags != null) {
            for (i = 0; i <= flags.length - 1; i += 1) {
                if (flags[i] == "CORS") {
                    this.httpPdasCommunicatorFactory.setIsCors();
                    break;
                }
            }
        }
    }
    setParameters(connectionParameters) {
        this.connectionParametersBuilder.copyFrom(connectionParameters);
        this.connectionParameters = this.connectionParametersBuilder.build();
    }
    setApplicationName(applicationName) {
        this.connectionParametersBuilder.setApplicationName(applicationName);
        this.connectionParameters = this.connectionParametersBuilder.build();
    }
    subscribeConnectionStatusChange(listener) {
        this.connectionStatusManager.subscribeConnectionStatusChange(listener);
    }
    unsubscribeConnectionStatusChange(listener) {
        this.connectionStatusManager.unsubscribeConnectionStatusChange(listener);
    }
    login(user, password, tradingSystemUrl, connection, loginCallback) {
        if (!this.connectionStatusManager.getConnectionStatus().isDisconnected()) {
            this.logger.info("Login operation declined. Current status is not disconnected");
            loginCallback.onLoginError(LoginError.create(LoginError.CODE_INVALID_OPERATION, "Current status is not disconnected"));
            return;
        }
        this.connectionStatusManager.changeConnectionStatus(ConnectionStatus.CONNECTING);
        this.loginController.login(user, password, tradingSystemUrl, connection, loginCallback);
    }
    loginBySsoToken(user, ssoToken, tradingSystemUrl, connection, loginCallback) {
        if (!this.connectionStatusManager.getConnectionStatus().isDisconnected()) {
            this.logger.info("Login operation declined. Current status is not disconnected");
            loginCallback.onLoginError(LoginError.create(LoginError.CODE_INVALID_OPERATION, "Current status is not disconnected"));
            return;
        }
        this.connectionStatusManager.changeConnectionStatus(ConnectionStatus.CONNECTING);
        this.loginController.loginBySsoToken(user, ssoToken, tradingSystemUrl, connection, loginCallback);
    }
    loginByExternalSsoToken(ssoToken, tradingSystemUrl, connection, loginCallback) {
        if (!this.connectionStatusManager.getConnectionStatus().isDisconnected()) {
            this.logger.info("Login operation declined. Current status is not disconnected");
            loginCallback.onLoginError(LoginError.create(LoginError.CODE_INVALID_OPERATION, "Current status is not disconnected"));
            return;
        }
        this.connectionStatusManager.changeConnectionStatus(ConnectionStatus.CONNECTING);
        this.loginController.loginByExternalSsoToken(ssoToken, tradingSystemUrl, connection, loginCallback);
    }
    attach(jwt, tradingSystemUrl, connection) {
        let command;
        if (!this.connectionStatusManager.getConnectionStatus().isDisconnected()) {
            this.logger.info("Attach operation declined. Current status is not disconnected");
            return;
        }
        this.connectionStatusManager.changeConnectionStatus(ConnectionStatus.CONNECTING);
        command = this.commandFactory.createLoginByJWTUsingSSOCommand(this.loginController, this.connectionStatusManager, jwt, tradingSystemUrl, connection);
        command.execute();
    }
    logout() {
        this.logoutController.logout();
    }
    getTradingSettingsProvider() {
        return this.tradingSettingsProvider;
    }
    getSystemSettingsProvider() {
        return this.systemSettingsProvider;
    }
    getConnectionStatus() {
        return this.connectionStatusManager.getConnectionStatus();
    }
    getAccountsManager() {
        return this.accountsManager;
    }
    getOpenPositionsManager() {
        return this.openPositionsManager;
    }
    getClosedPositionsManager() {
        return this.closedPositionsManager;
    }
    getClosedPositionsManagerByAccount(accountInfo) {
        throw exception.create(0, "not implemented yet");
    }
    getPriceHistoryManager() {
        return this.priceHistoryManager;
    }
    getOffersManager() {
        return this.offersManager;
    }
    getInstrumentsManager() {
        return this.instrumentsManager;
    }
    getPositionsSummaryManager() {
        return this.positionsSummaryManager;
    }
    getPositionsSummaryManagerByAccount(accountInfo) {
        return this.positionsSummaryManagerAccountWrapperStorage.get(accountInfo);
    }
    getOrdersManager() {
        return this.ordersManager;
    }
    getOrdersManagerByAccount(accountInfo) {
        throw exception.create(0, "not implemented yet");
    }
    getRolloverProfilesManager() {
        return this.rolloverProfilesManager;
    }
    setLogger(logger) {
        LogManager.setLogger(logger);
    }
    setEventLogger(eventLogger) {
        EventManager.setLogger(eventLogger);
    }
    getAccountCommissionsManager() {
        return this.accountCommissionsManager;
    }
    getMarginProvider() {
        return this.marginProvider;
    }
    getDividendsProvider() {
        return this.dividendsProvider;
    }
    getLeverageProfilesManager() {
        return this.leverageProfilesManager;
    }
    getOpenPositionsManagerByAccount(accountInfo) {
        return this.openPositionsManagerAccountWrapperStorage.get(accountInfo);
    }
    getClientMessagesManager() {
        return this.clientMessagesManager;
    }
    getPdasMessageParser() {
        return new PdasMessageParser();
    }
    getMdtConnectionManager() {
        return this.sessionStorage.getMdtConnectionManager();
    }
    getDependenciesManager() {
        return this.dependenciesManager;
    }
}
module.exports = FXConnectLiteSession
