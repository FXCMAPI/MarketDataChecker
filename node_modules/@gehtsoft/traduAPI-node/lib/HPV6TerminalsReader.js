'use strict';
let HPV6UrlsReader = require('./HPV6UrlsReader.js');
let csvParser = require('@gehtsoft/LuaxStdlib-node').csvParser;
let TerminalType = require('./TerminalType.js');
let TerminalStatus = require('./TerminalStatus.js');
class HPV6TerminalsReader {
    urlsReader;
    streamParser;
    constructor() {
        this.urlsReader = new HPV6UrlsReader();
        this.streamParser = new csvParser();
        this.streamParser.valueSeparator = ",";
    }
    createTerminal(node, terminalFactory, terminalUrlFactory) {
        let attr, type, name, id, subId, status, inactiveText, urls, streams;
        type = "";
        name = "";
        subId = "";
        id = "";
        status = "";
        inactiveText = "";
        streams = new Array(0);
        attr = node.getAttributeByName("type");
        if (attr != null) {
            type = attr.getValue();
            if (type == "trading") {
                type = TerminalType.TRADING;
            } else if (type == "price") {
                type = TerminalType.PRICE;
            } else if (type == "chart") {
                type = TerminalType.CHART;
            } else if (type == "global") {
                type = TerminalType.GLOBAL;
            }
        }
        attr = node.getAttributeByName("name");
        if (attr != null) {
            name = attr.getValue();
        }
        attr = node.getAttributeByName("subid");
        if (attr != null) {
            subId = attr.getValue();
        }
        attr = node.getAttributeByName("id");
        if (attr != null) {
            id = attr.getValue();
        }
        attr = node.getAttributeByName("stream");
        if (attr != null) {
            streams = this.streamParser.splitLine(attr.getValue());
        }
        attr = node.getAttributeByName("status");
        if (attr != null) {
            status = attr.getValue();
            if (status == "active") {
                status = TerminalStatus.ACTIVE;
            }
            else {
                status = TerminalStatus.INACTIVE;
            }
        }
        attr = node.getAttributeByName("inactive_text");
        if (attr != null) {
            inactiveText = attr.getValue();
        }
        urls = this.urlsReader.getUrls(node, terminalUrlFactory);
        return terminalFactory.createTerminalWithStreams(type, name, status, inactiveText, urls, streams, subId, id);
    }
}
module.exports = HPV6TerminalsReader
