'use strict';
let string_map = require('@gehtsoft/LuaxStdlib-node').string_map;
let variantCast = require('@gehtsoft/LuaxStdlib-node').variantCast;
let stdlib = require('@gehtsoft/LuaxStdlib-node').stdlib;
let exception = require('@gehtsoft/LuaxStdlib-node').exception;
let FXConnectLiteErrorCodes = require('./FXConnectLiteErrorCodes.js');
//@@DocInclude
//@@DocBrief("The class provides access to instrument information")
class Instrument {
    static get TYPE_FOREX() { return 1; }
    static get TYPE_INDICES() { return 2; }
    static get TYPE_COMMODITY() { return 3; }
    static get TYPE_TREASURY() { return 4; }
    static get TYPE_BULLION() { return 5; }
    static get TYPE_SHARES() { return 6; }
    static get TYPE_FXINDEX() { return 7; }
    static get TYPE_CFD_SHARES() { return 8; }
    static get TYPE_CRYPTOCURRENCY() { return 9; }
    offerId;
    symbol;
    contractCurrency;
    digits;
    pointSize;
    instrumentType;
    tradingStatus;
    contractMultiplier;
    sellInterest;
    buyInterest;
    subscriptionStatus;
    hasDividendBuyField;
    dividendBuy;
    hasDividendSellField;
    dividendSell;
    baseUnitSize;
    minQuantity;
    maxQuantity;
    sortOrder;
    priceStreamId;
    conditionDistStop;
    conditionDistLimit;
    conditionDistEntryStop;
    conditionDistEntryLimit;
    askAdjustment;
    bidAdjustment;
    fractionalPipSize;
    isFractionalPipSizeSet;
    mmr;
    mmrByCyrrency;
    constructor() {
        this.dividendSell = 0.0;
        this.hasDividendSellField = false;
        this.dividendBuy = 0.0;
        this.hasDividendBuyField = false;
        this.offerId = null;
        this.symbol = null;
        this.contractCurrency = null;
        this.digits = 0;
        this.pointSize = 0.0;
        this.instrumentType = 0;
        this.tradingStatus = null;
        this.contractMultiplier = 0.0;
        this.buyInterest = 0.0;
        this.sellInterest = 0.0;
        this.subscriptionStatus = null;
        this.baseUnitSize = 0;
        this.minQuantity = 0;
        this.maxQuantity = 0;
        this.sortOrder = 0;
        this.priceStreamId = "";
        this.conditionDistStop = 0.0;
        this.conditionDistLimit = 0.0;
        this.conditionDistEntryStop = 0.0;
        this.conditionDistEntryLimit = 0.0;
        this.askAdjustment = 0.0;
        this.bidAdjustment = 0.0;
        this.fractionalPipSize = 0.0;
        this.isFractionalPipSizeSet = false;
        this.mmrByCyrrency = new string_map();
    }
    getOfferId() {
        return this.offerId;
    }
    getSymbol() {
        return this.symbol;
    }
    getContractCurrency() {
        return this.contractCurrency;
    }
    getDigits() {
        return this.digits;
    }
    getPointSize() {
        return this.pointSize;
    }
    getInstrumentType() {
        return this.instrumentType;
    }
    getTradingStatus() {
        return this.tradingStatus;
    }
    getContractMultiplier() {
        return this.contractMultiplier;
    }
    getSellInterest() {
        return this.sellInterest;
    }
    getBuyInterest() {
        return this.buyInterest;
    }
    getSubscriptionStatus() {
        return this.subscriptionStatus;
    }
    hasDividendBuy() {
        return this.hasDividendBuyField;
    }
    getDividendBuy() {
        return this.dividendBuy;
    }
    hasDividendSell() {
        return this.hasDividendSellField;
    }
    getDividendSell() {
        return this.dividendSell;
    }
    getBaseUnitSize() {
        return this.baseUnitSize;
    }
    getMinQuantity() {
        return this.minQuantity;
    }
    getMaxQuantity() {
        return this.maxQuantity;
    }
    getSortOrder() {
        return this.sortOrder;
    }
    getPriceStreamId() {
        return this.priceStreamId;
    }
    getConditionDistStop() {
        return this.conditionDistStop;
    }
    getConditionDistLimit() {
        return this.conditionDistLimit;
    }
    getConditionDistEntryStop() {
        return this.conditionDistEntryStop;
    }
    getConditionDistEntryLimit() {
        return this.conditionDistEntryLimit;
    }
    getAskAdjustment() {
        return this.askAdjustment;
    }
    getBidAdjustment() {
        return this.bidAdjustment;
    }
    getFractionalPipSize() {
        if (!this.isFractionalPipSizeSet && this.pointSize > 0) {
            this.fractionalPipSize = (this.digits - variantCast.fromReal(stdlib.abs(stdlib.log10(this.pointSize)) + 0.5).asInt());
            this.isFractionalPipSizeSet = true;
        }
        return this.fractionalPipSize;
    }
    getMMR() {
        return this.mmr;
    }
    getMMRByCurrency(currency) {
        if (currency == null || stdlib.len(currency) == 0) {
            throw exception.create(FXConnectLiteErrorCodes.CODE_REQUIRED_PARAMETER_NOT_SET, "currency is not set");
        }
        if (this.mmrByCyrrency.contains(currency)) {
            return this.mmrByCyrrency.get(currency).get();
        }
        throw exception.create(FXConnectLiteErrorCodes.CODE_DATA_NOT_EXIST, "mmr for currency '" + currency + "' not present");
    }
}
module.exports = Instrument
