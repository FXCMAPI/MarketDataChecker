'use strict';
let PriceHistoryResponseBuilder = require('./PriceHistoryResponseBuilder.js');
let stdlib = require('@gehtsoft/LuaxStdlib-node').stdlib;
let PriceHistoryItemBuilder = require('./PriceHistoryItemBuilder.js');
class PriceHistoryResultCompiler {
    compileResult(messages, bidAdjustment, askAdjustment, suppressTime) {
        let prices, price, builder, i, index, priceCount, lastBarDateTime, message, jdn, dt, hour, phBuilder;
        builder = new PriceHistoryResponseBuilder();
        priceCount = 0;
        if (messages.length() > 0) {
            message = messages.get(0);
            builder.setInstrument(message.getSymbol());
            builder.setTimeframe(message.getTimeframe());
        }
        for (index = messages.length() - 1; index >= 0; index += -1) {
            message = messages.get(index);
            prices = message.getPrices();
            for (i = 0; i <= prices.length - 1; i += 1) {
                price = prices[i];
                if (suppressTime) {
                    dt = stdlib.toutc(price.getDate());
                    hour = stdlib.hour(dt);
                    dt = stdlib.mkdatetime(stdlib.year(dt), stdlib.month(dt), stdlib.day(dt), 0, 0, 0, 0);
                    jdn = stdlib.toJdn(dt);
                    if (hour > 12) {
                        jdn = jdn + 1;
                    }
                    dt = stdlib.fromJdn(jdn);
                    phBuilder = new PriceHistoryItemBuilder();
                    phBuilder.setDate(dt);
                    phBuilder.setBidOpen(price.getBidOpen());
                    phBuilder.setBidClose(price.getBidClose());
                    phBuilder.setBidHigh(price.getBidHigh());
                    phBuilder.setBidLow(price.getBidLow());
                    phBuilder.setAskOpen(price.getAskOpen());
                    phBuilder.setAskClose(price.getAskClose());
                    phBuilder.setAskHigh(price.getAskHigh());
                    phBuilder.setAskLow(price.getAskLow());
                    phBuilder.setVolume(price.getVolume());
                    price = phBuilder.build();
                }
                this.addAdjustments(price, bidAdjustment, askAdjustment);
                builder.addPriceHistory(price);
                lastBarDateTime = price.getDate();
                priceCount = priceCount + 1;
            }
            builder.setLastBarTime(lastBarDateTime);
            builder.setCount(priceCount);
        }
        return builder.build();
    }
    addAdjustments(price, bidAdjustment, askAdjustment) {
        let builder;
        builder = price;
        builder.setBidOpen(price.getBidOpen() + bidAdjustment);
        builder.setBidClose(price.getBidClose() + bidAdjustment);
        builder.setBidHigh(price.getBidHigh() + bidAdjustment);
        builder.setBidLow(price.getBidLow() + bidAdjustment);
        builder.setAskOpen(price.getAskOpen() + askAdjustment);
        builder.setAskClose(price.getAskClose() + askAdjustment);
        builder.setAskHigh(price.getAskHigh() + askAdjustment);
        builder.setAskLow(price.getAskLow() + askAdjustment);
    }
}
module.exports = PriceHistoryResultCompiler
