'use strict';
let string_map = require('@gehtsoft/LuaxStdlib-node').string_map;
class OrdersManagerEvents {
    eventsByOrderId;
    eventsByOfferAndCustomId;
    eventsByTradeId;
    constructor() {
        this.eventsByOrderId = new string_map();
        this.eventsByOfferAndCustomId = new string_map();
        this.eventsByTradeId = new string_map();
    }
    addByOrderId(orderId, event) {
        this.eventsByOrderId.set(orderId, event);
    }
    containsOrderId(orderId) {
        return this.eventsByOrderId.contains(orderId);
    }
    getByOrderId(orderId) {
        return this.eventsByOrderId.get(orderId);
    }
    removeByOrderId(orderId) {
        this.eventsByOrderId.remove(orderId);
    }
    addByOfferAndCustomId(offerId, customId, event) {
        this.eventsByOfferAndCustomId.set(OrdersManagerEvents.createKeyForOfferAndCustom(offerId, customId), event);
    }
    containsOfferAndCustomId(offerId, customId) {
        return this.eventsByOfferAndCustomId.contains(OrdersManagerEvents.createKeyForOfferAndCustom(offerId, customId));
    }
    getByOfferAndCustomId(offerId, customId) {
        return this.eventsByOfferAndCustomId.get(OrdersManagerEvents.createKeyForOfferAndCustom(offerId, customId));
    }
    removeByOfferAndCustomId(offerId, customId) {
        this.eventsByOfferAndCustomId.remove(OrdersManagerEvents.createKeyForOfferAndCustom(offerId, customId));
    }
    addByTradeId(tradeId, event) {
        this.eventsByTradeId.set(tradeId, event);
    }
    containsTradeId(tradeId) {
        return this.eventsByTradeId.contains(tradeId);
    }
    getByTradeId(tradeId) {
        return this.eventsByTradeId.get(tradeId);
    }
    removeByTradeId(tradeId) {
        this.eventsByTradeId.remove(tradeId);
    }
    static createKeyForOfferAndCustom(offerId, customId) {
        let key;
        key = offerId + "--";
        if (customId != null) {
            key = key + customId;
        }
        return key;
    }
}
module.exports = OrdersManagerEvents
