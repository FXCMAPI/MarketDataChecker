'use strict';
let string_map = require('@gehtsoft/LuaxStdlib-node').string_map;
//@@DocBrief("class provides access to a collection of instrument information")
class InstrumentsStorage {
    storage;
    filterByName;
    constructor() {
        this.storage = new string_map();
        this.filterByName = new string_map();
    }
    getAllInstruments() {
        let length, i, keys, instrument, instruments;
        keys = this.storage.keys();
        length = keys.length;
        instruments = new Array(length);
        for (i = 0; i <= length - 1; i += 1) {
            instrument = this.storage.get(keys[i]);
            instruments[i] = instrument;
        }
        return instruments;
    }
    addInstrument(instrument) {
        this.storage.set(instrument.getOfferId(), instrument);
        this.filterByName.set(instrument.getSymbol(), instrument);
    }
    removeInstrument(instrumentDescriptor) {
        if (this.storage.contains(instrumentDescriptor.getOfferId())) {
            this.storage.remove(instrumentDescriptor.getOfferId());
        }
        if (this.filterByName.contains(instrumentDescriptor.getSymbol())) {
            this.filterByName.remove(instrumentDescriptor.getSymbol());
        }
    }
    getInstrumentBySymbol(instrumentName) {
        if (!this.filterByName.contains(instrumentName)) {
            return null;
        }
        return this.filterByName.get(instrumentName);
    }
    getInstrumentByOfferId(offerId) {
        if (!this.storage.contains(offerId)) {
            return null;
        }
        return this.storage.get(offerId);
    }
    getInstrumentsByOfferIds(offerIds) {
        let result, i;
        result = new Array(offerIds.length);
        for (i = 0; i <= offerIds.length - 1; i += 1) {
            result[i] = this.getInstrumentByOfferId(offerIds[i]);
        }
        return result;
    }
    getSubscribedInstruments() {
        let length, i, keys, instrument, tempInstruments, subscribedInstruments, subscribedInstrumentsCount;
        subscribedInstrumentsCount = 0;
        keys = this.storage.keys();
        length = keys.length;
        tempInstruments = new Array(length);
        for (i = 0; i <= length - 1; i += 1) {
            instrument = this.storage.get(keys[i]);
            if (instrument.getSubscriptionStatus() == "T") {
                tempInstruments[subscribedInstrumentsCount] = instrument;
                subscribedInstrumentsCount = subscribedInstrumentsCount + 1;
            }
        }
        subscribedInstruments = new Array(subscribedInstrumentsCount);
        for (i = 0; i <= subscribedInstrumentsCount - 1; i += 1) {
            subscribedInstruments[i] = tempInstruments[i];
        }
        return subscribedInstruments;
    }
    clear() {
        this.storage.clear();
        this.filterByName.clear();
    }
}
module.exports = InstrumentsStorage
