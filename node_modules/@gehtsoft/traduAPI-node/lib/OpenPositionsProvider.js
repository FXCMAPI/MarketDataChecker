'use strict';
//@@DocBrief("The interface for getting access to open positions")
class OpenPositionsProvider {
    openPositionsManager;
    openPositionCalculator;
    getInternalOpenPositionsSnapshot() {
        return this.openPositionsManager.getInternalOpenPositionsSnapshot();
    }
    getInternalOpenPosition(id) {
        return this.openPositionsManager.getInternalOpenPosition(id);
    }
    getInternalOpenPositionByAccount(accountId) {
        return this.openPositionsManager.getInternalOpenPositionByAccountId(accountId);
    }
    getInternalOpenPositionByAccountAndOffer(accountId, offerId) {
        return this.openPositionsManager.getInternalOpenPositionByAccountIdAndOffer(accountId, offerId);
    }
    getCalculatedFields(openPosition) {
        return this.openPositionCalculator.calculatePublicFields(openPosition);
    }
    getManagerState() {
        return this.openPositionsManager.getState();
    }
    static create(openPositionsManager, openPositionCalculator) {
        let result;
        result = new OpenPositionsProvider();
        result.openPositionsManager = openPositionsManager;
        result.openPositionCalculator = openPositionCalculator;
        return result;
    }
    setOpenPositionCalculator(openPositionCalculator) {
        this.openPositionCalculator = openPositionCalculator;
    }
    setManager(openPositionsManager) {
        this.openPositionsManager = openPositionsManager;
    }
}
module.exports = OpenPositionsProvider
