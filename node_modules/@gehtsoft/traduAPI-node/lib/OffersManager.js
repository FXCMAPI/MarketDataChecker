'use strict';
let DataManagerState = require('./DataManagerState.js');
let OffersStorage = require('./OffersStorage.js');
let CommonPublisher = require('./CommonPublisher.js');
let DataManagerStatePublisher = require('./DataManagerStatePublisher.js');
let LogManager = require('./LogManager.js');
let OffersRefreshController = require('./OffersRefreshController.js');
let GetAllOffersProcessor = require('./GetAllOffersProcessor.js');
let exception = require('@gehtsoft/LuaxStdlib-node').exception;
let FXConnectLiteErrorCodes = require('./FXConnectLiteErrorCodes.js');
let stdlib = require('@gehtsoft/LuaxStdlib-node').stdlib;
let ExecutionTimeEvenUtil = require('./ExecutionTimeEvenUtil.js');
let ExecutionTimeEventName = require('./ExecutionTimeEventName.js');
let list = require('@gehtsoft/LuaxStdlib-node').list;
let StringValueObject = require('./StringValueObject.js');
let CollectionUtils = require('./CollectionUtils.js');
let MessageType = require('./MessageType.js');
let OfferInfoBuilder = require('./OfferInfoBuilder.js');
let StringUtil = require('./StringUtil.js');
let UpdateCommandType = require('./UpdateCommandType.js');
let OfferBuilder = require('./OfferBuilder.js');
let RawOfferBuilder = require('./RawOfferBuilder.js');
let FXConnectLiteErrorBuilder = require('./FXConnectLiteErrorBuilder.js');
//@@DocBrief("The class for getting access to offers data")
class OffersManager {
    state;
    storage;
    rawOffersStorage;
    offersChangePublisher;
    stateChangePublisher;
    messageRouter;
    commandFactory;
    sessionProvider;
    messageFactory;
    requestNumberGenerator;
    messageExecutor;
    receiveNewMessageListener;
    offerSubscriberCallback;
    connectionStatusManager;
    offersCalculator;
    logger;
    instrumentsProvider;
    offerSubscriber;
    offersRefreshController;
    offersRefreshControllerCallback;
    instrumentDescriptorsSeparator;
    getAllOffersProcessor;
    eventRefresh;
    eventSnapshot;
    configFlags;
    offersSnapshotsLoader;
    constructor() {
        this.state = new DataManagerState();
        this.storage = new OffersStorage();
        this.offersChangePublisher = new CommonPublisher();
        this.stateChangePublisher = new DataManagerStatePublisher();
        this.setReceiveNewMessageListener();
        this.logger = LogManager.getLogger();
        this.offersRefreshControllerCallback = OffersManager.OffersRefreshControllerCallback.create(this.state, this.stateChangePublisher, this.logger, this);
        this.offersRefreshController = OffersRefreshController.create(this.offersRefreshControllerCallback);
        this.offerSubscriberCallback = OffersManager.OfferSubscriberCallback.create(this.offersRefreshController);
        this.offerSubscriber = null;
        this.configFlags = [];
    }
    static create(commandFactory, messageRouter, messageExecutor, sessionProvider, messageFactory, requestNumberGenerator, connectionStatusManager, offersCalculator, instrumentsProvider, offerSubscriber, instrumentDescriptorsSeparator, offersSnapshotsLoader, rawOffersStorage) {
        let result;
        result = new OffersManager();
        result.commandFactory = commandFactory;
        result.messageRouter = messageRouter;
        result.messageExecutor = messageExecutor;
        result.sessionProvider = sessionProvider;
        result.messageFactory = messageFactory;
        result.connectionStatusManager = connectionStatusManager;
        result.requestNumberGenerator = requestNumberGenerator;
        result.offersCalculator = offersCalculator;
        result.subscribeOnRequiredMessages();
        result.instrumentsProvider = instrumentsProvider;
        result.offerSubscriber = offerSubscriber;
        result.instrumentDescriptorsSeparator = instrumentDescriptorsSeparator;
        result.getAllOffersProcessor = GetAllOffersProcessor.create(commandFactory, messageExecutor, sessionProvider, messageFactory, requestNumberGenerator);
        result.offersSnapshotsLoader = offersSnapshotsLoader;
        result.rawOffersStorage = rawOffersStorage;
        return result;
    }
    setConfigFlags(configFlags) {
        this.configFlags = configFlags;
    }
    subscribeOfferChange(listener) {
        if (listener == null) {
            this.logger.error("OffersManager.subscribeOfferChange(): listener is not set");
            throw exception.create(FXConnectLiteErrorCodes.CODE_REQUIRED_PARAMETER_NOT_SET, "listener is not set");
        }
        this.offersChangePublisher.subscribe(listener);
    }
    unsubscribeOfferChange(listener) {
        if (listener == null) {
            this.logger.error("OffersManager.unsubscribeOfferChange(): listener is not set");
            throw exception.create(FXConnectLiteErrorCodes.CODE_REQUIRED_PARAMETER_NOT_SET, "listener is not set");
        }
        this.offersChangePublisher.unsubscribe(listener);
    }
    getAllOffers() {
        let offers, result, i;
        this.logger.info("OffersManager. Get all offers");
        offers = this.storage.getAllOffers();
        result = new Array(offers.length);
        for (i = 0; i <= offers.length - 1; i += 1) {
            result[i] = this.getPublicOfferWithCalculatedFields(offers[i]);
        }
        return result;
    }
    getOfferById(offerId) {
        let offer;
        if (offerId == null || stdlib.len(offerId) == 0) {
            this.logger.error("OffersManager.getOfferById(): offerId is not set");
            throw exception.create(FXConnectLiteErrorCodes.CODE_REQUIRED_PARAMETER_NOT_SET, "offerId is not set");
        }
        this.logger.debug("OffersManager. Get offer by id: " + offerId);
        offer = this.storage.getOfferById(offerId);
        if (offer != null) {
            return this.getPublicOfferWithCalculatedFields(offer);
        }
        return null;
    }
    getInternalOfferById(offerId) {
        if (offerId == null || stdlib.len(offerId) == 0) {
            this.logger.error("OffersManager.getInternalOfferById(): offerId is not set");
            throw exception.create(FXConnectLiteErrorCodes.CODE_REQUIRED_PARAMETER_NOT_SET, "offerId is not set");
        }
        return this.storage.getOfferById(offerId);
    }
    getRawOffersSnapshot(offerIds, callback) {
        let snapshotCallback;
        if (offerIds == null || offerIds.length == 0) {
            this.logger.error("OffersManager.getRawOffersSnapshot(): offerIds is not set");
            throw exception.create(FXConnectLiteErrorCodes.CODE_REQUIRED_PARAMETER_NOT_SET, "offerIds is not set");
        }
        if (callback == null) {
            this.logger.error("OffersManager.getRawOffersSnapshot(): callback is not set");
            throw exception.create(FXConnectLiteErrorCodes.CODE_REQUIRED_PARAMETER_NOT_SET, "callback is not set");
        }
        if (this.checkRid99()) {
            this.getRawOffersForRid99(offerIds, callback);
        }
        else {
            this.eventSnapshot = ExecutionTimeEvenUtil.eventStart(ExecutionTimeEventName.RawOffersSnapshot);
            snapshotCallback = new OffersManager.SnapshotGetAllOffersCallback(this);
            snapshotCallback.setCallback(callback);
            this.getAllOffersProcessor.execute(offerIds, snapshotCallback, false);
        }
    }
    getRawOffersForRid99(offerIds, callback) {
        let i, offers, offer, result;
        offers = new list();
        for (i = 0; i <= offerIds.length - 1; i += 1) {
            offer = this.rawOffersStorage.getOfferById(offerIds[i]);
            if (offer != null) {
                offers.add(offer);
            }
        }
        result = new Array(offers.length());
        for (i = 0; i <= offers.length() - 1; i += 1) {
            result[i] = offers.get(i);
        }
        callback.onSuccess(result);
    }
    checkRid99() {
        let i;
        for (i = 0; i <= this.configFlags.length - 1; i += 1) {
            if (this.configFlags[i] == "RID99") {
                return true;
            }
        }
        return false;
    }
    getLatestOffersSnapshot(offerIds, callback) {
        this.offersSnapshotsLoader.loadOffersSnapshot(offerIds, callback);
    }
    getCount() {
        return this.storage.getCount();
    }
    getOfferIds() {
        return this.storage.getOfferIds();
    }
    subscribeStateChange(listener) {
        if (listener == null) {
            this.logger.error("OffersManager.subscribeStateChange(): listener is not set");
            throw exception.create(FXConnectLiteErrorCodes.CODE_REQUIRED_PARAMETER_NOT_SET, "listener is not set");
        }
        this.stateChangePublisher.subscribe(listener);
    }
    unsubscribeStateChange(listener) {
        if (listener == null) {
            this.logger.error("OffersManager.unsubscribeStateChange(): listener is not set");
            throw exception.create(FXConnectLiteErrorCodes.CODE_REQUIRED_PARAMETER_NOT_SET, "listener is not set");
        }
        this.stateChangePublisher.unsubscribe(listener);
    }
    getState() {
        return this.state;
    }
    refresh() {
        let instrumentDescriptors, instrumentDescriptor, offerIds, offerIdsList, i;
        this.logger.info("OffersManager. Load all offers from server");
        if (this.getState().isLoading()) {
            this.logger.warning("OffersManager. Manager not loaded yet");
            return;
        }
        if (!this.connectionStatusManager.getConnectionStatus().isConnected()) {
            this.logger.warning("OffersManager. Session not connected");
            return;
        }
        offerIdsList = new list();
        instrumentDescriptors = this.instrumentsProvider.getAllInstrumentDescriptors();
        instrumentDescriptors = this.instrumentDescriptorsSeparator.getPdasDescriptors(instrumentDescriptors);
        for (i = 0; i <= instrumentDescriptors.length - 1; i += 1) {
            instrumentDescriptor = instrumentDescriptors[i];
            if (instrumentDescriptor.getSubscriptionStatus() == "T" || instrumentDescriptor.getSubscriptionStatus() == "V") {
                offerIdsList.add(StringValueObject.create(instrumentDescriptor.getOfferId()));
            }
        }
        offerIds = new Array(offerIdsList.length());
        for (i = 0; i <= offerIdsList.length() - 1; i += 1) {
            offerIds[i] = offerIdsList.get(i).get();
        }
        this.eventRefresh = ExecutionTimeEvenUtil.eventStart(ExecutionTimeEventName.OffersManagerRefreshTime);
        this.notifyStateChange(DataManagerState.LOADING);
        if (offerIds.length > 0) {
            this.offersRefreshController.reset();
            this.getAllOffersProcessor.execute(offerIds, new OffersManager.GetAllOffersCallback(this), true);
            this.offerSubscriber.subscribe(this.instrumentsProvider.getAllInstrumentDescriptors(), this.offerSubscriberCallback, false);
        }
        else {
            ExecutionTimeEvenUtil.eventStop(this.eventRefresh);
            this.notifyStateChange(DataManagerState.LOADED);
        }
    }
    getEventRefresh() {
        return this.eventRefresh;
    }
    ensureOffersLoaded(offerIds, callback) {
        let forLoad, forLoadIds, i, partialCallback;
        if (offerIds == null) {
            this.logger.error("OffersManager.ensureOffersLoaded(): offerIds is not set");
            throw exception.create(FXConnectLiteErrorCodes.CODE_REQUIRED_PARAMETER_NOT_SET, "offerIds is not set");
        }
        if (callback == null) {
            this.logger.error("OffersManager.ensureOffersLoaded(): callback is not set");
            throw exception.create(FXConnectLiteErrorCodes.CODE_REQUIRED_PARAMETER_NOT_SET, "callback is not set");
        }
        forLoad = new list();
        for (i = 0; i <= offerIds.length - 1; i += 1) {
            if (this.storage.getOfferById(offerIds[i]) == null) {
                forLoad.add(StringValueObject.create(offerIds[i]));
            }
        }
        if (forLoad.length() > 0) {
            forLoadIds = CollectionUtils.stringListToArray(forLoad);
            partialCallback = new OffersManager.PartialGetAllOffersCallback(this);
            partialCallback.setCallback(callback);
            this.getAllOffersProcessor.execute(forLoadIds, partialCallback, true);
        }
        else {
            callback.invoke();
        }
    }
    removeOfferById(offerId) {
        if (offerId == null || stdlib.len(offerId) == 0) {
            this.logger.error("OffersManager.removeOfferById(): offerId is not set");
            throw exception.create(FXConnectLiteErrorCodes.CODE_REQUIRED_PARAMETER_NOT_SET, "offerId is not set");
        }
        this.storage.removeOfferById(offerId);
    }
    subscribeOnRequiredMessages() {
        this.messageRouter.subscribeNewMessageReceive(MessageType.GetOffers, this.receiveNewMessageListener);
        this.messageRouter.subscribeNewMessageReceive(MessageType.GetRawOffers, this.receiveNewMessageListener);
        this.messageRouter.subscribeNewMessageReceive(MessageType.OfferUpdateMessage, this.receiveNewMessageListener);
        this.messageRouter.subscribeNewMessageReceive(MessageType.Disconnected, this.receiveNewMessageListener);
        this.messageRouter.subscribeNewMessageReceive(MessageType.MdtConnected, this.receiveNewMessageListener);
    }
    setReceiveNewMessageListener() {
        this.receiveNewMessageListener = OffersManager.ReceiveNewMessageListener.create(this);
    }
    notifyStateChange(stateStatus) {
        this.logger.debug("OffersManager. State status changed: " + (stateStatus).toString());
        this.state.setState(stateStatus);
        this.stateChangePublisher.notifyStateChange(this.state);
    }
    notifyOfferChanged(offerId) {
        let builder;
        builder = new OfferInfoBuilder();
        builder.setOfferId(offerId);
        this.offersChangePublisher.notifyAction(OffersManager.OfferChangedAction.create(builder.build()));
    }
    notifyOfferAdded(offerId) {
        let builder;
        builder = new OfferInfoBuilder();
        builder.setOfferId(offerId);
        this.offersChangePublisher.notifyAction(OffersManager.OfferAddedAction.create(builder.build()));
    }
    processMessage(message) {
        let getOffersMessage, getRawOffersMessage, updateOffersMessage, mdtConnectedMessage;
        this.logger.debug("OffersManager. Receive message: " + message.getType());
        if (message.getType() == MessageType.OfferUpdateMessage) {
            updateOffersMessage = message;
            this.updateOffer(updateOffersMessage.getUpdateCommand(), updateOffersMessage.getOffer());
        } else if (message.getType() == MessageType.GetOffers) {
            getOffersMessage = message;
            this.processGetOffers(getOffersMessage);
        } else if (message.getType() == MessageType.GetRawOffers) {
            getRawOffersMessage = message;
            this.processGetRawOffers(getRawOffersMessage);
        } else if (message.getType() == MessageType.MdtConnected) {
            mdtConnectedMessage = message;
            this.processMdtConnected(mdtConnectedMessage.getStreamIds(), mdtConnectedMessage.getForceReset());
        } else if (message.getType() == MessageType.Disconnected) {
            this.storage.clear();
            this.rawOffersStorage.clear();
            this.notifyStateChange(DataManagerState.NOT_LOADED);
        }
    }
    processMdtConnected(streamIds, forceReset) {
        if (streamIds == null) {
            this.logger.error("OffersManager. Received message about MDT connected without price stream ids");
        } else if (this.getState().isLoaded()) {
            this.logger.info("OffersManager. Resubscribe after MDT connection for price streams: " + StringUtil.arrayToString(streamIds));
            this.processRefreshSpecifiedMdt(streamIds, forceReset);
        }
    }
    processRefreshSpecifiedMdt(streamIds, forceReset) {
        let instrumentDescriptors, instrumentDescriptorsForRequestList, instrumentDescriptor, offerIds, i;
        instrumentDescriptorsForRequestList = new list();
        instrumentDescriptors = this.instrumentsProvider.getAllInstrumentDescriptors();
        for (i = 0; i <= instrumentDescriptors.length - 1; i += 1) {
            instrumentDescriptor = instrumentDescriptors[i];
            if ((instrumentDescriptor.getSubscriptionStatus() == "T" || instrumentDescriptor.getSubscriptionStatus() == "V") && this.isAcceptableForPriceStream(streamIds, instrumentDescriptor.getPriceStreamId())) {
                instrumentDescriptorsForRequestList.add(instrumentDescriptor);
            }
        }
        offerIds = new Array(instrumentDescriptorsForRequestList.length());
        instrumentDescriptors = new Array(instrumentDescriptorsForRequestList.length());
        for (i = 0; i <= instrumentDescriptorsForRequestList.length() - 1; i += 1) {
            instrumentDescriptors[i] = instrumentDescriptorsForRequestList.get(i);
            offerIds[i] = instrumentDescriptors[i].getOfferId();
        }
        if (offerIds.length > 0) {
            this.offersRefreshController.reset();
            this.getAllOffersProcessor.execute(offerIds, new OffersManager.GetAllOffersCallback(this), true);
            this.offerSubscriber.subscribe(instrumentDescriptors, this.offerSubscriberCallback, forceReset);
        }
    }
    isAcceptableForPriceStream(streamIds, instrumentStreamId) {
        let i;
        for (i = 0; i <= streamIds.length - 1; i += 1) {
            if (streamIds[i] == instrumentStreamId) {
                return true;
            }
        }
        return false;
    }
    processGetOffers(getOffersMessage) {
        let i, newOffer, oldOffer, offerIds, whetherUpdates, offers, processed;
        offers = getOffersMessage.getOffers();
        processed = this.getAllOffersProcessor.preProcessResponse(getOffersMessage.getRequestId(), offers);
        if (processed) {
            return;
        }
        offerIds = new Array(offers.length);
        whetherUpdates = new Array(offers.length);
        for (i = 0; i <= offers.length - 1; i += 1) {
            newOffer = offers[i].getOffer();
            oldOffer = this.storage.getOfferById(newOffer.getOfferId());
            offerIds[i] = newOffer.getOfferId();
            if (oldOffer != null) {
                this.storage.removeOfferById(oldOffer.getOfferId());
                whetherUpdates[i] = true;
            }
            else {
                whetherUpdates[i] = false;
            }
            this.storage.addOffer(newOffer);
        }
        processed = this.getAllOffersProcessor.processResponse(getOffersMessage.getRequestId(), offers);
        if (!processed) {
            for (i = 0; i <= offerIds.length - 1; i += 1) {
                if (whetherUpdates[i]) {
                    this.notifyOfferChanged(offerIds[i]);
                }
                else {
                    this.notifyOfferAdded(offerIds[i]);
                }
            }
        }
    }
    processGetRawOffers(getRawOffersMessage) {
        let i, rawOffers;
        rawOffers = getRawOffersMessage.getOffers();
        for (i = 0; i <= rawOffers.length - 1; i += 1) {
            this.rawOffersStorage.addOffer(rawOffers[i]);
        }
    }
    updateOffer(updateType, updOffer) {
        let newOffer, oldOffer, oldOfferBuilder;
        if (!this.getState().isLoaded() && updateType != UpdateCommandType.UPDATE_OR_INSERT) {
            return;
        }
        newOffer = updOffer.getOffer();
        if (updateType == UpdateCommandType.UPDATE) {
            oldOffer = this.storage.getOfferById(newOffer.getOfferId());
            if (oldOffer == null) {
                return;
            }
            oldOfferBuilder = oldOffer;
            this.processUpdate(newOffer, oldOfferBuilder, updOffer);
            this.notifyOfferChanged(oldOfferBuilder.getOfferId());
        } else if (updateType == UpdateCommandType.INSERT) {
            this.storage.addOffer(newOffer);
            this.notifyOfferAdded(newOffer.getOfferId());
        } else if (updateType == UpdateCommandType.UPDATE_OR_INSERT) {
            oldOffer = this.storage.getOfferById(newOffer.getOfferId());
            if (oldOffer == null) {
                this.storage.addOffer(newOffer);
                this.notifyOfferAdded(newOffer.getOfferId());
                return;
            }
            oldOfferBuilder = oldOffer;
            this.processUpdate(newOffer, oldOfferBuilder, updOffer);
            this.notifyOfferChanged(oldOfferBuilder.getOfferId());
        }
    }
    processUpdate(newOffer, oldOfferBuilder, updOffer) {
        if (updOffer.isQuoteIdChanged()) {
            oldOfferBuilder.setQuoteId(newOffer.getQuoteId());
        }
        if (updOffer.isBidChanged()) {
            oldOfferBuilder.setBid(newOffer.getBid());
        }
        if (updOffer.isAskChanged()) {
            oldOfferBuilder.setAsk(newOffer.getAsk());
        }
        if (updOffer.isBidTradableChanged()) {
            oldOfferBuilder.setBidTradable(newOffer.getBidTradable());
        }
        if (updOffer.isAskTradableChanged()) {
            oldOfferBuilder.setAskTradable(newOffer.getAskTradable());
        }
        if (updOffer.isHighChanged()) {
            oldOfferBuilder.setHigh(newOffer.getHigh());
        }
        if (updOffer.isLowChanged()) {
            oldOfferBuilder.setLow(newOffer.getLow());
        }
        if (updOffer.isVolumeChanged()) {
            oldOfferBuilder.setVolume(newOffer.getVolume());
        }
        if (updOffer.isTimeChanged()) {
            oldOfferBuilder.setTime(newOffer.getTime());
        }
    }
    copyOffer(offer) {
        let builder;
        builder = new OfferBuilder();
        builder.setOfferId(offer.getOfferId());
        builder.setQuoteId(offer.getQuoteId());
        builder.setBid(offer.getBid());
        builder.setAsk(offer.getAsk());
        builder.setBidTradable(offer.getBidTradable());
        builder.setAskTradable(offer.getAskTradable());
        builder.setHigh(offer.getHigh());
        builder.setLow(offer.getLow());
        builder.setVolume(offer.getVolume());
        builder.setTime(offer.getTime());
        return builder;
    }
    createRawOffer(offer) {
        let builder;
        builder = new RawOfferBuilder();
        builder.setOfferId(offer.getOfferId());
        builder.setBid(offer.getBid());
        builder.setAsk(offer.getAsk());
        builder.setBidTradable(offer.getBidTradable());
        builder.setAskTradable(offer.getAskTradable());
        builder.setHigh(offer.getHigh());
        builder.setLow(offer.getLow());
        builder.setTradingStatus("");
        return builder.build();
    }
    getPublicOfferWithCalculatedFields(offer) {
        let builder, offersBidAskCalculated, offersHighLowCalculated;
        builder = this.copyOffer(offer);
        offersBidAskCalculated = this.offersCalculator.calculateBidAsk(offer);
        builder.setBid(offersBidAskCalculated.getBid());
        builder.setAsk(offersBidAskCalculated.getAsk());
        offersHighLowCalculated = this.offersCalculator.calculateHighLow(offer);
        builder.setHigh(offersHighLowCalculated.getHigh());
        builder.setLow(offersHighLowCalculated.getLow());
        return builder.build();
    }
}
module.exports = OffersManager
OffersManager.SnapshotGetAllOffersCallback = class {
    callback;
    _owner_;
    constructor(_owner_) {
        this._owner_ = _owner_;
    }
    setCallback(callback) {
        this.callback = callback;
    }
    invoke(offerUpdates) {
        let rawOffers, i;
        rawOffers = new Array(offerUpdates.length);
        for (i = 0; i <= offerUpdates.length - 1; i += 1) {
            rawOffers[i] = this._owner_.createRawOffer(offerUpdates[i].getOffer());
        }
        ExecutionTimeEvenUtil.eventStop(this._owner_.eventSnapshot);
        this.callback.onSuccess(rawOffers);
    }
    onError(errorText) {
        let error;
        error = new FXConnectLiteErrorBuilder();
        error.setMessage(errorText);
        this.callback.onError(error.build());
    }
}
OffersManager.PartialGetAllOffersCallback = class {
    callback;
    _owner_;
    constructor(_owner_) {
        this._owner_ = _owner_;
    }
    setCallback(callback) {
        this.callback = callback;
    }
    invoke(offerUpdates) {
        let i;
        for (i = 0; i <= offerUpdates.length - 1; i += 1) {
            this._owner_.notifyOfferAdded(offerUpdates[i].getOffer().getOfferId());
        }
        this.callback.invoke();
    }
    onError(errorText) {
        this.callback.invoke();
    }
}
OffersManager.GetAllOffersCallback = class {
    _owner_;
    constructor(_owner_) {
        this._owner_ = _owner_;
    }
    invoke(offerUpdates) {
        this._owner_.offersRefreshController.setRefreshed();
    }
    onError(errorText) {
        this._owner_.offersRefreshController.setRefreshed();
    }
}
OffersManager.ReceiveNewMessageListener = class {
    owner;
    _owner_;
    constructor(_owner_) {
        this._owner_ = _owner_;
    }
    onNewMessageReceive(message) {
        this.owner.processMessage(message);
    }
    static create(owner) {
        let instance;
        instance = new OffersManager.ReceiveNewMessageListener(this);
        instance.owner = owner;
        return instance;
    }
}
OffersManager.OfferSubscriberCallback = class {
    offersRefreshController;
    _owner_;
    constructor(_owner_) {
        this._owner_ = _owner_;
        this.offersRefreshController = null;
    }
    onSuccess() {
        this.offersRefreshController.setOffersSubscribed();
    }
    onError(error) {
        this.offersRefreshController.setError(error);
    }
    static create(offersRefreshController) {
        let result;
        result = new OffersManager.OfferSubscriberCallback(this);
        result.offersRefreshController = offersRefreshController;
        return result;
    }
}
OffersManager.OffersRefreshControllerCallback = class {
    state;
    statePublisher;
    logger;
    offersManager;
    _owner_;
    constructor(_owner_) {
        this._owner_ = _owner_;
        this.state = null;
        this.statePublisher = null;
    }
    onSuccess() {
        if (this.state.isLoading()) {
            ExecutionTimeEvenUtil.eventStop(this.offersManager.getEventRefresh());
            this.notifyStateChange(DataManagerState.LOADED);
        }
    }
    onError(error) {
        ExecutionTimeEvenUtil.eventStopWithError(this.offersManager.getEventRefresh(), error);
        this.notifyStateChangeWithError(DataManagerState.NOT_LOADED, error);
    }
    notifyStateChange(stateStatus) {
        this.logger.debug("OffersManager. State status changed: " + (stateStatus).toString());
        this.state.setState(stateStatus);
        this.statePublisher.notifyStateChange(this.state);
    }
    notifyStateChangeWithError(stateStatus, error) {
        let errorBuilder;
        this.logger.error("OffersManager. State status changed: " + (stateStatus).toString() + " with error " + error);
        errorBuilder = new FXConnectLiteErrorBuilder();
        errorBuilder.setMessage(error);
        this.state.setStateWithError(stateStatus, errorBuilder);
        this.statePublisher.notifyStateChange(this.state);
    }
    static create(state, statePublisher, logger, offersManager) {
        let result;
        result = new OffersManager.OffersRefreshControllerCallback(this);
        result.state = state;
        result.statePublisher = statePublisher;
        result.logger = logger;
        result.offersManager = offersManager;
        return result;
    }
}
OffersManager.OfferChangedAction = class {
    listener;
    offerInfo;
    _owner_;
    constructor(_owner_) {
        this._owner_ = _owner_;
    }
    static create(offerInfo) {
        let result;
        result = new OffersManager.OfferChangedAction(this);
        result.offerInfo = offerInfo;
        return result;
    }
    setListener(listener) {
        this.listener = listener;
    }
    execute() {
        this.listener.onChange(this.offerInfo);
    }
}
OffersManager.OfferAddedAction = class {
    listener;
    offerInfo;
    _owner_;
    constructor(_owner_) {
        this._owner_ = _owner_;
    }
    static create(offerInfo) {
        let result;
        result = new OffersManager.OfferAddedAction(this);
        result.offerInfo = offerInfo;
        return result;
    }
    setListener(listener) {
        this.listener = listener;
    }
    execute() {
        this.listener.onAdd(this.offerInfo);
    }
}
