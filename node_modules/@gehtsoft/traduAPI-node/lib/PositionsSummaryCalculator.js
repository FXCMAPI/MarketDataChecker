'use strict';
let LogManager = require('./LogManager.js');
let exception = require('@gehtsoft/LuaxStdlib-node').exception;
let FXConnectLiteErrorCodes = require('./FXConnectLiteErrorCodes.js');
let PositionsSummaryBuilder = require('./PositionsSummaryBuilder.js');
let stdlib = require('@gehtsoft/LuaxStdlib-node').stdlib;
//@@DocBrief("class provides calculator for the positions summary information")
class PositionsSummaryCalculator {
    offersManager;
    openPositionsManager;
    instrumentsManager;
    logger;
    rawAccountsProvider;
    toAccountCCYConverter;
    systemSettingsProvider;
    constructor() {
        this.offersManager = null;
        this.openPositionsManager = null;
        this.instrumentsManager = null;
    }
    setLogger(logger) {
        this.logger = logger;
    }
    setRawAccountsProvider(rawAccountsProvider) {
        if (rawAccountsProvider == null) {
            LogManager.getLogger().error("PositionsSummaryCalculator.setRawAccountsProvider(): rawAccountsProvider is not set");
            throw exception.create(FXConnectLiteErrorCodes.CODE_REQUIRED_PARAMETER_NOT_SET, "rawAccountsProvider is not set");
        }
        this.rawAccountsProvider = rawAccountsProvider;
    }
    setToAccountCCYConverter(toAccountCCYConverter) {
        if (toAccountCCYConverter == null) {
            LogManager.getLogger().error("PositionsSummaryCalculator.setToAccountCCYConverter(): toAccountCCYConverter is not set");
            throw exception.create(FXConnectLiteErrorCodes.CODE_REQUIRED_PARAMETER_NOT_SET, "toAccountCCYConverter is not set");
        }
        this.toAccountCCYConverter = toAccountCCYConverter;
    }
    setSystemSettingsProvider(systemSettingsProvider) {
        if (systemSettingsProvider == null) {
            LogManager.getLogger().error("PositionsSummaryCalculator.setSystemSettingsProvider(): systemSettingsProvider is not set");
            throw exception.create(FXConnectLiteErrorCodes.CODE_REQUIRED_PARAMETER_NOT_SET, "systemSettingsProvider is not set");
        }
        this.systemSettingsProvider = systemSettingsProvider;
    }
    setOffersManager(offersManager) {
        if (offersManager == null) {
            LogManager.getLogger().error("PositionsSummaryCalculator.setOffersManager(): offersManager is not set");
            throw exception.create(FXConnectLiteErrorCodes.CODE_REQUIRED_PARAMETER_NOT_SET, "offersManager is not set");
        }
        this.offersManager = offersManager;
    }
    setOpenPositionsManager(openPositionsManager) {
        if (openPositionsManager == null) {
            LogManager.getLogger().error("PositionsSummaryCalculator.setOpenPositionsManager(): openPositionsManager is not set");
            throw exception.create(FXConnectLiteErrorCodes.CODE_REQUIRED_PARAMETER_NOT_SET, "openPositionsManager is not set");
        }
        this.openPositionsManager = openPositionsManager;
    }
    setInstrumentManager(instrumentsManager) {
        if (instrumentsManager == null) {
            LogManager.getLogger().error("PositionsSummaryCalculator.setInstrumentManager(): instrumentsManager is not set");
            throw exception.create(FXConnectLiteErrorCodes.CODE_REQUIRED_PARAMETER_NOT_SET, "instrumentsManager is not set");
        }
        this.instrumentsManager = instrumentsManager;
    }
    calculate(symbol, tradeIds, convertToSystemBaseCurrency) {
        let builder, openPosition, i, sellAvgOpen, buyAvgOpen, sells, buys, instrument, offerId;
        this.validateCalculateCall(symbol, tradeIds);
        builder = new PositionsSummaryBuilder();
        builder.setInstrument(symbol);
        sells = 0;
        buys = 0;
        sellAvgOpen = 0.0;
        buyAvgOpen = 0.0;
        for (i = 0; i <= tradeIds.length - 1; i += 1) {
            openPosition = this.openPositionsManager.getOpenPosition(tradeIds[i]);
            if (i == 0) {
                offerId = openPosition.getOfferId();
                builder.setOfferId(offerId);
                instrument = this.instrumentsManager.getInstrumentByOfferId(offerId);
                if (instrument != null) {
                    builder.setSortOrder(instrument.getSortOrder());
                }
            }
            if (openPosition.getBuySell() == "S") {
                sells = sells + 1;
                builder.setSellAmount(builder.getSellAmount() + openPosition.getAmount());
                builder.setSellNetPL(builder.getSellNetPL() + this.convertValue(openPosition.getNetPL(), openPosition, convertToSystemBaseCurrency));
                builder.setSellPipPL(builder.getSellPipPL() + this.convertValue(openPosition.getPLPips(), openPosition, convertToSystemBaseCurrency));
                builder.setSellUsedMr(builder.getSellUsedMr() + this.convertValue(openPosition.getUsedMargin(), openPosition, convertToSystemBaseCurrency));
                builder.setSellGrossPL(builder.getSellGrossPL() + this.convertValue(openPosition.getGrossPL(), openPosition, convertToSystemBaseCurrency));
                sellAvgOpen = sellAvgOpen + this.convertValue(openPosition.getOpenRate(), openPosition, convertToSystemBaseCurrency) * openPosition.getAmount();
                this.processSell(openPosition, builder, convertToSystemBaseCurrency);
            }
            else {
                buys = buys + 1;
                builder.setBuyAmount(builder.getBuyAmount() + openPosition.getAmount());
                builder.setBuyNetPL(builder.getBuyNetPL() + this.convertValue(openPosition.getNetPL(), openPosition, convertToSystemBaseCurrency));
                builder.setBuyPipPL(builder.getBuyPipPL() + this.convertValue(openPosition.getPLPips(), openPosition, convertToSystemBaseCurrency));
                builder.setBuyUsedMr(builder.getBuyUsedMr() + this.convertValue(openPosition.getUsedMargin(), openPosition, convertToSystemBaseCurrency));
                builder.setBuyGrossPL(builder.getBuyGrossPL() + this.convertValue(openPosition.getGrossPL(), openPosition, convertToSystemBaseCurrency));
                buyAvgOpen = buyAvgOpen + this.convertValue(openPosition.getOpenRate(), openPosition, convertToSystemBaseCurrency) * openPosition.getAmount();
                this.processBuy(openPosition, builder, convertToSystemBaseCurrency);
            }
            builder.setGrossPL(builder.getGrossPL() + this.convertValue(openPosition.getGrossPL(), openPosition, convertToSystemBaseCurrency));
            builder.setRolloverInterest(builder.getRolloverInterest() + this.convertValue(openPosition.getRolloverInterest(), openPosition, convertToSystemBaseCurrency));
            builder.setNetPL(builder.getNetPL() + this.convertValue(openPosition.getNetPL(), openPosition, convertToSystemBaseCurrency));
            builder.setDividends(builder.getDividends() + this.convertValue(openPosition.getDividends(), openPosition, convertToSystemBaseCurrency));
        }
        if (sells > 0) {
            builder.setSellAvgOpen(sellAvgOpen / builder.getSellAmount());
        }
        if (buys > 0) {
            builder.setBuyAvgOpen(buyAvgOpen / builder.getBuyAmount());
        }
        builder.setAmount(Math.trunc(stdlib.abs((builder.getSellAmount() - builder.getBuyAmount()))));
        builder.setNumberOfPositions(sells + buys);
        return builder.build();
    }
    convertValue(sourceValue, openPosition, convertToSystemBaseCurrency) {
        let account;
        if (convertToSystemBaseCurrency) {
            account = this.rawAccountsProvider.getAccountById(openPosition.getAccountId());
            if (account != null) {
                return this.toAccountCCYConverter.plainConvert(account.getBaseCurrency(), sourceValue, this.systemSettingsProvider.getBaseCurrency(), "PositionsSummaryCalculator.convertValue()");
            }
        }
        return sourceValue;
    }
    validateCalculateCall(symbol, tradeIds) {
        if (symbol == null) {
            LogManager.getLogger().error("PositionsSummaryCalculator.calculate(): symbol is not set");
            throw exception.create(FXConnectLiteErrorCodes.CODE_REQUIRED_PARAMETER_NOT_SET, "symbol is not set");
        }
        if (tradeIds == null || tradeIds.length == 0) {
            LogManager.getLogger().error("PositionsSummaryCalculator.calculate(): tradeIds are not set");
            throw exception.create(FXConnectLiteErrorCodes.CODE_REQUIRED_PARAMETER_NOT_SET, "tradeIds are not set");
        }
        if (this.offersManager == null) {
            LogManager.getLogger().error("PositionsSummaryCalculator.calculate(): offersManager is not set");
            throw exception.create(FXConnectLiteErrorCodes.CODE_REQUIRED_PARAMETER_NOT_SET, "offersManager is not set");
        }
        if (this.openPositionsManager == null) {
            LogManager.getLogger().error("PositionsSummaryCalculator.calculate(): openPositionsManager is not set");
            throw exception.create(FXConnectLiteErrorCodes.CODE_REQUIRED_PARAMETER_NOT_SET, "openPositionsManager is not set");
        }
        if (this.instrumentsManager == null) {
            LogManager.getLogger().error("PositionsSummaryCalculator.calculate(): instrumentsManager is not set");
            throw exception.create(FXConnectLiteErrorCodes.CODE_REQUIRED_PARAMETER_NOT_SET, "instrumentsManager is not set");
        }
    }
    processSell(openPosition, builder, convertToSystemBaseCurrency) {
        let offer;
        offer = this.offersManager.getOfferById(openPosition.getOfferId());
        if (offer == null) {
            this.logger.warning("PositionsSummaryCalculator. Not found offer by ID: " + openPosition.getOfferId());
        }
        else {
            builder.setBuyClose(this.convertValue(offer.getAsk(), openPosition, convertToSystemBaseCurrency));
        }
    }
    processBuy(openPosition, builder, convertToSystemBaseCurrency) {
        let offer;
        offer = this.offersManager.getOfferById(openPosition.getOfferId());
        if (offer == null) {
            this.logger.warning("PositionsSummaryCalculator. Not found offer by ID: " + openPosition.getOfferId());
        }
        else {
            builder.setSellClose(this.convertValue(offer.getBid(), openPosition, convertToSystemBaseCurrency));
        }
    }
}
module.exports = PositionsSummaryCalculator
