'use strict';
let DataManagerState = require('./DataManagerState.js');
let DataManagerStatePublisher = require('./DataManagerStatePublisher.js');
let LeverageProfilesStorage = require('./LeverageProfilesStorage.js');
let UsedMarginProvider = require('./UsedMarginProvider.js');
let LeverageProfilesProvider = require('./LeverageProfilesProvider.js');
let LogManager = require('./LogManager.js');
let queue = require('@gehtsoft/LuaxStdlib-node').queue;
let MessageType = require('./MessageType.js');
let StateStatusUtils = require('./StateStatusUtils.js');
let exception = require('@gehtsoft/LuaxStdlib-node').exception;
let FXConnectLiteErrorCodes = require('./FXConnectLiteErrorCodes.js');
let list = require('@gehtsoft/LuaxStdlib-node').list;
let CollectionUtils = require('./CollectionUtils.js');
let GetProfilesQuery = require('./GetProfilesQuery.js');
let string_map = require('@gehtsoft/LuaxStdlib-node').string_map;
let scheduler = require('@gehtsoft/LuaxStdlib-node').scheduler;
let StringValueObject = require('./StringValueObject.js');
let StringUtil = require('./StringUtil.js');
let ExecutionTimeEvenUtil = require('./ExecutionTimeEvenUtil.js');
let ExecutionTimeEventName = require('./ExecutionTimeEventName.js');
//@@DocBrief("The class for getting access to using margin levels.")
class LeverageProfilesManager {
    static get TIMEOUT_INTERVAL() { return 30000; }
    state;
    storage;
    stateChangePublisher;
    usedMarginProvider;
    leverageProfilesProvider;
    messageRouter;
    commandFactory;
    sessionProvider;
    messageFactory;
    requestNumberGenerator;
    messageExecutor;
    receiveNewMessageListener;
    accountsManager;
    instrumentsProvider;
    sendsQueue;
    requestsNumber;
    connected;
    logger;
    eventRefresh;
    timeOutScheduler;
    requestAccounts;
    timeoutInterval;
    constructor() {
        this.requestsNumber = 0;
        this.state = new DataManagerState();
        this.stateChangePublisher = new DataManagerStatePublisher();
        this.storage = new LeverageProfilesStorage();
        this.usedMarginProvider = UsedMarginProvider.create(this.storage);
        this.leverageProfilesProvider = LeverageProfilesProvider.create(this.storage);
        this.setReceiveNewMessageListener();
        this.logger = LogManager.getLogger();
        this.sendsQueue = new queue();
        this.timeOutScheduler = null;
        this.requestAccounts = null;
        this.timeoutInterval = LeverageProfilesManager.TIMEOUT_INTERVAL;
    }
    static create(accountsManager, instrumentsProvider, commandFactory, messageRouter, messageExecutor, sessionProvider, messageFactory, requestNumberGenerator) {
        let result;
        result = new LeverageProfilesManager();
        result.commandFactory = commandFactory;
        result.messageRouter = messageRouter;
        result.messageExecutor = messageExecutor;
        result.sessionProvider = sessionProvider;
        result.messageFactory = messageFactory;
        result.requestNumberGenerator = requestNumberGenerator;
        result.accountsManager = accountsManager;
        result.instrumentsProvider = instrumentsProvider;
        result.subscribeOnRequiredMessages();
        return result;
    }
    subscribeOnRequiredMessages() {
        this.messageRouter.subscribeNewMessageReceive(MessageType.GetLeverageProfiles, this.receiveNewMessageListener);
        this.messageRouter.subscribeNewMessageReceive(MessageType.Connected, this.receiveNewMessageListener);
        this.messageRouter.subscribeNewMessageReceive(MessageType.Disconnected, this.receiveNewMessageListener);
        this.messageRouter.subscribeNewMessageReceive(MessageType.Reconnecting, this.receiveNewMessageListener);
    }
    setReceiveNewMessageListener() {
        this.receiveNewMessageListener = LeverageProfilesManager.ReceiveNewMessageListener.create(this);
    }
    getUsedMarginProvider() {
        this.logger.info("LeverageProfilesManager. Get used margin provider");
        return this.usedMarginProvider;
    }
    getLeverageProfilesProvider() {
        this.logger.info("LeverageProfilesManager. Get leverage profiles provider");
        return this.leverageProfilesProvider;
    }
    processLeverageProfiles(getLeverageProfilesMessage) {
        let leverageProfiles, queueItem, accountId;
        leverageProfiles = getLeverageProfilesMessage.getLeverageProfiles();
        this.requestsNumber = this.requestsNumber - 1;
        if (leverageProfiles.length > 0) {
            accountId = leverageProfiles[0].getAccountID();
            if (this.requestAccounts != null && this.requestAccounts.contains(accountId)) {
                this.requestAccounts.remove(accountId);
            }
        }
        this.storage.addLeverageProfiles(leverageProfiles);
        if (this.requestsNumber == 0 && this.sendsQueue.length() > 0) {
            this.stopTimeout();
            queueItem = this.sendsQueue.dequeue();
            this.checkQueue();
            queueItem.getActionStop().invoke();
        }
    }
    processMessage(message) {
        this.logger.debug("LeverageProfilesManager. Receive message: " + message.getType());
        if (message.getType() == MessageType.GetLeverageProfiles) {
            this.processLeverageProfiles(message);
        } else if (message.getType() == MessageType.Connected) {
            this.connected = true;
            this.refresh();
        } else if (message.getType() == MessageType.Disconnected) {
            this.stopTimeout();
            this.connected = false;
            this.storage.clear();
            this.notifyStateChange(DataManagerState.NOT_LOADED);
        } else if (message.getType() == MessageType.Reconnecting) {
            this.connected = false;
        }
    }
    notifyStateChangeWithError(stateStatus, error) {
        StateStatusUtils.notifyStateChangeWithError(this.state, this.stateChangePublisher, stateStatus, error, this.logger, "LeverageProfilesManager");
    }
    notifyStateChange(stateStatus) {
        this.logger.debug("LeverageProfilesManager. State status changed: " + (stateStatus).toString());
        this.state.setState(stateStatus);
        this.stateChangePublisher.notifyStateChange(this.state);
    }
    subscribeStateChange(listener) {
        if (listener == null) {
            this.logger.error("LeverageProfilesManager.subscribeStateChange(): listener is not set");
            throw exception.create(FXConnectLiteErrorCodes.CODE_REQUIRED_PARAMETER_NOT_SET, "listener is not set");
        }
        this.stateChangePublisher.subscribe(listener);
    }
    unsubscribeStateChange(listener) {
        if (listener == null) {
            this.logger.error("LeverageProfilesManager.unsubscribeStateChange(): listener is not set");
            throw exception.create(FXConnectLiteErrorCodes.CODE_REQUIRED_PARAMETER_NOT_SET, "listener is not set");
        }
        this.stateChangePublisher.unsubscribe(listener);
    }
    getState() {
        return this.state;
    }
    refresh() {
        let queueItem, offerIdsList, instrumentDescriptors, instrumentDescriptor, i;
        this.logger.info("LeverageProfilesManager. Load all leverage profiles from server");
        if (!this.connected) {
            this.logger.warning("LeverageProfilesManager. Session not connected");
            return;
        }
        if (this.getState().isLoading()) {
            this.logger.warning("LeverageProfilesManager. Manager not loaded yet");
            return;
        }
        offerIdsList = new list();
        instrumentDescriptors = this.instrumentsProvider.getAllInstrumentDescriptors();
        for (i = 0; i <= instrumentDescriptors.length - 1; i += 1) {
            instrumentDescriptor = instrumentDescriptors[i];
            if (instrumentDescriptor.getSubscriptionStatus() == "T") {
                CollectionUtils.addStringToList(offerIdsList, instrumentDescriptor.getOfferId());
            }
        }
        queueItem = GetProfilesQuery.create(CollectionUtils.stringListToArray(offerIdsList), new LeverageProfilesManager.ActionStartRefresh(this), new LeverageProfilesManager.ActionStopRefresh(this));
        this.processGetLeverageProfilesCommandQuery(queueItem);
    }
    processGetLeverageProfilesCommandQuery(queueItem) {
        this.sendsQueue.enqueue(queueItem);
        if (this.sendsQueue.length() == 1) {
            this.checkQueue();
        }
    }
    checkQueue() {
        let accounts, queueItem, accountIds, getLeverageProfilesCommand, i, timeoutAction;
        if (this.sendsQueue.length() > 0) {
            queueItem = this.sendsQueue.peek();
            accounts = this.accountsManager.getAccountsInfo();
            this.requestsNumber = 0;
            queueItem.getActionStart().invoke();
            this.requestAccounts = new string_map();
            if (queueItem.getOfferIds().length > 0 && accounts.length > 0) {
                timeoutAction = new LeverageProfilesManager.TimeoutAction(this);
                this.timeOutScheduler = scheduler.create(this.timeoutInterval, timeoutAction);
                this.timeOutScheduler.startWithDelay();
                accountIds = new Array(accounts.length);
                this.requestsNumber = accounts.length;
                for (i = 0; i <= accounts.length - 1; i += 1) {
                    accountIds[i] = accounts[i].getId();
                    this.requestAccounts.set(accountIds[i], StringValueObject.create(accountIds[i]));
                }
                getLeverageProfilesCommand = this.commandFactory.createGetLeverageProfileByAcctCommand(accountIds, queueItem.getOfferIds(), this.messageExecutor, this.sessionProvider.getSession(), this.messageFactory, this.requestNumberGenerator);
                getLeverageProfilesCommand.execute();
            }
            else {
                this.logger.warning("LeverageProfilesManager. No instruments descriptors or/and accounts found for checkQueue()");
                this.sendsQueue.dequeue();
                this.checkQueue();
                queueItem.getActionStop().invoke();
            }
        }
    }
    stopTimeout() {
        if (this.timeOutScheduler != null) {
            this.timeOutScheduler.stop();
            this.timeOutScheduler = null;
        }
    }
}
module.exports = LeverageProfilesManager
LeverageProfilesManager.TimeoutAction = class {
    _owner_;
    constructor(_owner_) {
        this._owner_ = _owner_;
    }
    invoke() {
        let error, queueItem;
        this._owner_.stopTimeout();
        error = "LeverageProfilesManager timed out on loading profiles";
        if (this._owner_.requestAccounts != null && this._owner_.requestAccounts.keys().length > 0) {
            error = error + " for account(s): " + StringUtil.arrayToString(this._owner_.requestAccounts.keys());
        }
        if (this._owner_.sendsQueue.length() > 0) {
            queueItem = this._owner_.sendsQueue.dequeue();
            this._owner_.checkQueue();
            queueItem.getActionStop().invokeWithError(error);
        }
    }
}
LeverageProfilesManager.ActionStartRefresh = class {
    _owner_;
    constructor(_owner_) {
        this._owner_ = _owner_;
    }
    invoke() {
        this._owner_.eventRefresh = ExecutionTimeEvenUtil.eventStart(ExecutionTimeEventName.LeverageProfilesManagerRefreshTime);
        this._owner_.notifyStateChange(DataManagerState.LOADING);
    }
}
LeverageProfilesManager.ActionStopRefresh = class {
    _owner_;
    constructor(_owner_) {
        this._owner_ = _owner_;
    }
    invoke() {
        ExecutionTimeEvenUtil.eventStop(this._owner_.eventRefresh);
        this._owner_.notifyStateChange(DataManagerState.LOADED);
    }
    invokeWithError(error) {
        ExecutionTimeEvenUtil.eventStopWithError(this._owner_.eventRefresh, error);
        this._owner_.notifyStateChangeWithError(DataManagerState.NOT_LOADED, error);
    }
}
LeverageProfilesManager.ReceiveNewMessageListener = class {
    owner;
    _owner_;
    constructor(_owner_) {
        this._owner_ = _owner_;
    }
    onNewMessageReceive(message) {
        this.owner.processMessage(message);
    }
    static create(owner) {
        let instance;
        instance = new LeverageProfilesManager.ReceiveNewMessageListener(this);
        instance.owner = owner;
        return instance;
    }
}
