'use strict';
let AFxmsgReader = require('./AFxmsgReader.js');
let FxmsgReaderUtil = require('./FxmsgReaderUtil.js');
let PdasMessageType = require('./PdasMessageType.js');
let PdasMessageFieldTag = require('./PdasMessageFieldTag.js');
let PdasRequestCommand = require('./PdasRequestCommand.js');
let xmlNode = require('@gehtsoft/LuaxStdlib-node').xmlNode;
let XmlReaderUtil = require('./XmlReaderUtil.js');
let AccountCsvParser = require('./AccountCsvParser.js');
let csvParser = require('@gehtsoft/LuaxStdlib-node').csvParser;
let GetAccountMessageBuilder = require('./GetAccountMessageBuilder.js');
class GetAccountsFxmsgReader extends AFxmsgReader {
    read(responseList, xmlRootNode, messages) {
        let messageNode, data, message, i;
        messageNode = FxmsgReaderUtil.getMessageNode(xmlRootNode, PdasMessageType.USER_RESPONSE);
        if (messageNode == null) {
            if (messages == null || messages.length == 0) {
                return;
            }
            for (i = 0; i <= messages.length - 1; i += 1) {
                message = messages[i];
                if (message.getType() == PdasMessageType.FXCM_RESPONSE && message.getFieldValue(PdasMessageFieldTag.FXCM_COMMAND_ID) == PdasRequestCommand.GET_ACCOUNTS) {
                    data = message.getList(PdasMessageFieldTag.FXCM_NO_PARAM).getGroupParamValueByParamName("DAS");
                    if (data != null) {
                        this.parseAccounts(responseList, data, true);
                    }
                }
            }
            return;
        }
        data = this.getAccountData(messageNode);
        if (data == null) {
            return;
        }
        this.parseAccounts(responseList, data, false);
    }
    getAccountData(messageNode) {
        let optionsList, child, i;
        optionsList = this.getOptionsList(messageNode);
        if (optionsList != null) {
            for (i = 0; i <= optionsList.getChildrenCount() - 1; i += 1) {
                child = optionsList.getChild(i);
                if (child.getType() == xmlNode.ELEMENT && child.getName() == "g" && this.isAccountsGroup(child)) {
                    return this.readAccountString(child);
                }
            }
        }
        return null;
    }
    getOptionsList(messageNode) {
        let child, i;
        for (i = 0; i <= messageNode.getChildrenCount() - 1; i += 1) {
            child = messageNode.getChild(i);
            if (child.getType() == xmlNode.ELEMENT && XmlReaderUtil.isAttrEqualTo(child, "n", PdasMessageFieldTag.FXCM_NO_PARAM)) {
                return child;
            }
        }
        return null;
    }
    isAccountsGroup(group) {
        let child, i, name;
        for (i = 0; i <= group.getChildrenCount() - 1; i += 1) {
            child = group.getChild(i);
            if (child.getType() == xmlNode.ELEMENT && child.getName() == "f" && XmlReaderUtil.isAttrEqualTo(child, "n", PdasMessageFieldTag.FXCM_PARAM_NAME)) {
                name = XmlReaderUtil.getNodeText(child);
                if (name == "EXTRA.5") {
                    return true;
                }
            }
        }
        return false;
    }
    readAccountString(group) {
        let child, i;
        for (i = 0; i <= group.getChildrenCount() - 1; i += 1) {
            child = group.getChild(i);
            if (child.getType() == xmlNode.ELEMENT && child.getName() == "f") {
                if (XmlReaderUtil.isAttrEqualTo(child, "n", PdasMessageFieldTag.FXCM_PARAM_VALUE)) {
                    return XmlReaderUtil.getNodeText(child);
                }
            }
        }
        return null;
    }
    parseAccounts(responseList, data, locked) {
        let linesParser, accountParser, lines, message, lastMessage, i;
        lastMessage = null;
        accountParser = new AccountCsvParser();
        linesParser = new csvParser();
        linesParser.valueSeparator = "\n";
        lines = linesParser.splitLine(data);
        for (i = 0; i <= lines.length - 1; i += 1) {
            message = this.parseAccountLine(accountParser, lines[i]);
            if (message != null) {
                if (locked) {
                    responseList.add(this.createLockedMessage(message));
                }
                else {
                    responseList.add(message);
                }
                lastMessage = message;
            }
        }
        if (lastMessage != null) {
            lastMessage.setLastInList(true);
        }
    }
    parseAccountLine(accountParser, accountLineOriginal) {
        let messageBuilder, account;
        account = accountParser.parse(accountLineOriginal);
        if (account == null) {
            return null;
        }
        messageBuilder = new GetAccountMessageBuilder();
        messageBuilder.setAccount(account);
        messageBuilder.setLastInList(false);
        return messageBuilder.build();
    }
}
module.exports = GetAccountsFxmsgReader
