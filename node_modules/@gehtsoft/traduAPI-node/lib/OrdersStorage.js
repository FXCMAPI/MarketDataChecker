'use strict';
let string_map = require('@gehtsoft/LuaxStdlib-node').string_map;
let list = require('@gehtsoft/LuaxStdlib-node').list;
class OrdersStorage {
    storage;
    constructor() {
        this.storage = new string_map();
    }
    getAllOrders() {
        return this.getOrders(new OrdersStorage.AllOrdersFilter(this));
    }
    getOrdersForTrade(tradeId) {
        return this.getOrders(OrdersStorage.TradeIdFilter.create(tradeId));
    }
    getOrdersForPrimaryOrderId(primaryOrderId) {
        return this.getOrders(OrdersStorage.PrimaryIdFilter.create(primaryOrderId));
    }
    getOrderById(id) {
        if (!this.storage.contains(id)) {
            return null;
        }
        return this.storage.get(id);
    }
    addOrder(order) {
        this.storage.set(order.getOrderId(), order);
    }
    removeOrder(id) {
        if (this.storage.contains(id)) {
            this.storage.remove(id);
        }
    }
    clear() {
        this.storage.clear();
    }
    getOrders(filter) {
        let length, i, keys, orders, order, result;
        keys = this.storage.keys();
        length = keys.length;
        orders = new list();
        for (i = 0; i <= length - 1; i += 1) {
            order = this.getOrderById(keys[i]);
            if (filter.isAppropriate(order)) {
                orders.add(order);
            }
        }
        result = new Array(orders.length());
        for (i = 0; i <= orders.length() - 1; i += 1) {
            result[i] = orders.get(i);
        }
        return result;
    }
}
module.exports = OrdersStorage
OrdersStorage.Filter = class {
    _owner_;
    constructor(_owner_) {
        this._owner_ = _owner_;
    }
    isAppropriate(order) {
        return false;
    }
}
OrdersStorage.AllOrdersFilter = class extends OrdersStorage.Filter {
    _owner_;
    constructor(_owner_) {
        super();
        this._owner_ = _owner_;
    }
    isAppropriate(order) {
        return true;
    }
}
OrdersStorage.TradeIdFilter = class extends OrdersStorage.Filter {
    tradeId;
    _owner_;
    constructor(_owner_) {
        super();
        this._owner_ = _owner_;
    }
    static create(tradeId) {
        let result;
        result = new OrdersStorage.TradeIdFilter(this);
        result.tradeId = tradeId;
        return result;
    }
    isAppropriate(order) {
        return this.tradeId == order.getTradeId();
    }
}
OrdersStorage.PrimaryIdFilter = class extends OrdersStorage.Filter {
    id;
    _owner_;
    constructor(_owner_) {
        super();
        this._owner_ = _owner_;
    }
    static create(id) {
        let result;
        result = new OrdersStorage.PrimaryIdFilter(this);
        result.id = id;
        return result;
    }
    isAppropriate(order) {
        return this.id == order.getPrimaryId();
    }
}
OrdersStorage.OrdersList = class extends list {
    _owner_;
    constructor(_owner_) {
        super();
        this._owner_ = _owner_;
    }
    add(order) {
        super.add(order);
    }
    toArray() {
        let i, result;
        result = new Array(super.length());
        for (i = 0; i <= super.length() - 1; i += 1) {
            result[i] = super.get(i);
        }
        return result;
    }
}
