'use strict';
let csvParser = require('@gehtsoft/LuaxStdlib-node').csvParser;
let stdlib = require('@gehtsoft/LuaxStdlib-node').stdlib;
let PriceHistoryItemBuilder = require('./PriceHistoryItemBuilder.js');
let DateTimeParser = require('./DateTimeParser.js');
let variantCast = require('@gehtsoft/LuaxStdlib-node').variantCast;
class PriceHistoryCsvParser {
    fieldParser;
    constructor() {
        this.fieldParser = new csvParser();
        this.fieldParser.valueSeparator = ";";
    }
    parse(line) {
        let parts, builder, offerLine;
        if (line == null) {
            return null;
        }
        offerLine = stdlib.trim(line);
        if (offerLine == "0" || stdlib.len(offerLine) == 0) {
            return null;
        }
        parts = this.fieldParser.splitLine(offerLine);
        if (parts.length < 10) {
            return null;
        }
        builder = new PriceHistoryItemBuilder();
        builder.setDate(DateTimeParser.parseDateTimeFromLongString(parts[0]));
        builder.setBidOpen(variantCast.castToReal(variantCast.fromString(parts[1])));
        builder.setBidClose(variantCast.castToReal(variantCast.fromString(parts[2])));
        builder.setBidHigh(variantCast.castToReal(variantCast.fromString(parts[3])));
        builder.setBidLow(variantCast.castToReal(variantCast.fromString(parts[4])));
        builder.setAskOpen(variantCast.castToReal(variantCast.fromString(parts[5])));
        builder.setAskClose(variantCast.castToReal(variantCast.fromString(parts[6])));
        builder.setAskHigh(variantCast.castToReal(variantCast.fromString(parts[7])));
        builder.setAskLow(variantCast.castToReal(variantCast.fromString(parts[8])));
        if (stdlib.len(parts[9]) == 0) {
            builder.setVolume(0);
        }
        else {
            builder.setVolume(variantCast.castToInt(variantCast.fromString(parts[9])));
        }
        return builder.build();
    }
}
module.exports = PriceHistoryCsvParser
