'use strict';
let LogManager = require('./LogManager.js');
let PriceTerminalCallbacksContainer = require('./PriceTerminalCallbacksContainer.js');
let ConnectionStatusManager = require('./ConnectionStatusManager.js');
let DXFeedOfferParametersController = require('./DXFeedOfferParametersController.js');
let TimeController = require('./TimeController.js');
let OfferUpdateAdapter = require('./OfferUpdateAdapter.js');
let PriceTerminalTypes = require('./PriceTerminalTypes.js');
let ConnectionStatus = require('./ConnectionStatus.js');
let GetInitializedPriceTerminalCallback = require('./GetInitializedPriceTerminalCallback.js');
let ExecutionTimeEvenUtil = require('./ExecutionTimeEvenUtil.js');
let ExecutionTimeEventName = require('./ExecutionTimeEventName.js');
let DXFeedReconnector = require('./DXFeedReconnector.js');
let MdtConnectedMessage = require('./MdtConnectedMessage.js');
class DXFeedPriceTerminalLazyInitializer {
    ssoTokenController;
    sessionStorage;
    commandFactory;
    connectionStatusManager;
    logger;
    priceTerminal;
    dxfeedConnectionFactory;
    dxfeedConnection;
    offerUpdateAdapter;
    systemSettingsProvider;
    instrumentsProvider;
    parametersController;
    dxfeedPriceHistoryMediatorFactory;
    priceTerminalCallbacksContainer;
    messageRouter;
    dxFeedConnectionStateListener;
    executionTimeEvent;
    dxFeedConnectCommandListener;
    dxFeedConnectCommand;
    mdtConnectionStatusManager;
    constructor() {
        this.logger = LogManager.getLogger();
        this.offerUpdateAdapter = null;
        this.dxfeedConnection = null;
        this.dxFeedConnectionStateListener = null;
        this.dxFeedConnectCommandListener = null;
        this.dxFeedConnectCommand = null;
        this.priceTerminalCallbacksContainer = new PriceTerminalCallbacksContainer();
        this.mdtConnectionStatusManager = new ConnectionStatusManager();
    }
    static create(commandFactory, sessionStorage, ssoTokenController, connectionStatusManager, dxfeedConnectionFactory, instrumentsProvider, priceTerminal, systemSettingsProvider, dxfeedPriceHistoryMediatorFactory, dxFeedNamesProvider, messageRouter) {
        let result;
        result = new DXFeedPriceTerminalLazyInitializer();
        result.commandFactory = commandFactory;
        result.ssoTokenController = ssoTokenController;
        result.sessionStorage = sessionStorage;
        result.connectionStatusManager = connectionStatusManager;
        result.dxfeedConnectionFactory = dxfeedConnectionFactory;
        result.priceTerminal = priceTerminal;
        result.mdtConnectionStatusManager.setTerminalName(priceTerminal.getName());
        result.systemSettingsProvider = systemSettingsProvider;
        result.instrumentsProvider = instrumentsProvider;
        result.messageRouter = messageRouter;
        result.dxfeedPriceHistoryMediatorFactory = dxfeedPriceHistoryMediatorFactory;
        result.parametersController = DXFeedOfferParametersController.create(priceTerminal, new TimeController(), dxFeedNamesProvider);
        result.offerUpdateAdapter = OfferUpdateAdapter.create(messageRouter, instrumentsProvider, result.parametersController);
        return result;
    }
    setConfigFlags(configFlags) {
        this.parametersController.setConfigFlags(configFlags);
    }
    setRawOffersStorage(rawOffersStorage) {
        this.parametersController.setRawOffersStorage(rawOffersStorage);
    }
    getDXFeedOfferParametersController() {
        return this.parametersController;
    }
    getPriceTerminalType() {
        return PriceTerminalTypes.DXFEED;
    }
    stop() {
        this.reset();
        this.mdtConnectionStatusManager.changeConnectionStatus(ConnectionStatus.DISCONNECTED);
    }
    reset() {
        if (this.dxFeedConnectionStateListener != null) {
            this.dxFeedConnectionStateListener.stop();
        }
        if (this.dxfeedConnection != null) {
            this.offerUpdateAdapter.stop();
            this.parametersController.stop();
            this.dxfeedConnection.close();
            this.dxfeedConnection = null;
        }
        if (this.dxFeedConnectCommand != null) {
            this.dxFeedConnectCommand.unsubscribeStatusChange(this.dxFeedConnectCommandListener);
        }
        this.priceTerminalCallbacksContainer.clear();
    }
    isInitialized() {
        return this.dxfeedConnection != null && this.dxfeedConnection.getState().isConnected();
    }
    getInitializedPriceTerminal(callback) {
        let toLogin;
        toLogin = this.priceTerminalCallbacksContainer.length() == 0;
        if (this.dxfeedConnection == null || !this.dxfeedConnection.getState().isConnected()) {
            this.priceTerminalCallbacksContainer.enqueue(callback);
            if (toLogin) {
                if (!this.mdtConnectionStatusManager.getConnectionStatus().isReconnecting()) {
                    this.mdtConnectionStatusManager.changeConnectionStatus(ConnectionStatus.CONNECTING);
                }
                this.loginToDXFeedPriceTerminal(this.priceTerminalCallbacksContainer);
            }
        }
        else {
            callback.onSuccess(this.dxfeedConnection);
        }
    }
    loginToDXFeedPriceTerminal(callback) {
        let url, getInitializedPriceTerminalCallback;
        getInitializedPriceTerminalCallback = GetInitializedPriceTerminalCallback.create(this.mdtConnectionStatusManager, callback);
        this.logger.debug("Send DxFeed connect command");
        url = this.getDxfeedUrl();
        this.executionTimeEvent = ExecutionTimeEvenUtil.eventStart(ExecutionTimeEventName.DXFeedTerminalLoginTime);
        this.dxfeedConnection = this.dxfeedConnectionFactory.createConnection();
        this.dxfeedConnection.setRestUrl(url);
        this.dxFeedConnectionStateListener = DXFeedReconnector.create(this.dxfeedConnection, this.mdtConnectionStatusManager, this.messageRouter, this);
        this.dxFeedConnectCommand = this.commandFactory.createDxFeedConnectCommand(this.ssoTokenController, this.dxfeedConnection, url);
        this.dxFeedConnectCommandListener = new DXFeedPriceTerminalLazyInitializer.DxFeedConnectCommandListener(this);
        this.dxFeedConnectCommandListener.setCallback(getInitializedPriceTerminalCallback);
        this.dxFeedConnectCommandListener.setInitializer(this);
        this.dxFeedConnectCommandListener.setMessageRouter(this.messageRouter);
        this.dxFeedConnectCommand.subscribeStatusChange(this.dxFeedConnectCommandListener);
        this.dxFeedConnectCommand.execute();
    }
    getDxfeedUrl() {
        let urls, i;
        urls = this.priceTerminal.getUrls();
        for (i = 0; i <= urls.length - 1; i += 1) {
            if (urls[i].getTerminalProtocol() == "dxfeed-cometd") {
                return urls[i].getUrl();
            }
        }
        return "";
    }
    getConnectionStatus() {
        return this.mdtConnectionStatusManager.getConnectionStatus();
    }
    getMdtId() {
        return this.priceTerminal.getName();
    }
    getPriceStreams() {
        return this.priceTerminal.getStreams();
    }
    connect() {
        this.getInitializedPriceTerminal(GetInitializedPriceTerminalCallback.create(this.mdtConnectionStatusManager, null));
    }
    disconnect() {
        this.stop();
    }
    subscribeConnectionStatusChange(listener) {
        this.mdtConnectionStatusManager.subscribeConnectionStatusChange(listener);
    }
}
module.exports = DXFeedPriceTerminalLazyInitializer
DXFeedPriceTerminalLazyInitializer.DxFeedConnectCommandListener = class {
    callback;
    initializer;
    messageRouter;
    _owner_;
    constructor(_owner_) {
        this._owner_ = _owner_;
    }
    setMessageRouter(messageRouter) {
        this.messageRouter = messageRouter;
    }
    setInitializer(initializer) {
        this.initializer = initializer;
    }
    setCallback(callback) {
        this.callback = callback;
    }
    onSuccess(message) {
        this._owner_.offerUpdateAdapter.start(this._owner_.dxfeedConnection);
        this._owner_.parametersController.setDxfeedPriceHistoryMediator(this._owner_.dxfeedPriceHistoryMediatorFactory.createMediator(this._owner_.dxfeedConnection));
        ExecutionTimeEvenUtil.eventStop(this._owner_.executionTimeEvent);
        this.callback.onSuccess(this._owner_.dxfeedConnection);
        this.messageRouter.publishNewMessage([MdtConnectedMessage.create(this._owner_.priceTerminal.getStreams(), false)]);
    }
    onError(error) {
        this.callback.onError(error);
    }
    onCancel() {
        return void(0);
    }
}
DXFeedPriceTerminalLazyInitializer.StoppableController = class {
    initializer;
    _owner_;
    constructor(_owner_) {
        this._owner_ = _owner_;
    }
    static create(initializer) {
        let result;
        result = new DXFeedPriceTerminalLazyInitializer.StoppableController(this);
        result.initializer = initializer;
        return result;
    }
    stop() {
        this.initializer.stop();
    }
}
