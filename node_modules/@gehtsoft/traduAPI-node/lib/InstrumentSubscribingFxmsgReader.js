'use strict';
let AFxmsgReader = require('./AFxmsgReader.js');
let csvParser = require('@gehtsoft/LuaxStdlib-node').csvParser;
let PdasMessageType = require('./PdasMessageType.js');
let PdasMessageFieldTag = require('./PdasMessageFieldTag.js');
let PdasRequestCommand = require('./PdasRequestCommand.js');
let PdasMessageValue = require('./PdasMessageValue.js');
let stdlib = require('@gehtsoft/LuaxStdlib-node').stdlib;
let list = require('@gehtsoft/LuaxStdlib-node').list;
let InstrumentSubscribingStatusMessageBuilder = require('./InstrumentSubscribingStatusMessageBuilder.js');
let StringValueObject = require('./StringValueObject.js');
class InstrumentSubscribingFxmsgReader extends AFxmsgReader {
    linesParser;
    csvParser;
    instrumentParser;
    constructor() {
        super();
        this.linesParser = new csvParser();
        this.linesParser.valueSeparator = "\n";
        this.csvParser = new csvParser();
        this.csvParser.valueSeparator = ",";
        this.instrumentParser = new csvParser();
        this.instrumentParser.valueSeparator = ";";
    }
    read(responseList, xmlRootNode, messages) {
        let i;
        if (messages == null || messages.length == 0) {
            return;
        }
        for (i = 0; i <= messages.length - 1; i += 1) {
            this.checkMessage(responseList, messages[i]);
        }
    }
    checkMessage(responseList, message) {
        if (message.getType() == PdasMessageType.FXCM_RESPONSE && message.getFieldValue(PdasMessageFieldTag.FXCM_COMMAND_ID) == PdasRequestCommand.INSTRUMENT_SUBSCRIBING) {
            this.findSubscribingStatus(responseList, message);
        }
    }
    findSubscribingStatus(responseList, message) {
        let statusStr, subscrListStr, requestId;
        statusStr = message.getList(PdasMessageFieldTag.FXCM_NO_PARAM).getGroupParamValueByParamName(PdasMessageValue.CLIENT_DAS);
        subscrListStr = message.getList(PdasMessageFieldTag.FXCM_NO_PARAM).getGroupParamValueByParamName(PdasMessageValue.CLIENT_SUBSCR_LST);
        requestId = message.getList(PdasMessageFieldTag.FXCM_NO_PARAM).getGroupParamValueByParamName(PdasMessageValue.CLIENT_QID);
        if (statusStr != null && stdlib.len(statusStr) > 0 && requestId != null && stdlib.len(requestId) > 0 && subscrListStr != null && stdlib.len(subscrListStr) > 0) {
            this.createSubscribingStatus(responseList, statusStr, subscrListStr, requestId);
        }
    }
    createSubscribingStatus(responseList, statusStr, subscrListStr, requestId) {
        let instrumentsWithError;
        instrumentsWithError = new list();
        this.processInstrumentList(responseList, requestId, statusStr, instrumentsWithError, true);
        this.processInstrumentList(responseList, requestId, subscrListStr, instrumentsWithError, false);
    }
    processInstrumentList(responseList, requestId, dataStr, instrumentsWithError, collectErrors) {
        let lines, instruments, items, i, y;
        lines = this.linesParser.splitLine(dataStr);
        for (i = 0; i <= lines.length - 1; i += 1) {
            if (i == 0 && lines[i] == "0") {
                continue;
            }
            instruments = this.instrumentParser.splitLine(lines[i]);
            for (y = 0; y <= instruments.length - 1; y += 1) {
                items = this.csvParser.splitLine(instruments[y]);
                if (items.length >= 2) {
                    if (!collectErrors && this.instrumentHasError(instrumentsWithError, stdlib.trim(items[0]))) {
                        continue;
                    }
                    this.createMessage(responseList, requestId, items, instrumentsWithError, collectErrors);
                }
            }
        }
    }
    instrumentHasError(instrumentsWithError, instrument) {
        let i;
        for (i = 0; i <= instrumentsWithError.length() - 1; i += 1) {
            if (instrumentsWithError.get(i).get() == instrument) {
                return true;
            }
        }
        return false;
    }
    createMessage(responseList, requestId, items, instrumentsWithError, collectErrors) {
        let builder, temp, subscribed;
        subscribed = false;
        temp = stdlib.trim(items[1]);
        if (temp == "T") {
            subscribed = true;
        }
        builder = new InstrumentSubscribingStatusMessageBuilder();
        temp = stdlib.trim(items[0]);
        builder.setOfferId(stdlib.trim(items[0]));
        builder.setRequestId(requestId);
        builder.setSubscribed(subscribed);
        if (items.length > 2) {
            builder.setError(stdlib.trim(items[2]));
            if (collectErrors) {
                instrumentsWithError.add(StringValueObject.create(temp));
            }
        }
        responseList.add(this.createLockedMessage(builder.build()));
    }
}
module.exports = InstrumentSubscribingFxmsgReader
