'use strict';
let JsonSocketCommunicator = require('./JsonSocketCommunicator.js');
let DxFeedReceiveQuotesCommand = require('./DxFeedReceiveQuotesCommand.js');
let DxFeedReceiveTimeSeriesCommand = require('./DxFeedReceiveTimeSeriesCommand.js');
let DXFeedConnectionStateManager = require('./DXFeedConnectionStateManager.js');
let LogManager = require('./LogManager.js');
let stdlib = require('@gehtsoft/LuaxStdlib-node').stdlib;
let DXFeedConnectionState = require('./DXFeedConnectionState.js');
let DxFeedHandshakeCommand = require('./DxFeedHandshakeCommand.js');
let DxFeedQuotesSubscriptionCommand = require('./DxFeedQuotesSubscriptionCommand.js');
let DxFeedSubscriptionCommand = require('./DxFeedSubscriptionCommand.js');
let DxFeedTimeSeriesSubscriptionCommand = require('./DxFeedTimeSeriesSubscriptionCommand.js');
let DxFeedHeartbeatCommand = require('./DxFeedHeartbeatCommand.js');
let DXFeedWebSocketStateListener = require('./DXFeedWebSocketStateListener.js');
class DXFeedConnection {
    authToken;
    url;
    logger;
    dxFeedHeartbeatCommand;
    dxFeedReceiveQuotesCommand;
    dxFeedReceiveTimeSeriesCommand;
    dXFeedConnectionStateManager;
    dxFeedWebSocketStateListener;
    dXFeedMessageFactory;
    clientId;
    jsonSocketCommunicator;
    socketCommunicator;
    restUrl;
    constructor() {
        this.authToken = "";
        this.url = "";
        this.clientId = "";
        this.dXFeedConnectionStateManager = new DXFeedConnectionStateManager();
        this.logger = LogManager.getLogger();
        this.dXFeedMessageFactory = null;
        this.dxFeedHeartbeatCommand = null;
        this.dxFeedReceiveQuotesCommand = null;
        this.dxFeedReceiveTimeSeriesCommand = null;
        this.dxFeedWebSocketStateListener = null;
    }
    static create(socketCommunicator, dXFeedMessageFactory) {
        let dXFeedConnection;
        dXFeedConnection = new DXFeedConnection();
        dXFeedConnection.dXFeedMessageFactory = dXFeedMessageFactory;
        dXFeedConnection.socketCommunicator = socketCommunicator;
        dXFeedConnection.jsonSocketCommunicator = JsonSocketCommunicator.create(socketCommunicator);
        dXFeedConnection.dxFeedReceiveQuotesCommand = DxFeedReceiveQuotesCommand.create(dXFeedConnection.jsonSocketCommunicator);
        dXFeedConnection.dxFeedReceiveTimeSeriesCommand = DxFeedReceiveTimeSeriesCommand.create(dXFeedConnection.jsonSocketCommunicator);
        return dXFeedConnection;
    }
    setRestUrl(wssUrl) {
        let index;
        index = stdlib.lastIndexOf(wssUrl, "/", false);
        this.restUrl = "http" + stdlib.substring(wssUrl, 2, index - 1) + "rest/events.json";
    }
    getRestUrl() {
        return this.restUrl;
    }
    setAuthToken(authToken) {
        this.authToken = authToken;
    }
    getAuthToken() {
        return this.authToken;
    }
    getState() {
        return this.dXFeedConnectionStateManager.getState();
    }
    connect(url) {
        let dxFeedHandshakeCommand;
        this.url = url;
        if (stdlib.len(url) == 0) {
            this.dXFeedConnectionStateManager.changeStateWithError(DXFeedConnectionState.DISCONNECTED, "DXFeed connection url is empty");
            return;
        }
        if (this.dxFeedReceiveQuotesCommand != null) {
            this.jsonSocketCommunicator.subscribeStateChange(this.dxFeedReceiveQuotesCommand);
        }
        if (this.dxFeedReceiveTimeSeriesCommand != null) {
            this.jsonSocketCommunicator.subscribeStateChange(this.dxFeedReceiveTimeSeriesCommand);
        }
        dxFeedHandshakeCommand = DxFeedHandshakeCommand.create(this.jsonSocketCommunicator, this.dXFeedMessageFactory, new DXFeedConnection.DxFeedHandshakeCommandCallback(this), this.logger);
        dxFeedHandshakeCommand.setAuthToken(this.authToken);
        this.dXFeedConnectionStateManager.changeState(DXFeedConnectionState.CONNECTING);
        this.jsonSocketCommunicator.connect(url);
    }
    close() {
        if (this.dxFeedHeartbeatCommand != null) {
            this.dxFeedHeartbeatCommand.stop();
        }
        this.jsonSocketCommunicator.unsubscribeStateChange(this.dxFeedReceiveQuotesCommand);
        this.jsonSocketCommunicator.unsubscribeStateChange(this.dxFeedReceiveTimeSeriesCommand);
        if (this.dxFeedWebSocketStateListener != null) {
            this.dxFeedWebSocketStateListener.stop();
        }
        this.dxFeedReceiveQuotesCommand.stop();
        this.dxFeedReceiveTimeSeriesCommand.stop();
        this.jsonSocketCommunicator.close();
        if (!this.getState().isDisconnected()) {
            this.dXFeedConnectionStateManager.changeState(DXFeedConnectionState.DISCONNECTED);
        }
    }
    subscribeStateChange(listener) {
        this.dXFeedConnectionStateManager.subscribe(listener);
    }
    unsubscribeStateChange(listener) {
        this.dXFeedConnectionStateManager.unsubscribe(listener);
    }
    subscribeForQuotes(symbols, callback) {
        let command;
        command = DxFeedQuotesSubscriptionCommand.create(this.jsonSocketCommunicator, this.dXFeedMessageFactory, callback, this.clientId, symbols, DxFeedSubscriptionCommand.SUBSCRIBE_COMMAND);
        command.execute();
    }
    unsubscribeFromQuotes(symbols, callback) {
        let command;
        command = DxFeedQuotesSubscriptionCommand.create(this.jsonSocketCommunicator, this.dXFeedMessageFactory, callback, this.clientId, symbols, DxFeedSubscriptionCommand.UNSUBSCRIBE_COMMAND);
        command.execute();
    }
    subscribeForTimeSeries(requests, callback) {
        let command;
        command = DxFeedTimeSeriesSubscriptionCommand.create(this.jsonSocketCommunicator, this.dXFeedMessageFactory, callback, this.clientId, requests, DxFeedSubscriptionCommand.SUBSCRIBE_COMMAND);
        command.execute();
    }
    unsubscribeFromTimeSeries(requests, callback) {
        let command;
        command = DxFeedTimeSeriesSubscriptionCommand.create(this.jsonSocketCommunicator, this.dXFeedMessageFactory, callback, this.clientId, requests, DxFeedSubscriptionCommand.UNSUBSCRIBE_COMMAND);
        command.execute();
    }
    subscribeToReceiveQuotes(listener) {
        this.dxFeedReceiveQuotesCommand.subscribe(listener);
    }
    unsubscribeFromReceiveQuotes(listener) {
        this.dxFeedReceiveQuotesCommand.unsubscribe(listener);
    }
    subscribeToReceiveTimeSeries(listener) {
        this.dxFeedReceiveTimeSeriesCommand.subscribe(listener);
    }
    unsubscribeFromReceiveTimeSeries(listener) {
        this.dxFeedReceiveTimeSeriesCommand.unsubscribe(listener);
    }
}
module.exports = DXFeedConnection
DXFeedConnection.DxFeedHandshakeCommandCallback = class {
    _owner_;
    constructor(_owner_) {
        this._owner_ = _owner_;
    }
    onSuccess(dxFeedHandshakeData) {
        this._owner_.clientId = dxFeedHandshakeData.getClientId();
        this._owner_.dXFeedConnectionStateManager.changeState(DXFeedConnectionState.CONNECTED);
        this._owner_.dxFeedHeartbeatCommand = DxFeedHeartbeatCommand.create(this._owner_.jsonSocketCommunicator, this._owner_.dXFeedMessageFactory, new DXFeedConnection.DxFeedHeartbeatCommandCallback(this._owner_), dxFeedHandshakeData.getClientId(), dxFeedHandshakeData.getHeartbeatInterval());
        this._owner_.dxFeedHeartbeatCommand.execute();
        this._owner_.dxFeedWebSocketStateListener = DXFeedWebSocketStateListener.create(this._owner_.dXFeedConnectionStateManager, this._owner_.socketCommunicator, this._owner_.dxFeedHeartbeatCommand);
    }
    onError(errorMessage) {
        this._owner_.dXFeedConnectionStateManager.changeStateWithError(DXFeedConnectionState.DISCONNECTED, errorMessage);
    }
}
DXFeedConnection.DxFeedHeartbeatCommandCallback = class {
    _owner_;
    constructor(_owner_) {
        this._owner_ = _owner_;
    }
    onError(errorMessage) {
        this._owner_.dXFeedConnectionStateManager.changeStateWithError(DXFeedConnectionState.DISCONNECTED, errorMessage);
    }
}
