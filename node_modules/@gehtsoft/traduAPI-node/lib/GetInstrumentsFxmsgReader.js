'use strict';
let AFxmsgReader = require('./AFxmsgReader.js');
let csvParser = require('@gehtsoft/LuaxStdlib-node').csvParser;
let InstrumentCsvParser = require('./InstrumentCsvParser.js');
let GetInstrumentsMessageBuilder = require('./GetInstrumentsMessageBuilder.js');
let PdasMessageFieldTag = require('./PdasMessageFieldTag.js');
let PdasMessageValue = require('./PdasMessageValue.js');
let PdasMessageType = require('./PdasMessageType.js');
let PdasRequestCommand = require('./PdasRequestCommand.js');
let InstrumentsList = require('./InstrumentsList.js');
class GetInstrumentsFxmsgReader extends AFxmsgReader {
    linesParser;
    instrumentCsvParser;
    constructor() {
        super();
        this.linesParser = new csvParser();
        this.linesParser.valueSeparator = "\n";
        this.instrumentCsvParser = new InstrumentCsvParser();
    }
    read(responseList, xmlRootNode, messages) {
        let data, requestId, i, getInstrumentsMessageBuilder;
        if (messages == null || messages.length == 0) {
            return;
        }
        getInstrumentsMessageBuilder = new GetInstrumentsMessageBuilder();
        for (i = 0; i <= messages.length - 1; i += 1) {
            if (messages[i].getType() == PdasMessageType.FXCM_RESPONSE && messages[i].getFieldValue(PdasMessageFieldTag.FXCM_COMMAND_ID) == PdasRequestCommand.GET_INSTRUMENTS) {
                data = messages[i].getList(PdasMessageFieldTag.FXCM_NO_PARAM).getGroupParamValueByParamName(PdasMessageValue.CLIENT_DAS);
                requestId = messages[i].getList(PdasMessageFieldTag.FXCM_NO_PARAM).getGroupParamValueByParamName(PdasMessageValue.CLIENT_QID);
                if (data != null && requestId != null) {
                    getInstrumentsMessageBuilder.addInstruments(this.parseInstruments(data));
                    getInstrumentsMessageBuilder.setRequestId(requestId);
                    responseList.add(this.createLockedMessage(getInstrumentsMessageBuilder.build()));
                }
            }
        }
    }
    parseInstruments(data) {
        let lines, i, instrumentsList, instrument;
        instrumentsList = new InstrumentsList();
        lines = this.linesParser.splitLine(data);
        for (i = 0; i <= lines.length - 1; i += 1) {
            instrument = this.instrumentCsvParser.parse(lines[i]);
            if (instrument != null) {
                instrumentsList.add(instrument);
            }
        }
        return instrumentsList;
    }
}
module.exports = GetInstrumentsFxmsgReader
