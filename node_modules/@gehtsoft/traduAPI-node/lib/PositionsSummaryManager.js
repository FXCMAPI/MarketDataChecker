'use strict';
let PositionsSummaryStorage = require('./PositionsSummaryStorage.js');
let DataManagerState = require('./DataManagerState.js');
let DataManagerStatePublisher = require('./DataManagerStatePublisher.js');
let CommonPublisher = require('./CommonPublisher.js');
let LogManager = require('./LogManager.js');
let PositionsSummaryCalculator = require('./PositionsSummaryCalculator.js');
let exception = require('@gehtsoft/LuaxStdlib-node').exception;
let FXConnectLiteErrorCodes = require('./FXConnectLiteErrorCodes.js');
let stdlib = require('@gehtsoft/LuaxStdlib-node').stdlib;
let MessageType = require('./MessageType.js');
//@@DocBrief("The class for getting access to position summarys data")
class PositionsSummaryManager {
    storage;
    messageRouter;
    state;
    stateChangePublisher;
    positionSummaryChangePublisher;
    connectionStatusManager;
    offersManager;
    openPositionsManager;
    instrumentsManager;
    toNotifyOnRefresh;
    calculator;
    openPositionsProvider;
    logger;
    receiveNewMessageListener;
    rawAccountsProvider;
    convertToSystemBaseCurrency;
    systemSettingsProvider;
    constructor() {
        this.storage = new PositionsSummaryStorage();
        this.state = new DataManagerState();
        this.stateChangePublisher = new DataManagerStatePublisher();
        this.positionSummaryChangePublisher = new CommonPublisher();
        this.toNotifyOnRefresh = false;
        this.convertToSystemBaseCurrency = false;
        this.setReceiveNewMessageListener();
    }
    static create(connectionStatusManager, messageRouter, instrumentsManager, offersManager, openPositionsManager, openPositionsProvider, rawAccountsProvider, toAccountCCYConverter, systemSettingsProvider) {
        let result;
        result = new PositionsSummaryManager();
        result.logger = LogManager.getLogger();
        result.connectionStatusManager = connectionStatusManager;
        result.messageRouter = messageRouter;
        result.offersManager = offersManager;
        result.openPositionsManager = openPositionsManager;
        result.instrumentsManager = instrumentsManager;
        result.openPositionsProvider = openPositionsProvider;
        result.rawAccountsProvider = rawAccountsProvider;
        result.systemSettingsProvider = systemSettingsProvider;
        result.calculator = new PositionsSummaryCalculator();
        result.calculator.setOffersManager(offersManager);
        result.calculator.setInstrumentManager(instrumentsManager);
        result.calculator.setOpenPositionsManager(openPositionsManager);
        result.calculator.setLogger(result.logger);
        result.calculator.setRawAccountsProvider(rawAccountsProvider);
        result.calculator.setToAccountCCYConverter(toAccountCCYConverter);
        result.calculator.setSystemSettingsProvider(systemSettingsProvider);
        result.subscribeOnManagers();
        return result;
    }
    subscribePositionsSummaryChange(listener) {
        if (listener == null) {
            this.logger.error("PositionsSummaryManager.subscribePositionsSummaryChange(): listener is not set");
            throw exception.create(FXConnectLiteErrorCodes.CODE_REQUIRED_PARAMETER_NOT_SET, "listener is not set");
        }
        this.positionSummaryChangePublisher.subscribe(listener);
    }
    unsubscribePositionsSummaryChange(listener) {
        if (listener == null) {
            this.logger.error("PositionsSummaryManager.unsubscribePositionsSummaryChange(): listener is not set");
            throw exception.create(FXConnectLiteErrorCodes.CODE_REQUIRED_PARAMETER_NOT_SET, "listener is not set");
        }
        this.positionSummaryChangePublisher.unsubscribe(listener);
    }
    getPositionsSummary(instrument) {
        let tradeIds;
        if (instrument == null || stdlib.len(instrument) == 0) {
            this.logger.error("PositionsSummaryManager.getPositionsSummary(): instrument is not set");
            throw exception.create(FXConnectLiteErrorCodes.CODE_REQUIRED_PARAMETER_NOT_SET, "instrument is not set");
        }
        this.logger.info("PositionsSummaryManager. Get positions summary by instrument: " + instrument);
        if (!this.storage.containsInstrument(instrument)) {
            return null;
        }
        tradeIds = this.storage.getTradeIds(instrument);
        return this.calculator.calculate(instrument, tradeIds, this.convertToSystemBaseCurrency);
    }
    getPositionsSummarySnapshot() {
        let instruments, result, i;
        this.logger.info("PositionsSummaryManager. Get positions summary snapshot");
        instruments = this.storage.getAllInstruments();
        result = new Array(instruments.length);
        for (i = 0; i <= instruments.length - 1; i += 1) {
            result[i] = this.getPositionsSummary(instruments[i]);
        }
        return result;
    }
    subscribeStateChange(listener) {
        if (listener == null) {
            this.logger.error("PositionsSummaryManager.subscribeStateChange(): listener is not set");
            throw exception.create(FXConnectLiteErrorCodes.CODE_REQUIRED_PARAMETER_NOT_SET, "listener is not set");
        }
        this.stateChangePublisher.subscribe(listener);
    }
    unsubscribeStateChange(listener) {
        if (listener == null) {
            this.logger.error("PositionsSummaryManager.unsubscribeStateChange(): listener is not set");
            throw exception.create(FXConnectLiteErrorCodes.CODE_REQUIRED_PARAMETER_NOT_SET, "listener is not set");
        }
        this.stateChangePublisher.unsubscribe(listener);
    }
    getState() {
        return this.state;
    }
    getBaseCurrency() {
        if (this.convertToSystemBaseCurrency) {
            return this.systemSettingsProvider.getBaseCurrency();
        }
        else {
            return this.rawAccountsProvider.getAllAccounts()[0].getBaseCurrency();
        }
    }
    notifyOnRefresh() {
        this.positionSummaryChangePublisher.notifyAction(PositionsSummaryManager.OnRefreshAction.create());
    }
    notifyOnChanged(instrument) {
        this.positionSummaryChangePublisher.notifyAction(PositionsSummaryManager.OnChangedAction.create(instrument));
    }
    notifyOnInsert(instrument) {
        this.positionSummaryChangePublisher.notifyAction(PositionsSummaryManager.OnInsertAction.create(instrument));
    }
    notifyOnDelete(instrument) {
        this.positionSummaryChangePublisher.notifyAction(PositionsSummaryManager.OnDeleteAction.create(instrument));
    }
    refresh() {
        this.toNotifyOnRefresh = true;
        this.logger.info("PositionsSummaryManager. Load all positions summary from server");
        if (this.getState().isLoading()) {
            this.logger.warning("PositionsSummaryManager. Manager not loaded yet");
            return;
        }
        if (!this.connectionStatusManager.getConnectionStatus().isConnected()) {
            this.logger.warning("PositionsSummaryManager. Session not connected");
            return;
        }
        this.checkAccounts();
        this.storageClear();
        this.notifyStateChange(DataManagerState.LOADING);
        this.checkLoaded();
    }
    checkAccounts() {
        let accounts, i, baseCurrency, currCurrency;
        accounts = this.rawAccountsProvider.getAllAccounts();
        if (accounts.length == 0) {
            this.convertToSystemBaseCurrency = true;
            return;
        }
        this.convertToSystemBaseCurrency = false;
        baseCurrency = "";
        for (i = 0; i <= accounts.length - 1; i += 1) {
            currCurrency = accounts[i].getBaseCurrency();
            if (currCurrency != baseCurrency && stdlib.len(baseCurrency) > 0) {
                this.convertToSystemBaseCurrency = true;
                return;
            }
            baseCurrency = currCurrency;
        }
    }
    checkLoaded() {
        if (this.openPositionsManager.getState().isLoaded() && this.offersManager.getState().isLoaded() && this.instrumentsManager.getState().isLoaded() && !this.getState().isLoaded()) {
            if (this.toNotifyOnRefresh) {
                this.fillData();
                this.notifyStateChange(DataManagerState.LOADED);
                this.notifyOnRefresh();
                this.toNotifyOnRefresh = false;
            }
        }
        else {
            if (!this.openPositionsManager.getState().isLoaded()) {
                this.storageClear();
            }
            if (this.getState().isLoaded()) {
                this.notifyStateChange(DataManagerState.NOT_LOADED);
            }
        }
    }
    storageClear() {
        this.storage.clear();
    }
    notifyStateChange(stateStatus) {
        this.logger.debug("PositionsSummaryManager. State status changed: " + (stateStatus).toString());
        this.state.setState(stateStatus);
        this.stateChangePublisher.notifyStateChange(this.state);
    }
    subscribeOnManagers() {
        let stateChangeListener;
        stateChangeListener = new PositionsSummaryManager.StateChangeListener(this);
        this.instrumentsManager.subscribeStateChange(stateChangeListener);
        this.openPositionsManager.subscribeStateChange(stateChangeListener);
        this.openPositionsManager.subscribeOpenPositionChange(new PositionsSummaryManager.OpenPositionChangeListener(this));
        this.offersManager.subscribeOfferChange(new PositionsSummaryManager.OfferChangeListener(this));
        this.offersManager.subscribeStateChange(stateChangeListener);
        this.messageRouter.subscribeNewMessageReceive(MessageType.Disconnected, this.receiveNewMessageListener);
    }
    setReceiveNewMessageListener() {
        this.receiveNewMessageListener = PositionsSummaryManager.ReceiveNewMessageListener.create(this);
    }
    getInstrumentByOfferId(offerId) {
        let instrument;
        if (offerId == null) {
            return null;
        }
        instrument = this.instrumentsManager.getInstrumentByOfferId(offerId);
        if (instrument == null) {
            return null;
        }
        return instrument.getSymbol();
    }
    fillData() {
        let openPositions, offerId, instrument, i;
        this.logger.debug("PositionsSummaryManager. Fill data");
        openPositions = this.openPositionsProvider.getInternalOpenPositionsSnapshot();
        for (i = 0; i <= openPositions.length - 1; i += 1) {
            offerId = openPositions[i].getOfferId();
            instrument = this.instrumentsManager.getInstrumentByOfferId(offerId);
            if (instrument != null) {
                this.storage.addOpenPosition(instrument.getSymbol(), openPositions[i].getTradeID());
            }
        }
    }
}
module.exports = PositionsSummaryManager
PositionsSummaryManager.ReceiveNewMessageListener = class {
    owner;
    _owner_;
    constructor(_owner_) {
        this._owner_ = _owner_;
    }
    static create(owner) {
        let instance;
        instance = new PositionsSummaryManager.ReceiveNewMessageListener(this);
        instance.owner = owner;
        return instance;
    }
    onNewMessageReceive(message) {
        if (message.getType() == MessageType.Disconnected) {
            this.owner.storageClear();
            if (this.owner.getState().isLoaded()) {
                this.owner.notifyStateChange(DataManagerState.NOT_LOADED);
            }
        }
    }
}
PositionsSummaryManager.StateChangeListener = class {
    _owner_;
    constructor(_owner_) {
        this._owner_ = _owner_;
    }
    onStateChange(state) {
        this._owner_.checkLoaded();
    }
}
PositionsSummaryManager.OnChangedAction = class {
    listener;
    instrument;
    _owner_;
    constructor(_owner_) {
        this._owner_ = _owner_;
    }
    static create(instrument) {
        let result;
        result = new PositionsSummaryManager.OnChangedAction(this);
        result.instrument = instrument;
        return result;
    }
    setListener(listener) {
        this.listener = listener;
    }
    execute() {
        this.listener.onChange(this.instrument);
    }
}
PositionsSummaryManager.OnInsertAction = class {
    listener;
    instrument;
    _owner_;
    constructor(_owner_) {
        this._owner_ = _owner_;
    }
    static create(instrument) {
        let result;
        result = new PositionsSummaryManager.OnInsertAction(this);
        result.instrument = instrument;
        return result;
    }
    setListener(listener) {
        this.listener = listener;
    }
    execute() {
        this.listener.onAdd(this.instrument);
    }
}
PositionsSummaryManager.OnDeleteAction = class {
    listener;
    instrument;
    _owner_;
    constructor(_owner_) {
        this._owner_ = _owner_;
    }
    static create(instrument) {
        let result;
        result = new PositionsSummaryManager.OnDeleteAction(this);
        result.instrument = instrument;
        return result;
    }
    setListener(listener) {
        this.listener = listener;
    }
    execute() {
        this.listener.onDelete(this.instrument);
    }
}
PositionsSummaryManager.OnRefreshAction = class {
    listener;
    _owner_;
    constructor(_owner_) {
        this._owner_ = _owner_;
    }
    static create() {
        let result;
        result = new PositionsSummaryManager.OnRefreshAction(this);
        return result;
    }
    setListener(listener) {
        this.listener = listener;
    }
    execute() {
        this.listener.onRefresh();
    }
}
PositionsSummaryManager.OfferChangeListener = class {
    _owner_;
    constructor(_owner_) {
        this._owner_ = _owner_;
    }
    onChange(offerInfo) {
        let symbol;
        symbol = this._owner_.getInstrumentByOfferId(offerInfo.getOfferId());
        if (symbol != null) {
            if (this._owner_.storage.containsInstrument(symbol)) {
                this._owner_.notifyOnChanged(symbol);
            }
        }
    }
    onAdd(offerInfo) {
        return void(0);
    }
}
PositionsSummaryManager.OpenPositionChangeListener = class {
    _owner_;
    constructor(_owner_) {
        this._owner_ = _owner_;
    }
    onChange(openPositionInfo) {
        let symbol;
        symbol = this._owner_.getInstrumentByOfferId(openPositionInfo.getOfferId());
        if (symbol != null) {
            if (this._owner_.storage.containsInstrument(symbol)) {
                this._owner_.notifyOnChanged(symbol);
            }
        }
    }
    onAdd(openPositionInfo) {
        let symbol, isNew;
        symbol = this._owner_.getInstrumentByOfferId(openPositionInfo.getOfferId());
        if (symbol != null) {
            isNew = !this._owner_.storage.containsInstrument(symbol);
            this._owner_.storage.addOpenPosition(symbol, openPositionInfo.getId());
            if (isNew) {
                this._owner_.notifyOnInsert(symbol);
            }
            else {
                this._owner_.notifyOnChanged(symbol);
            }
        }
    }
    onDelete(openPositionInfo) {
        let symbol;
        symbol = this._owner_.getInstrumentByOfferId(openPositionInfo.getOfferId());
        if (symbol != null) {
            if (this._owner_.storage.symbolHasOnlyOpenPosition(symbol, openPositionInfo.getId())) {
                this._owner_.storage.removeOpenPosition(symbol, openPositionInfo.getId());
                this._owner_.notifyOnDelete(symbol);
            }
            else {
                this._owner_.storage.removeOpenPosition(symbol, openPositionInfo.getId());
                this._owner_.notifyOnChanged(symbol);
            }
        }
    }
    onRefresh() {
        this._owner_.storageClear();
        this._owner_.fillData();
    }
}
