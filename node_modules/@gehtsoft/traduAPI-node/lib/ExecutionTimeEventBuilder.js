'use strict';
let stdlib = require('@gehtsoft/LuaxStdlib-node').stdlib;
let EventIdGenerator = require('./EventIdGenerator.js');
let EventManager = require('./EventManager.js');
let ErrorEvent = require('./ErrorEvent.js');
let ExecutionTimeEvent = require('./ExecutionTimeEvent.js');
class ExecutionTimeEventBuilder {
    static get NUMBER_OF_MILLISECONDS() { return 86400000; }
    startDate;
    stopDate;
    name;
    id;
    constructor() {
        this.startDate = stdlib.mkdate(1900, 1, 1);
        this.stopDate = stdlib.mkdate(1900, 1, 1);
        this.name = "";
        this.id = EventIdGenerator.getGenerator().getNextId();
    }
    start() {
        this.startDate = stdlib.nowlocal();
        EventManager.getLogger().performanceTraceStart(this.id, this.name);
    }
    stop() {
        this.stopDate = stdlib.nowlocal();
        EventManager.getLogger().performanceTraceFinish(this.id, this.name);
    }
    stopWithError(error) {
        this.stopDate = stdlib.nowlocal();
        EventManager.getLogger().performanceTraceFinishWithError(this.id, this.name);
        EventManager.getLogger().error(ErrorEvent.create(this.name + "Error", stdlib.nowlocal(), error));
    }
    setName(name) {
        this.name = name;
    }
    calculateDuration() {
        let startJdn, stopJdn, duration;
        startJdn = stdlib.toJdn(this.startDate);
        stopJdn = stdlib.toJdn(this.stopDate);
        duration = Math.trunc((stopJdn - startJdn) * ExecutionTimeEventBuilder.NUMBER_OF_MILLISECONDS);
        return duration;
    }
    static create(name) {
        let instance;
        instance = new ExecutionTimeEventBuilder();
        instance.name = name;
        return instance;
    }
    build() {
        let instance;
        instance = ExecutionTimeEvent.create(this.name, this.stopDate, this.calculateDuration());
        return instance;
    }
}
module.exports = ExecutionTimeEventBuilder
