'use strict';
let stdlib = require('@gehtsoft/LuaxStdlib-node').stdlib;
let TimeframeUnit = require('./TimeframeUnit.js');
let list = require('@gehtsoft/LuaxStdlib-node').list;
class PriceHistoryResponse {
    instrument;
    timeframe;
    count;
    historyStorage;
    lastBarDatetime;
    constructor() {
        this.historyStorage = new PriceHistoryResponse.PriceHistoryList(this);
        this.lastBarDatetime = stdlib.mkdate(1900, 1, 1);
    }
    getInstrument() {
        return this.instrument;
    }
    getTimeframe() {
        return this.timeframe;
    }
    getCount() {
        return this.count;
    }
    isBar() {
        return this.timeframe.getUnit() != TimeframeUnit.Tick;
    }
    getAsk(index) {
        return this.historyStorage.get(index).getAskClose();
    }
    getAskOpen(index) {
        return this.historyStorage.get(index).getAskOpen();
    }
    getAskClose(index) {
        return this.historyStorage.get(index).getAskClose();
    }
    getAskHigh(index) {
        return this.historyStorage.get(index).getAskHigh();
    }
    getAskLow(index) {
        return this.historyStorage.get(index).getAskLow();
    }
    getBid(index) {
        return this.historyStorage.get(index).getBidClose();
    }
    getBidOpen(index) {
        return this.historyStorage.get(index).getBidOpen();
    }
    getBidClose(index) {
        return this.historyStorage.get(index).getBidClose();
    }
    getBidHigh(index) {
        return this.historyStorage.get(index).getBidHigh();
    }
    getBidLow(index) {
        return this.historyStorage.get(index).getBidLow();
    }
    getDate(index) {
        return this.historyStorage.get(index).getDate();
    }
    getLastBarTime() {
        return this.lastBarDatetime;
    }
    getVolume(index) {
        return this.historyStorage.get(index).getVolume();
    }
}
module.exports = PriceHistoryResponse
PriceHistoryResponse.PriceHistoryList = class extends list {
    _owner_;
    constructor(_owner_) {
        super();
        this._owner_ = _owner_;
    }
    add(order) {
        super.add(order);
    }
    get(index) {
        return super.get(index);
    }
}
