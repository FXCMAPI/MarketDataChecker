'use strict';
let ConnectionStatusManager = require('./ConnectionStatusManager.js');
let ConnectionStatus = require('./ConnectionStatus.js');
class PdasPriceTerminalStatusManager {
    messageRouter;
    tradeSessionStatusManager;
    connectionMdtStatusManager;
    constructor() {
        this.messageRouter = null;
        this.connectionMdtStatusManager = new ConnectionStatusManager();
    }
    setNotifyDelayInterval(notifyDelayInterval) {
        this.connectionMdtStatusManager.setNotifyDelayInterval(notifyDelayInterval);
    }
    onConnectionError(error) {
        this.connectionMdtStatusManager.changeConnectionStatusWithError(ConnectionStatus.RECONNECTING, error);
    }
    getConnectionStatus() {
        return this.connectionMdtStatusManager.getConnectionStatus();
    }
    changeConnectionStatus(status) {
        this.connectionMdtStatusManager.changeConnectionStatus(status);
    }
    changeConnectionStatusWithError(status, error) {
        this.connectionMdtStatusManager.changeConnectionStatusWithError(status, error);
    }
    onSessionExpiredError() {
        this.connectionMdtStatusManager.changeConnectionStatusWithError(ConnectionStatus.RECONNECTING, "MDT_SESSION_EXPIRED");
    }
    onTradingSessionExpiredError() {
        this.connectionMdtStatusManager.changeConnectionStatusWithError(ConnectionStatus.DISCONNECTED, "TRADING_SESSION_EXPIRED");
    }
    onStartLogin() {
        if (this.connectionMdtStatusManager.getConnectionStatus().isDisconnected()) {
            this.connectionMdtStatusManager.changeConnectionStatus(ConnectionStatus.CONNECTING);
        }
    }
    onLoginError(error) {
        this.connectionMdtStatusManager.changeConnectionStatusWithError(ConnectionStatus.DISCONNECTED, error);
    }
    onReconnectSuccess() {
        this.connectionMdtStatusManager.changeConnectionStatus(ConnectionStatus.CONNECTED);
    }
    onReconnectError(error) {
        this.connectionMdtStatusManager.changeConnectionStatusWithError(ConnectionStatus.DISCONNECTED, error);
    }
    onLoginSuccess() {
        this.connectionMdtStatusManager.changeConnectionStatus(ConnectionStatus.CONNECTED);
    }
    subscribeConnectionStatusChange(listener) {
        this.connectionMdtStatusManager.subscribeConnectionStatusChange(listener);
    }
    unsubscribeConnectionStatusChange(listener) {
        this.connectionMdtStatusManager.unsubscribeConnectionStatusChange(listener);
    }
    static create(priceTerminalName, messageRouter, tradeSessionStatusManager) {
        let result;
        result = new PdasPriceTerminalStatusManager();
        result.messageRouter = messageRouter;
        result.tradeSessionStatusManager = tradeSessionStatusManager;
        result.connectionMdtStatusManager.setTerminalName(priceTerminalName);
        return result;
    }
}
module.exports = PdasPriceTerminalStatusManager
