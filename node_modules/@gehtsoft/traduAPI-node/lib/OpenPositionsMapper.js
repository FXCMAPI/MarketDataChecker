'use strict';
let RawOpenPositionBuilder = require('./RawOpenPositionBuilder.js');
let OpenPositionBuilder = require('./OpenPositionBuilder.js');
class OpenPositionsMapper {
    static copyRawOpenPosition(openPosition) {
        let builder;
        builder = new RawOpenPositionBuilder();
        builder.setTradeID(openPosition.getTradeID());
        builder.setAccountId(openPosition.getAccountId());
        builder.setAccountName(openPosition.getAccountName());
        builder.setAccountKind(openPosition.getAccountKind());
        builder.setOfferId(openPosition.getOfferId());
        builder.setAmount(openPosition.getAmount());
        builder.setBuySell(openPosition.getBuySell());
        builder.setOpenRate(openPosition.getOpenRate());
        builder.setOpenTime(openPosition.getOpenTime());
        builder.setOpenQuoteId(openPosition.getOpenQuoteId());
        builder.setOpenOrderId(openPosition.getOpenOrderId());
        builder.setOpenOrderReqId(openPosition.getOpenOrderReqId());
        builder.setOpenOrderRequestTXT(openPosition.getOpenOrderRequestTXT());
        builder.setCommission(openPosition.getCommission());
        builder.setRolloverInterest(openPosition.getRolloverInterest());
        builder.setTradeIdOrigin(openPosition.getTradeIdOrigin());
        builder.setValueDate(openPosition.getValueDate());
        builder.setParties(openPosition.getParties());
        builder.setDividends(openPosition.getDividends());
        return builder.build();
    }
    static copyOpenPosition(openPosition) {
        let builder;
        builder = new OpenPositionBuilder();
        builder.setTradeID(openPosition.getTradeID());
        builder.setAccountId(openPosition.getAccountId());
        builder.setAccountName(openPosition.getAccountName());
        builder.setAccountKind(openPosition.getAccountKind());
        builder.setOfferId(openPosition.getOfferId());
        builder.setAmount(openPosition.getAmount());
        builder.setBuySell(openPosition.getBuySell());
        builder.setOpenRate(openPosition.getOpenRate());
        builder.setOpenTime(openPosition.getOpenTime());
        builder.setOpenQuoteId(openPosition.getOpenQuoteId());
        builder.setOpenOrderId(openPosition.getOpenOrderId());
        builder.setOpenOrderReqId(openPosition.getOpenOrderReqId());
        builder.setOpenOrderRequestTXT(openPosition.getOpenOrderRequestTXT());
        builder.setCommission(openPosition.getCommission());
        builder.setRolloverInterest(openPosition.getRolloverInterest());
        builder.setTradeIdOrigin(openPosition.getTradeIdOrigin());
        builder.setValueDate(openPosition.getValueDate());
        builder.setParties(openPosition.getParties());
        builder.setDividends(openPosition.getDividends());
        return builder;
    }
    static combineToOpenPosition(rawOpenPosition, calculatedFields, marginFields) {
        let openPositionBuilder;
        openPositionBuilder = OpenPositionsMapper.copyOpenPosition(rawOpenPosition);
        if (calculatedFields != null) {
            openPositionBuilder.setPL(calculatedFields.getPL());
            openPositionBuilder.setPLPips(calculatedFields.getPLPips());
            openPositionBuilder.setGrossPL(calculatedFields.getGrossPL());
            openPositionBuilder.setNetPL(calculatedFields.getNetPL());
            openPositionBuilder.setCloseRate(calculatedFields.getCloseRate());
            openPositionBuilder.setStopRate(calculatedFields.getStopRate());
            openPositionBuilder.setLimitRate(calculatedFields.getLimitRate());
            openPositionBuilder.setStopOrderID(calculatedFields.getStopOrderId());
            openPositionBuilder.setLimitOrderID(calculatedFields.getLimitOrderId());
            openPositionBuilder.setStopMove(calculatedFields.getStopMove());
        }
        if (marginFields != null) {
            openPositionBuilder.setUsedMargin(marginFields.getUsedMargin());
        }
        return openPositionBuilder.build();
    }
}
module.exports = OpenPositionsMapper
