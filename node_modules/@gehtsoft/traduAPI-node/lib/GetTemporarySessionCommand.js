'use strict';
let CommandStatusPublisher = require('./CommandStatusPublisher.js');
let LogManager = require('./LogManager.js');
let MessageType = require('./MessageType.js');
let UniqueStringBuilder = require('./UniqueStringBuilder.js');
//@@DocBrief("The command for getting temporary trading session")
class GetTemporarySessionCommand {
    saltedPassword;
    login;
    applicationName;
    agent;
    messageFactory;
    terminal;
    requestNumberGenerator;
    publisher;
    messageRouter;
    receiveNewMessageListener;
    messageExecutor;
    logger;
    configFlags;
    constructor() {
        this.publisher = new CommandStatusPublisher();
        this.receiveNewMessageListener = new GetTemporarySessionCommand.ReceiveNewMessageListener(this);
        this.logger = LogManager.getLogger();
    }
    execute() {
        let messageExecutorCallback;
        this.logger.debug("Execute command 'GetTemporarySessionCommand'");
        messageExecutorCallback = new GetTemporarySessionCommand.MessageExecutorCallback(this);
        this.messageRouter.subscribeNewMessageReceive(MessageType.GetTemporarySession, this.receiveNewMessageListener);
        this.messageExecutor.execute(this.createTransportMessage(), messageExecutorCallback);
    }
    createTransportMessage() {
        return this.messageFactory.createGetTemporaryTradingSessionRequestMessage(this.saltedPassword, this.login, this.applicationName, this.agent, this.terminal, this.requestNumberGenerator, UniqueStringBuilder.getString(), this.configFlags);
    }
    subscribeStatusChange(callback) {
        this.publisher.subscribe(callback);
    }
    unsubscribeStatusChange(callback) {
        this.publisher.unsubscribe(callback);
    }
    stop() {
        this.messageRouter.unsubscribeNewMessageReceive(MessageType.GetTemporarySession, this.receiveNewMessageListener);
        this.messageExecutor.cancel();
    }
}
module.exports = GetTemporarySessionCommand
GetTemporarySessionCommand.ReceiveNewMessageListener = class {
    _owner_;
    constructor(_owner_) {
        this._owner_ = _owner_;
    }
    onNewMessageReceive(message) {
        let getTemporarySessionMessage, error;
        this._owner_.messageRouter.unsubscribeNewMessageReceive(MessageType.GetTemporarySession, this._owner_.receiveNewMessageListener);
        this._owner_.logger.debug("GetTemporarySessionCommand. Receive message: " + message.getType());
        if (message.getType() != MessageType.GetTemporarySession) {
            this._owner_.publisher.notifyError("Unexpected message type: " + message.getType());
        }
        else {
            getTemporarySessionMessage = message;
            error = getTemporarySessionMessage.getError();
            if (error != null) {
                this._owner_.publisher.notifyError(error);
            }
            else {
                this._owner_.publisher.notifySuccess(message);
            }
        }
    }
}
GetTemporarySessionCommand.MessageExecutorCallback = class {
    _owner_;
    constructor(_owner_) {
        this._owner_ = _owner_;
    }
    onSuccessSent() {
        this._owner_.logger.debug("Message 'GetTemporarySessionCommand' successfully sent");
    }
    onError(error) {
        this._owner_.logger.error("Send message 'GetTemporarySessionCommand' failed: " + error);
        this._owner_.messageRouter.unsubscribeNewMessageReceive(MessageType.GetTemporarySession, this._owner_.receiveNewMessageListener);
        this._owner_.publisher.notifyError(error);
    }
}
