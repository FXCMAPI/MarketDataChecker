'use strict';
let CommandStatusPublisher = require('./CommandStatusPublisher.js');
let LogManager = require('./LogManager.js');
class SendSingleCommandWithoutResponse {
    tradingSession;
    messageFactory;
    requestNumberGenerator;
    publisher;
    messageExecutor;
    logger;
    commandName;
    constructor() {
        this.publisher = new CommandStatusPublisher();
        this.logger = LogManager.getLogger();
        this.commandName = "SendSingleCommandWithoutResponse";
    }
    execute() {
        this.logger.debug("Execute command '" + this.commandName + "'");
        this.messageExecutor.execute(this.createTransportMessage(), new SendSingleCommandWithoutResponse.MessageExecutorCallback(this));
    }
    subscribeStatusChange(callback) {
        this.publisher.subscribe(callback);
    }
    unsubscribeStatusChange(callback) {
        this.publisher.unsubscribe(callback);
    }
    stop() {
        this.logger.debug("Stop command '" + this.commandName + "'");
        this.messageExecutor.cancel();
    }
    createTransportMessage() {
        return null;
    }
}
module.exports = SendSingleCommandWithoutResponse
SendSingleCommandWithoutResponse.MessageExecutorCallback = class {
    _owner_;
    constructor(_owner_) {
        this._owner_ = _owner_;
    }
    onSuccessSent() {
        this._owner_.logger.debug("Message '" + this._owner_.commandName + "' successfully sent");
        this._owner_.publisher.notifySuccess(null);
    }
    onError(error) {
        this._owner_.logger.error("Send message '" + this._owner_.commandName + "' failed: " + error);
        this._owner_.publisher.notifyError(error);
    }
}
