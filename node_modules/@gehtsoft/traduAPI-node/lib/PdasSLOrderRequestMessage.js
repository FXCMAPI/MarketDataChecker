'use strict';
let APdasRequestMessage = require('./APdasRequestMessage.js');
let PdasMessageFieldFactory = require('./PdasMessageFieldFactory.js');
let PdasMessageSerializer = require('./PdasMessageSerializer.js');
let PdasMessageFieldTag = require('./PdasMessageFieldTag.js');
let PdasMessageValue = require('./PdasMessageValue.js');
let variantCast = require('@gehtsoft/LuaxStdlib-node').variantCast;
let TrailingStopType = require('./TrailingStopType.js');
let stdlib = require('@gehtsoft/LuaxStdlib-node').stdlib;
let PdasRequestCommand = require('./PdasRequestCommand.js');
let PdasConstants = require('./PdasConstants.js');
let PdasTransportMessage = require('./PdasTransportMessage.js');
let TransportMessageType = require('./TransportMessageType.js');
class PdasSLOrderRequestMessage extends APdasRequestMessage {
    buildStopForOrder(tradingSession, baseSLOrderRequest, order, requestNumberGenerator, transactTime, isStop) {
        let orderRequestParams;
        orderRequestParams = PdasSLOrderRequestMessage.SLOrderRequestParams.create(order.getTradeId(), order.getBuySell(), order.getAccountId(), order.getOfferId(), order.getAmount(), baseSLOrderRequest.getRate(), baseSLOrderRequest.getPips(), baseSLOrderRequest.getCustomId(), isStop, baseSLOrderRequest.getTrailingType(), baseSLOrderRequest.getTrailingStep());
        return this.build(tradingSession, orderRequestParams, requestNumberGenerator, transactTime);
    }
    buildStopForTrade(tradingSession, baseSLOrderRequest, openPosition, requestNumberGenerator, transactTime, isStop) {
        let orderRequestParams;
        orderRequestParams = PdasSLOrderRequestMessage.SLOrderRequestParams.create(openPosition.getTradeID(), openPosition.getBuySell(), openPosition.getAccountId(), openPosition.getOfferId(), openPosition.getAmount(), baseSLOrderRequest.getRate(), baseSLOrderRequest.getPips(), baseSLOrderRequest.getCustomId(), isStop, baseSLOrderRequest.getTrailingType(), baseSLOrderRequest.getTrailingStep());
        return this.build(tradingSession, orderRequestParams, requestNumberGenerator, transactTime);
    }
    buildForOrder(tradingSession, baseSLOrderRequest, order, requestNumberGenerator, transactTime, isStop) {
        let orderRequestParams;
        orderRequestParams = PdasSLOrderRequestMessage.SLOrderRequestParams.create(order.getTradeId(), order.getBuySell(), order.getAccountId(), order.getOfferId(), order.getAmount(), baseSLOrderRequest.getRate(), baseSLOrderRequest.getPips(), baseSLOrderRequest.getCustomId(), isStop, 0, 0);
        return this.build(tradingSession, orderRequestParams, requestNumberGenerator, transactTime);
    }
    buildForTrade(tradingSession, baseSLOrderRequest, openPosition, requestNumberGenerator, transactTime, isStop) {
        let orderRequestParams;
        orderRequestParams = PdasSLOrderRequestMessage.SLOrderRequestParams.create(openPosition.getTradeID(), openPosition.getBuySell(), openPosition.getAccountId(), openPosition.getOfferId(), openPosition.getAmount(), baseSLOrderRequest.getRate(), baseSLOrderRequest.getPips(), baseSLOrderRequest.getCustomId(), isStop, 0, 0);
        return this.build(tradingSession, orderRequestParams, requestNumberGenerator, transactTime);
    }
    getSide(orderRequestParams) {
        let side;
        if (orderRequestParams.isStop()) {
            if (orderRequestParams.getBuySell() == "B") {
                side = "-1";
            }
            else {
                side = "1";
            }
        }
        else {
            if (orderRequestParams.getBuySell() == "B") {
                side = "1";
            }
            else {
                side = "-1";
            }
        }
        return side;
    }
    getBuySell(orderRequestParams) {
        if (orderRequestParams.getBuySell() == "B") {
            return "S";
        }
        return "B";
    }
    build(tradingSession, orderRequestParams, requestNumberGenerator, transactTime) {
        let pdasMessageSerializer, factory, pdasMessage, requestId, pdasMessageList, group, buySell, side, pegType, result, terminalUrl;
        buySell = this.getBuySell(orderRequestParams);
        side = this.getSide(orderRequestParams);
        factory = new PdasMessageFieldFactory();
        pdasMessageSerializer = new PdasMessageSerializer();
        terminalUrl = tradingSession.getTradingTerminal().getUrls()[0];
        requestId = tradingSession.getSessionId() + "-" + (requestNumberGenerator.getNextRequestNumber()).toString();
        pdasMessage = APdasRequestMessage.createMessage(factory, tradingSession, transactTime, requestId);
        pdasMessageList = factory.createList(PdasMessageFieldTag.FXCM_NO_PARAM);
        group = factory.createGroup();
        group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_NAME, PdasMessageValue.CLIENT_TRADE_ID));
        group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_VALUE, orderRequestParams.getTradeID()));
        pdasMessageList.addChild(group);
        group = factory.createGroup();
        group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_NAME, PdasMessageValue.CLIENT_STAGE));
        group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_VALUE, "C"));
        pdasMessageList.addChild(group);
        group = factory.createGroup();
        group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_NAME, PdasMessageValue.CLIENT_OFFER_ID));
        group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_VALUE, orderRequestParams.getOfferId()));
        pdasMessageList.addChild(group);
        group = factory.createGroup();
        group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_NAME, PdasMessageValue.CLIENT_ACCT_ID));
        group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_VALUE, orderRequestParams.getAccountId()));
        pdasMessageList.addChild(group);
        group = factory.createGroup();
        group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_NAME, PdasMessageValue.CLIENT_BUY_SELL));
        group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_VALUE, buySell));
        pdasMessageList.addChild(group);
        group = factory.createGroup();
        group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_NAME, PdasMessageValue.CLIENT_QUANTITY));
        group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_VALUE, variantCast.castToString(variantCast.fromInt(orderRequestParams.getAmount()))));
        pdasMessageList.addChild(group);
        group = factory.createGroup();
        group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_NAME, PdasMessageValue.CLIENT_SIDE));
        group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_VALUE, side));
        pdasMessageList.addChild(group);
        if (orderRequestParams.getRate() != 0) {
            group = factory.createGroup();
            group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_NAME, PdasMessageValue.CLIENT_RATE));
            group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_VALUE, variantCast.castToString(variantCast.fromReal(orderRequestParams.getRate()))));
            pdasMessageList.addChild(group);
        } else if (orderRequestParams.getPips() != 0) {
            group = factory.createGroup();
            group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_NAME, PdasMessageValue.CLIENT_PRICE_OFFSET_PIPS));
            group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_VALUE, variantCast.castToString(variantCast.fromReal(orderRequestParams.getPips()))));
            pdasMessageList.addChild(group);
            if (orderRequestParams.isStop()) {
                pegType = "1";
            }
            else {
                pegType = "0";
            }
            group = factory.createGroup();
            group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_NAME, PdasMessageValue.CLIENT_PEG_TYPE));
            group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_VALUE, pegType));
            pdasMessageList.addChild(group);
        }
        group = factory.createGroup();
        group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_NAME, PdasMessageValue.CLIENT_QID));
        group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_VALUE, requestId));
        pdasMessageList.addChild(group);
        if (orderRequestParams.isEnabledTrailing()) {
            group = factory.createGroup();
            group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_NAME, PdasMessageValue.CLIENT_TRAIL_UPDATE_PIPS_S));
            if (orderRequestParams.getTrailingType() == TrailingStopType.Fixed) {
                group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_VALUE, variantCast.castToString(variantCast.fromInt(orderRequestParams.getTrailingStep()))));
            }
            else {
                group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_VALUE, "1"));
            }
            pdasMessageList.addChild(group);
        }
        if (orderRequestParams.getCustomId() != null && stdlib.len(orderRequestParams.getCustomId()) > 0) {
            group = factory.createGroup();
            group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_NAME, PdasMessageValue.CLIENT_QTXT));
            group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_VALUE, orderRequestParams.getCustomId()));
            pdasMessageList.addChild(group);
        }
        pdasMessage.addChild(pdasMessageList);
        pdasMessage.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_COMMAND_ID, PdasRequestCommand.CREATE_ORDER));
        pdasMessage.addChild(factory.createStringField(PdasConstants.SID, tradingSession.getSessionId()));
        result = PdasTransportMessage.create(TransportMessageType.CreateOrder, this.createRequestUrl(terminalUrl), pdasMessageSerializer.serialize(pdasMessage));
        return result;
    }
}
module.exports = PdasSLOrderRequestMessage
PdasSLOrderRequestMessage.SLOrderRequestParams = class {
    tradeID;
    buySell;
    accountId;
    offerId;
    amount;
    rate;
    pips;
    customId;
    isStopField;
    trailingType;
    trailingStep;
    _owner_;
    constructor(_owner_) {
        this._owner_ = _owner_;
        this.tradeID = "";
        this.buySell = "";
        this.accountId = "";
        this.offerId = "";
        this.customId = "";
        this.rate = 0.0;
        this.pips = 0.0;
        this.amount = 0;
        this.trailingType = 0;
        this.trailingStep = 0;
        this.isStopField = false;
    }
    static create(tradeID, buySell, accountId, offerId, amount, rate, pips, customId, isStop, trailingType, trailingStep) {
        let orderRequestParams;
        orderRequestParams = new PdasSLOrderRequestMessage.SLOrderRequestParams(this);
        orderRequestParams.tradeID = tradeID;
        orderRequestParams.buySell = buySell;
        orderRequestParams.accountId = accountId;
        orderRequestParams.offerId = offerId;
        orderRequestParams.customId = customId;
        orderRequestParams.rate = rate;
        orderRequestParams.pips = pips;
        orderRequestParams.amount = amount;
        orderRequestParams.isStopField = isStop;
        orderRequestParams.trailingType = trailingType;
        orderRequestParams.trailingStep = trailingStep;
        return orderRequestParams;
    }
    getTradeID() {
        return this.tradeID;
    }
    getBuySell() {
        return this.buySell;
    }
    getAccountId() {
        return this.accountId;
    }
    getOfferId() {
        return this.offerId;
    }
    getAmount() {
        return this.amount;
    }
    getRate() {
        return this.rate;
    }
    getPips() {
        return this.pips;
    }
    getCustomId() {
        return this.customId;
    }
    isStop() {
        return this.isStopField;
    }
    isEnabledTrailing() {
        return this.trailingType != TrailingStopType.None;
    }
    getTrailingType() {
        return this.trailingType;
    }
    getTrailingStep() {
        return this.trailingStep;
    }
}
