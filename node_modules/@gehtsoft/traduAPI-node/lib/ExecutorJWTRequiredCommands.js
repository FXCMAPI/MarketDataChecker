'use strict';
let RequiredCommandDescriptor = require('./RequiredCommandDescriptor.js');
let RequiredCommandsList = require('./RequiredCommandsList.js');
let StringValueObject = require('./StringValueObject.js');
let list = require('@gehtsoft/LuaxStdlib-node').list;
class ExecutorJWTRequiredCommands {
    commandsList;
    messageRouter;
    receiveNewMessageListener;
    callback;
    constructor() {
        this.commandsList = new RequiredCommandsList();
        this.receiveNewMessageListener = new ExecutorJWTRequiredCommands.ReceiveNewMessageListener(this);
        this.callback = null;
    }
    addCommand(messageType, command) {
        this.commandsList.add(RequiredCommandDescriptor.create(messageType, command));
    }
    setCallback(callback) {
        this.callback = callback;
    }
    execute() {
        let i, command;
        for (i = 0; i <= this.commandsList.length() - 1; i += 1) {
            command = this.commandsList.get(i);
            this.receiveNewMessageListener.add(command.getMessageType());
            this.messageRouter.subscribeNewMessageReceive(command.getMessageType(), this.receiveNewMessageListener);
        }
        this.receiveNewMessageListener.setExpectedNumberOfMessage(this.commandsList.length());
        for (i = 0; i <= this.commandsList.length() - 1; i += 1) {
            command = this.commandsList.get(i);
            command.getCommand().execute();
        }
    }
    stop() {
        let i, command;
        for (i = 0; i <= this.commandsList.length() - 1; i += 1) {
            command = this.commandsList.get(i);
            command.getCommand().stop();
            this.messageRouter.unsubscribeNewMessageReceive(command.getMessageType(), this.receiveNewMessageListener);
        }
    }
    subscribeStatusChange(callback) {
        return void(0);
    }
    unsubscribeStatusChange(callback) {
        return void(0);
    }
    static create(messageRouter) {
        let result;
        result = new ExecutorJWTRequiredCommands();
        result.messageRouter = messageRouter;
        return result;
    }
}
module.exports = ExecutorJWTRequiredCommands
ExecutorJWTRequiredCommands.ReceiveNewMessageListener = class {
    messages;
    expectedNumberOfMessage;
    actualNumberOfMessage;
    _owner_;
    constructor(_owner_) {
        this._owner_ = _owner_;
        this.messages = new list();
        this.expectedNumberOfMessage = 0;
        this.actualNumberOfMessage = 0;
    }
    add(messageType) {
        this.messages.add(StringValueObject.create(messageType));
    }
    onNewMessageReceive(message) {
        if (this.isRequiredMessage(message.getType())) {
            this.actualNumberOfMessage = this.actualNumberOfMessage + 1;
            this._owner_.messageRouter.unsubscribeNewMessageReceive(message.getType(), this._owner_.receiveNewMessageListener);
            if (this.actualNumberOfMessage == this.expectedNumberOfMessage) {
                if (this._owner_.callback != null) {
                    this._owner_.callback.onAllResponsesReceived();
                }
            }
        }
    }
    isRequiredMessage(messageType) {
        let i, item;
        for (i = 0; i <= this.messages.length() - 1; i += 1) {
            item = this.messages.get(i).get();
            if (item == messageType) {
                return true;
            }
        }
        return false;
    }
    setExpectedNumberOfMessage(expectedNumberOfMessage) {
        this.expectedNumberOfMessage = expectedNumberOfMessage;
    }
}
