'use strict';
let LogManager = require('./LogManager.js');
let exception = require('@gehtsoft/LuaxStdlib-node').exception;
let FXConnectLiteErrorCodes = require('./FXConnectLiteErrorCodes.js');
let Instrument = require('./Instrument.js');
class RolloversCalculator {
    systemSettingsProvider;
    rolloverMarkupProvider;
    toAccountCCYConverter;
    static create(rolloverMarkupProvider, systemSettingsProvider, toAccountCCYConverter) {
        let result;
        if (rolloverMarkupProvider == null) {
            LogManager.getLogger().error("RolloversCalculator.create(): rolloverMarkupProvider is not set");
            throw exception.create(FXConnectLiteErrorCodes.CODE_REQUIRED_PARAMETER_NOT_SET, "rolloverMarkupProvider is not set");
        }
        if (systemSettingsProvider == null) {
            LogManager.getLogger().error("RolloversCalculator.create(): systemSettingsProvider is not set");
            throw exception.create(FXConnectLiteErrorCodes.CODE_REQUIRED_PARAMETER_NOT_SET, "systemSettingsProvider is not set");
        }
        if (toAccountCCYConverter == null) {
            LogManager.getLogger().error("RolloversCalculator.create(): toAccountCCYConverter is not set");
            throw exception.create(FXConnectLiteErrorCodes.CODE_REQUIRED_PARAMETER_NOT_SET, "toAccountCCYConverter is not set");
        }
        result = new RolloversCalculator();
        result.systemSettingsProvider = systemSettingsProvider;
        result.rolloverMarkupProvider = rolloverMarkupProvider;
        result.toAccountCCYConverter = toAccountCCYConverter;
        return result;
    }
    getRollover(instrument, account, isBuy) {
        let defaultBaseUnitSize, defaultRollover, arpNotSupported, markup, rolloverMarkupDescriptor;
        if (instrument == null) {
            return 0.0;
        }
        defaultBaseUnitSize = this.getDefaultBaseUnitSize(instrument, account);
        if (defaultBaseUnitSize == 0.0) {
            return 0.0;
        }
        defaultRollover = this.getDefaultRollover(instrument, isBuy, defaultBaseUnitSize, account);
        arpNotSupported = this.rolloverMarkupProvider.IsArpNotSupported();
        if (arpNotSupported) {
            return defaultRollover;
        }
        rolloverMarkupDescriptor = this.rolloverMarkupProvider.get(account.getRolloverProfileId(), instrument.getOfferId());
        if (rolloverMarkupDescriptor == null) {
            return defaultRollover;
        }
        if (isBuy) {
            markup = rolloverMarkupDescriptor.getRolloverBuyMarkup();
        }
        else {
            markup = rolloverMarkupDescriptor.getRolloverSellMarkup();
        }
        if (defaultRollover < 0) {
            return defaultRollover * (1 + markup);
        }
        else {
            return defaultRollover * (1 - markup);
        }
    }
    getDefaultRollover(instrument, isBuy, defaultBaseUnitSize, account) {
        let rollover;
        if (isBuy) {
            rollover = this.toAccountCCYConverter.convert(this.systemSettingsProvider.getBaseCurrency(), instrument.getBuyInterest(), account, "RolloversCalculator.getDefaultRollover()");
        }
        else {
            rollover = this.toAccountCCYConverter.convert(this.systemSettingsProvider.getBaseCurrency(), instrument.getSellInterest(), account, "RolloversCalculator.getDefaultRollover()");
        }
        if (instrument.getInstrumentType() == Instrument.TYPE_FOREX) {
            if (this.getDatabaseBUS() > 0) {
                return rollover * defaultBaseUnitSize / this.getDatabaseBUS();
            }
            else {
                return 0;
            }
        }
        else {
            return rollover * this.getUtpBUS(instrument);
        }
    }
    getDatabaseBUS() {
        return this.systemSettingsProvider.getBaseUnitSize();
    }
    getUtpBUS(instrument) {
        return instrument.getBaseUnitSize();
    }
    getDefaultBaseUnitSize(instrument, account) {
        return this.getBaseUnitSizeInternal(instrument, account);
    }
    getBaseUnitSizeInternal(instrument, account) {
        let instrBaseUnitSize, accountBaseUnitSize;
        instrBaseUnitSize = instrument.getBaseUnitSize();
        if (instrBaseUnitSize == 0) {
            instrBaseUnitSize = 1;
        }
        if (instrument.getInstrumentType() != Instrument.TYPE_FOREX) {
            return instrBaseUnitSize;
        }
        if (account != null) {
            accountBaseUnitSize = account.getBaseUnitSize();
        }
        else {
            accountBaseUnitSize = 0;
        }
        if (accountBaseUnitSize == 0) {
            accountBaseUnitSize = this.systemSettingsProvider.getBaseUnitSize();
        }
        if (accountBaseUnitSize > instrBaseUnitSize) {
            return accountBaseUnitSize;
        }
        return instrBaseUnitSize;
    }
}
module.exports = RolloversCalculator
