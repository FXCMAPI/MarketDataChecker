'use strict';
let ABothFxmsgReader = require('./ABothFxmsgReader.js');
let PdasRequestCommand = require('./PdasRequestCommand.js');
let SystemPropertiesMessageBuilder = require('./SystemPropertiesMessageBuilder.js');
let xmlNode = require('@gehtsoft/LuaxStdlib-node').xmlNode;
let XmlReaderUtil = require('./XmlReaderUtil.js');
let PdasMessageFieldTag = require('./PdasMessageFieldTag.js');
let csvParser = require('@gehtsoft/LuaxStdlib-node').csvParser;
let stdlib = require('@gehtsoft/LuaxStdlib-node').stdlib;
class SystemPropertiesFxmsgReader extends ABothFxmsgReader {
    getCommand() {
        return PdasRequestCommand.GET_SYSTEM_PROPERTIES;
    }
    processData(responseList, data) {
        responseList.add(this.createLockedMessage(this.processFoundData(data).build()));
    }
    processMessage(responseList, messageNode) {
        let i, child, responseMessage;
        responseMessage = new SystemPropertiesMessageBuilder();
        for (i = 0; i <= messageNode.getChildrenCount() - 1; i += 1) {
            child = messageNode.getChild(i);
            if (child.getType() == xmlNode.ELEMENT) {
                responseMessage = this.processList(child);
            }
            if (responseMessage != null) {
                responseList.add(responseMessage.build());
                break;
            }
        }
    }
    processList(l) {
        let j, responseMessage;
        if (XmlReaderUtil.isAttrEqualTo(l, "n", PdasMessageFieldTag.FXCM_NO_PARAM)) {
            for (j = 0; j <= l.getChildrenCount() - 1; j += 1) {
                responseMessage = this.processGroup(l.getChild(j));
                if (responseMessage != null) {
                    return responseMessage;
                }
            }
        }
        return null;
    }
    processGroup(g) {
        let fieldText;
        fieldText = this.getTextFromGroup(g, "EXTRA.3");
        if (fieldText != null) {
            return this.processFoundData(fieldText);
        }
        return null;
    }
    processFoundData(fieldText) {
        let csvParserInstance, statusTextSplit, k, responseMessage;
        responseMessage = new SystemPropertiesMessageBuilder();
        csvParserInstance = new csvParser();
        csvParserInstance.valueSeparator = "\n";
        statusTextSplit = csvParserInstance.splitLine(fieldText);
        if (statusTextSplit.length > 1) {
            for (k = 0; k <= statusTextSplit.length - 1; k += 1) {
                this.processField(statusTextSplit[k], csvParserInstance, responseMessage);
            }
        }
        return responseMessage;
    }
    processField(data, csvParserInstance, responseMessage) {
        let dataSplit, parameterName, parameterText;
        csvParserInstance.valueSeparator = ";";
        dataSplit = csvParserInstance.splitLine(data);
        if (dataSplit.length > 1) {
            parameterName = stdlib.trim(dataSplit[0]);
            parameterText = stdlib.trim(dataSplit[1]);
            responseMessage.setProperty(parameterName, parameterText);
        }
    }
}
module.exports = SystemPropertiesFxmsgReader
