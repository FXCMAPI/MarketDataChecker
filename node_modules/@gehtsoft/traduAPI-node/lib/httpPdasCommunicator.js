'use strict';
let buffer = require('@gehtsoft/LuaxStdlib-node').buffer;
let cryptography = require('@gehtsoft/LuaxStdlib-node').cryptography;
let stdlib = require('@gehtsoft/LuaxStdlib-node').stdlib;
let io = require('@gehtsoft/LuaxStdlib-node').io;

//@@DocBrief("HTTP Pdas communication class")
class StdlibHttpPdasCommunicator {
    httpCommunicator;
    isCors;
    sendMessage(url, fxmsg, callback) {
        let sourceBuffer = buffer.create(buffer.getEncodedStringLength(fxmsg, io.CP_ANSI)); 
        sourceBuffer.setEncodedString(0, fxmsg, io.CP_ANSI);
        let encodedBuffer = cryptography.DEFLATE(sourceBuffer, true);
        let deflate = encodedBuffer.toBase64();
        let targetUrl = url;

        this.httpCommunicator.setRequestHeader("PDAS_HEADER_DEFLATE", deflate);
        this.httpCommunicator.setRequestHeader("sdas_response-format", "1");
        this.httpCommunicator.setRequestHeader("sdas_serialization", "x");
        if (this.isCors) {
            this.httpCommunicator.setRequestHeader("Cache-Control", "no-cache, no-store, must-revalidate");
            this.httpCommunicator.setRequestHeader("Pragma", "no-cache");
            this.httpCommunicator.setRequestHeader("Expires", "0");
        } else {
            targetUrl = targetUrl + "?rnd=" + StdlibHttpPdasCommunicator.getUniqueString();
        }
        this.httpCommunicator.get(targetUrl, callback);
    }
    cancel() {
        this.httpCommunicator.cancel();
    }
    static create(httpCommunicatorParam, isCors) {
        let instance = new httpPdasCommunicator();
        instance.httpCommunicator = httpCommunicatorParam;
        instance.isCors = isCors;
        return instance;
    }
    static getUniqueString() {
        let temp, i;
        temp = (stdlib.toJdn(stdlib.nowlocal())).toString();
        i = stdlib.indexOf(temp, ".", false);
        if (i >= 0) {
            temp = stdlib.substring(temp, 0, i) + stdlib.substring(temp, i + 1, stdlib.len(temp) - i - 1);
        }
        i = stdlib.indexOf(temp, ",", false);
        if (i >= 0) {
            temp = stdlib.substring(temp, 0, i) + stdlib.substring(temp, i + 1, stdlib.len(temp) - i - 1);
        }
        return temp;
    }
}

let httpPdasCommunicator = StdlibHttpPdasCommunicator;
module.exports = httpPdasCommunicator;