'use strict';
let string_map = require('@gehtsoft/LuaxStdlib-node').string_map;
let list = require('@gehtsoft/LuaxStdlib-node').list;
class ClosedPositionsStorage {
    storage;
    constructor() {
        this.storage = new string_map();
    }
    getAllClosedPositions() {
        let length, i, keys, closedPosition, closedPositions;
        keys = this.storage.keys();
        length = keys.length;
        closedPositions = new Array(length);
        for (i = 0; i <= length - 1; i += 1) {
            closedPosition = this.getClosedPositionByTradeId(keys[i]);
            closedPositions[i] = closedPosition;
        }
        return closedPositions;
    }
    addClosedPosition(closedPosition) {
        this.storage.set(closedPosition.getTradeID(), closedPosition);
    }
    removeClosedPosition(id) {
        if (this.storage.contains(id)) {
            this.storage.remove(id);
        }
    }
    getClosedPositionByAccountId(accountId) {
        return this.getClosedPositionByAccountIdAndOffer(accountId, null);
    }
    getClosedPositionByAccountIdAndOffer(accountId, offerId) {
        let closedPositions, i, closedPositionsList;
        closedPositionsList = new ClosedPositionsStorage.ClosedPositionsList(this);
        closedPositions = this.getAllClosedPositions();
        for (i = 0; i <= closedPositions.length - 1; i += 1) {
            if (closedPositions[i].getAccountId() == accountId && (offerId == null || closedPositions[i].getOfferId() == offerId)) {
                closedPositionsList.add(closedPositions[i]);
            }
        }
        return closedPositionsList.toArray();
    }
    getClosedPositionByTradeId(tradeId) {
        if (!this.storage.contains(tradeId)) {
            return null;
        }
        return this.storage.get(tradeId);
    }
    clear() {
        this.storage.clear();
    }
}
module.exports = ClosedPositionsStorage
ClosedPositionsStorage.ClosedPositionsList = class extends list {
    _owner_;
    constructor(_owner_) {
        super();
        this._owner_ = _owner_;
    }
    add(closedPosition) {
        super.add(closedPosition);
    }
    toArray() {
        let i, result;
        result = new Array(super.length());
        for (i = 0; i <= super.length() - 1; i += 1) {
            result[i] = super.get(i);
        }
        return result;
    }
}
