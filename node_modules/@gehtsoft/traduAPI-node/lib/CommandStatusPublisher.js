'use strict';
let CommonPublisher = require('./CommonPublisher.js');
//@@DocBrief("The implementation of the publisher that manages subscriptions and notifies subscribers")
class CommandStatusPublisher {
    publisher;
    constructor() {
        this.publisher = new CommonPublisher();
    }
    subscribe(callback) {
        this.publisher.subscribe(callback);
    }
    unsubscribe(callback) {
        this.publisher.unsubscribe(callback);
    }
    notifySuccess(message) {
        this.publisher.notifyAction(CommandStatusPublisher.SuccessAction.create(message));
    }
    notifyError(error) {
        this.publisher.notifyAction(CommandStatusPublisher.ErrorAction.create(error));
    }
    notifyCancel() {
        this.publisher.notifyAction(new CommandStatusPublisher.CancelAction(this));
    }
}
module.exports = CommandStatusPublisher
CommandStatusPublisher.SuccessAction = class {
    listener;
    message;
    _owner_;
    constructor(_owner_) {
        this._owner_ = _owner_;
    }
    static create(message) {
        let result;
        result = new CommandStatusPublisher.SuccessAction(this);
        result.message = message;
        return result;
    }
    setListener(listener) {
        this.listener = listener;
    }
    execute() {
        this.listener.onSuccess(this.message);
    }
}
CommandStatusPublisher.ErrorAction = class {
    listener;
    error;
    _owner_;
    constructor(_owner_) {
        this._owner_ = _owner_;
    }
    static create(error) {
        let result;
        result = new CommandStatusPublisher.ErrorAction(this);
        result.error = error;
        return result;
    }
    setListener(listener) {
        this.listener = listener;
    }
    execute() {
        this.listener.onError(this.error);
    }
}
CommandStatusPublisher.CancelAction = class {
    listener;
    _owner_;
    constructor(_owner_) {
        this._owner_ = _owner_;
    }
    setListener(listener) {
        this.listener = listener;
    }
    execute() {
        this.listener.onCancel();
    }
}
