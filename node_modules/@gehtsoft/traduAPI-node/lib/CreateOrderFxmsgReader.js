'use strict';
let AFxmsgReader = require('./AFxmsgReader.js');
let csvParser = require('@gehtsoft/LuaxStdlib-node').csvParser;
let CreateOrderCsvParser = require('./CreateOrderCsvParser.js');
let CreateOrderMessageBuilder = require('./CreateOrderMessageBuilder.js');
let PdasMessageFieldTag = require('./PdasMessageFieldTag.js');
let PdasRequestCommand = require('./PdasRequestCommand.js');
let PdasMessageType = require('./PdasMessageType.js');
let PdasMessageValue = require('./PdasMessageValue.js');
let LogManager = require('./LogManager.js');
class CreateOrderFxmsgReader extends AFxmsgReader {
    linesParser;
    createOrderCsvParser;
    constructor() {
        super();
        this.linesParser = new csvParser();
        this.linesParser.valueSeparator = "\n";
        this.createOrderCsvParser = new CreateOrderCsvParser();
    }
    read(responseList, xmlRootNode, messages) {
        let i, createOrderMessageBuilder;
        if (messages == null || messages.length == 0) {
            return;
        }
        createOrderMessageBuilder = new CreateOrderMessageBuilder();
        for (i = 0; i <= messages.length - 1; i += 1) {
            if (messages[i].getFieldValue(PdasMessageFieldTag.FXCM_COMMAND_ID) == PdasRequestCommand.CREATE_ORDER) {
                if (this.processMessage(messages[i], responseList, createOrderMessageBuilder)) {
                    break;
                }
            }
        }
    }
    processMessage(message, responseList, createOrderMessageBuilder) {
        if (message.getType() == PdasMessageType.FXCM_RESPONSE) {
            if (this.processResponse(message, responseList, createOrderMessageBuilder)) {
                return true;
            }
        } else if (message.getType() == PdasMessageType.FXCM_REJECT && this.processReject(responseList, message, createOrderMessageBuilder)) {
            return true;
        }
        return false;
    }
    processResponse(message, responseList, createOrderMessageBuilder) {
        let data, orderId, innerList;
        innerList = message.getList(PdasMessageFieldTag.FXCM_NO_PARAM);
        data = innerList.getGroupParamValueByParamName("DAS");
        if (data != null) {
            orderId = this.parseOrderId(data);
            if (orderId != null) {
                createOrderMessageBuilder.setOrderId(orderId);
                createOrderMessageBuilder.setRequestTxt(innerList.getGroupParamValueByParamName(PdasMessageValue.CLIENT_QTXT));
                createOrderMessageBuilder.setOfferId(innerList.getGroupParamValueByParamName(PdasMessageValue.CLIENT_OFFER_ID));
                responseList.add(this.createLockedMessage(createOrderMessageBuilder.build()));
            }
            return true;
        }
        return false;
    }
    processReject(responseList, message, createOrderMessageBuilder) {
        let data, innerList;
        data = message.getFieldValue(PdasMessageFieldTag.FXCM_ERROR_DETAILS);
        if (data == null) {
            data = message.getFieldValue(PdasMessageFieldTag.FLD_TEXT);
        }
        if (data != null) {
            createOrderMessageBuilder.setError(data);
            innerList = message.getList(PdasMessageFieldTag.FXCM_NO_PARAM);
            if (innerList != null) {
                createOrderMessageBuilder.setRequestTxt(innerList.getGroupParamValueByParamName(PdasMessageValue.CLIENT_QTXT));
                createOrderMessageBuilder.setOfferId(innerList.getGroupParamValueByParamName(PdasMessageValue.CLIENT_OFFER_ID));
            }
            responseList.add(this.createLockedMessage(createOrderMessageBuilder.build()));
            return true;
        }
        return false;
    }
    parseOrderId(data) {
        let lines, i, orderId;
        lines = this.linesParser.splitLine(data);
        for (i = 0; i <= lines.length - 1; i += 1) {
            orderId = this.createOrderCsvParser.parse(lines[i]);
            if (orderId != null) {
                return orderId;
            }
        }
        LogManager.getLogger().error("CreateOrderFxmsgReader. Order ID not found in FXCM response: " + data);
        return null;
    }
}
module.exports = CreateOrderFxmsgReader
