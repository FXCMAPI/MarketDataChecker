'use strict';
let csvParser = require('@gehtsoft/LuaxStdlib-node').csvParser;
let stdlib = require('@gehtsoft/LuaxStdlib-node').stdlib;
let InstrumentUpdateBuilder = require('./InstrumentUpdateBuilder.js');
let StringUtil = require('./StringUtil.js');
let FieldChangeChecker = require('./FieldChangeChecker.js');
class InstrumentCsvParser {
    fieldParser;
    constructor() {
        this.fieldParser = new csvParser();
        this.fieldParser.valueSeparator = ";";
    }
    parse(line) {
        let parts, builder, instrumentLine, currency, data, i;
        if (line == null) {
            return null;
        }
        instrumentLine = stdlib.trim(line);
        if (instrumentLine == "0" || stdlib.len(instrumentLine) == 0) {
            return null;
        }
        parts = this.fieldParser.splitLine(instrumentLine);
        builder = new InstrumentUpdateBuilder();
        builder.setOfferId(parts[0]);
        builder.setSymbol(parts[9]);
        builder.setContractCurrency(parts[10]);
        builder.setDigits(parts[12]);
        builder.setPointSize(parts[13]);
        builder.setInstrumentType(parts[21]);
        builder.setTradingStatus(parts[33]);
        builder.setContractMultiplier(parts[25]);
        builder.setSellInterest(parts[5]);
        builder.setBuyInterest(parts[4]);
        builder.setSubscriptionStatus(parts[18]);
        builder.setMaxQuantity(parts[31]);
        builder.setMinQuantity(parts[32]);
        builder.setBaseUnitSize(parts[36]);
        builder.setSortOrder(parts[14]);
        builder.setBidAdjustment(parts[15]);
        builder.setAskAdjustment(parts[16]);
        builder.setPriceStreamId(parts[22]);
        builder.setConditionDistStop(parts[27]);
        builder.setConditionDistLimit(parts[28]);
        builder.setConditionDistEntryStop(parts[29]);
        builder.setConditionDistEntryLimit(parts[30]);
        builder.setMMR(parts[17]);
        if (parts.length >= 47 && parts[46] != null && stdlib.len(stdlib.trim(parts[46])) > 0) {
            builder.setDividendBuy(parts[46]);
        }
        if (parts.length >= 48 && parts[47] != null && stdlib.len(stdlib.trim(parts[47])) > 0) {
            builder.setDividendSell(parts[47]);
        }
        if (parts.length >= 49 && parts[48] != null && stdlib.len(stdlib.trim(parts[48])) > 0 && FieldChangeChecker.isFieldChange(parts[48])) {
            currency = StringUtil.split(parts[48], ",");
            for (i = 0; i <= currency.length - 1; i += 1) {
                if (currency[i] != null && stdlib.len(stdlib.trim(currency[i])) > 0 && stdlib.indexOf(currency[i], ":", false) > -1) {
                    data = StringUtil.split(currency[i], ":");
                    builder.setMMRByCurrency(data[0], data[1]);
                }
            }
        }
        return builder.build();
    }
}
module.exports = InstrumentCsvParser
