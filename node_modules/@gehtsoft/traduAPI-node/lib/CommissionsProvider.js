'use strict';
let LogManager = require('./LogManager.js');
class CommissionsProvider {
    accountCommissionsManager;
    rawAccountsProvider;
    logger;
    offersProvider;
    constructor() {
        this.accountCommissionsManager = null;
        this.rawAccountsProvider = null;
        this.offersProvider = null;
        this.logger = LogManager.getLogger();
    }
    setCommissionsManager(accountCommissionsManager) {
        this.accountCommissionsManager = accountCommissionsManager;
    }
    setAccountsProvider(rawAccountsProvider) {
        this.rawAccountsProvider = rawAccountsProvider;
    }
    setOffersProvider(offersProvider) {
        this.offersProvider = offersProvider;
    }
    getCloseCommission(openPosition) {
        let accountId, account, buySell, offer;
        if (this.accountCommissionsManager == null || this.rawAccountsProvider == null || this.offersProvider == null) {
            this.logger.warning("CommissionsProvider: AccountCommissionsManager or RawAccountsProvider  or OffersProvider equal nil.");
            return 0.0;
        }
        if (!this.accountCommissionsManager.getState().isLoaded()) {
            this.logger.warning("CommissionsProvider: AccountCommissionsManager has not state 'loaded'.");
            return 0.0;
        }
        if (openPosition == null) {
            this.logger.warning("CommissionsProvider: openPosition is nil.");
            return 0.0;
        }
        accountId = openPosition.getAccountId();
        account = this.rawAccountsProvider.getAccountById(accountId);
        if (account == null) {
            this.logger.warning("CommissionsProvider: Account " + accountId + " is not found");
            return 0.0;
        }
        offer = this.offersProvider.getInternalOfferById(openPosition.getOfferId());
        if (offer == null) {
            this.logger.warning("CommissionsProvider: Offer " + openPosition.getOfferId() + " is not found");
            return 0.0;
        }
        if (openPosition.getBuySell() == "B") {
            buySell = "S";
        }
        else {
            buySell = "B";
        }
        return this.accountCommissionsManager.getCloseCommission(offer, account, openPosition.getAmount(), buySell, 0.0);
    }
}
module.exports = CommissionsProvider
