'use strict';
let string_map = require('@gehtsoft/LuaxStdlib-node').string_map;
let list = require('@gehtsoft/LuaxStdlib-node').list;
//@@DocBrief("class provides access to a collection of rollover markup levels information")
class AccountCommissionsStorage {
    storage;
    constructor() {
        this.storage = new string_map();
    }
    clear() {
        this.storage.clear();
    }
    addAccountCommissions(accountCommisions) {
        let i;
        for (i = 0; i <= accountCommisions.length - 1; i += 1) {
            this.addAccountCommission(accountCommisions[i]);
        }
    }
    makeKey(acctId, offerId) {
        return acctId + "---" + offerId;
    }
    addAccountCommission(accountCommision) {
        let subStorage, key;
        key = this.makeKey(accountCommision.getAcctId(), accountCommision.getOfferId());
        if (!this.storage.contains(key)) {
            subStorage = new list();
            this.storage.set(key, subStorage);
        }
        else {
            subStorage = this.storage.get(key);
        }
        subStorage.add(accountCommision);
    }
    findAccountCommissions(acctId, offerId) {
        let subStorage, key, retval, i;
        key = this.makeKey(acctId, offerId);
        if (!this.storage.contains(key)) {
            return null;
        }
        else {
            subStorage = this.storage.get(key);
            retval = new Array(subStorage.length());
            for (i = 0; i <= subStorage.length() - 1; i += 1) {
                retval[i] = subStorage.get(i);
            }
            return retval;
        }
    }
    clearAccountCommissions(acctId, offerId) {
        let subStorage, key;
        key = this.makeKey(acctId, offerId);
        if (!this.storage.contains(key)) {
            return;
        }
        else {
            subStorage = this.storage.get(key);
            subStorage.clear();
        }
    }
}
module.exports = AccountCommissionsStorage
