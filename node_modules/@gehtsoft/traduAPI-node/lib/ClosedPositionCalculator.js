'use strict';
let LogManager = require('./LogManager.js');
let exception = require('@gehtsoft/LuaxStdlib-node').exception;
let FXConnectLiteErrorCodes = require('./FXConnectLiteErrorCodes.js');
let ClosedPositionCalculatedFieldsBuilder = require('./ClosedPositionCalculatedFieldsBuilder.js');
let stdlib = require('@gehtsoft/LuaxStdlib-node').stdlib;
class ClosedPositionCalculator {
    instrumentProvider;
    calculate(closedPosition) {
        let builder, instrument, pointSize;
        if (closedPosition == null) {
            LogManager.getLogger().error("ClosedPositionCalculator.calculate(): closedPosition is not set");
            throw exception.create(FXConnectLiteErrorCodes.CODE_REQUIRED_PARAMETER_NOT_SET, "closedPosition is not set");
        }
        builder = new ClosedPositionCalculatedFieldsBuilder();
        instrument = this.instrumentProvider.getInstrumentByOfferId(closedPosition.getOfferId());
        if (instrument != null) {
            pointSize = instrument.getPointSize();
        }
        else {
            throw exception.create(0, "instrument not set");
        }
        builder.setPL(this.calculatePL(closedPosition, pointSize));
        builder.setPLPips(this.calculatePLPips(closedPosition, pointSize));
        builder.setNetPL(this.calculateNetPL(closedPosition));
        return builder.build();
    }
    static create(instrumentProvider) {
        let result;
        if (instrumentProvider == null) {
            LogManager.getLogger().error("ClosedPositionCalculator.create(): instrumentProvider is not set");
            throw exception.create(FXConnectLiteErrorCodes.CODE_REQUIRED_PARAMETER_NOT_SET, "instrumentProvider is not set");
        }
        result = new ClosedPositionCalculator();
        result.instrumentProvider = instrumentProvider;
        return result;
    }
    calculateNetPL(closedPosition) {
        return closedPosition.getGrossPL() + closedPosition.getRolloverInterest() - stdlib.abs(closedPosition.getCommission()) + stdlib.abs(closedPosition.getDividends());
    }
    calculatePLPips(closedPosition, pointSize) {
        let plPips;
        if (closedPosition.getBuySell() == "B") {
            if (pointSize != 0.0) {
                plPips = (closedPosition.getCloseRate() - closedPosition.getOpenRate()) / pointSize;
            }
            else {
                plPips = 0.0;
            }
        }
        else {
            if (pointSize != 0.0) {
                plPips = (closedPosition.getOpenRate() - closedPosition.getCloseRate()) / pointSize;
            }
            else {
                plPips = 0.0;
            }
        }
        return plPips;
    }
    calculatePL(closedPosition, pointSize) {
        let pl;
        if (closedPosition.getBuySell() == "B") {
            if (pointSize != 0.0) {
                pl = closedPosition.getCloseRate() - closedPosition.getOpenRate();
            }
            else {
                pl = 0.0;
            }
        }
        else {
            if (pointSize != 0.0) {
                pl = closedPosition.getOpenRate() - closedPosition.getCloseRate();
            }
            else {
                pl = 0.0;
            }
        }
        return pl;
    }
}
module.exports = ClosedPositionCalculator
