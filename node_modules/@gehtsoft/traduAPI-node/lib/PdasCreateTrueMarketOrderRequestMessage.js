'use strict';
let APdasRequestMessage = require('./APdasRequestMessage.js');
let PdasMessageFieldFactory = require('./PdasMessageFieldFactory.js');
let PdasMessageSerializer = require('./PdasMessageSerializer.js');
let PdasMessageFieldTag = require('./PdasMessageFieldTag.js');
let PdasMessageValue = require('./PdasMessageValue.js');
let variantCast = require('@gehtsoft/LuaxStdlib-node').variantCast;
let DateTimeParser = require('./DateTimeParser.js');
let stdlib = require('@gehtsoft/LuaxStdlib-node').stdlib;
let PdasRequestCommand = require('./PdasRequestCommand.js');
let PdasConstants = require('./PdasConstants.js');
let PdasTransportMessage = require('./PdasTransportMessage.js');
let TransportMessageType = require('./TransportMessageType.js');
let TrailingStopType = require('./TrailingStopType.js');
class PdasCreateTrueMarketOrderRequestMessage extends APdasRequestMessage {
    build(tradingSession, marketOrderRequest, clientRate, pointSize, requestNumberGenerator, transactTime, timeController) {
        let pdasMessageSerializer, factory, pdasMessage, requestId, pdasMessageList, group, result, terminalUrl, clientRateStr;
        factory = new PdasMessageFieldFactory();
        pdasMessageSerializer = new PdasMessageSerializer();
        terminalUrl = tradingSession.getTradingTerminal().getUrls()[0];
        requestId = tradingSession.getSessionId() + "-" + (requestNumberGenerator.getNextRequestNumber()).toString();
        pdasMessage = APdasRequestMessage.createMessage(factory, tradingSession, transactTime, requestId);
        pdasMessageList = factory.createList(PdasMessageFieldTag.FXCM_NO_PARAM);
        group = factory.createGroup();
        group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_NAME, PdasMessageValue.CLIENT_STAGE));
        group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_VALUE, "O"));
        pdasMessageList.addChild(group);
        group = factory.createGroup();
        group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_NAME, PdasMessageValue.CLIENT_OFFER_ID));
        group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_VALUE, marketOrderRequest.getOfferId()));
        pdasMessageList.addChild(group);
        group = factory.createGroup();
        group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_NAME, PdasMessageValue.CLIENT_ACCT_ID));
        group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_VALUE, marketOrderRequest.getAccountId()));
        pdasMessageList.addChild(group);
        group = factory.createGroup();
        group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_NAME, PdasMessageValue.CLIENT_BUY_SELL));
        group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_VALUE, marketOrderRequest.getBuySell()));
        pdasMessageList.addChild(group);
        group = factory.createGroup();
        group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_NAME, PdasMessageValue.CLIENT_QUANTITY));
        group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_VALUE, variantCast.castToString(variantCast.fromInt(marketOrderRequest.getAmount()))));
        pdasMessageList.addChild(group);
        clientRateStr = variantCast.castToString(variantCast.fromReal(clientRate));
        this.addRates(factory, pdasMessageList, marketOrderRequest, clientRate, clientRateStr, pointSize);
        group = factory.createGroup();
        group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_NAME, PdasMessageValue.CLIENT_CLIENTRATE));
        group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_VALUE, clientRateStr));
        pdasMessageList.addChild(group);
        if (marketOrderRequest.getTimeInForce() != null && stdlib.len(marketOrderRequest.getTimeInForce()) > 0) {
            group = factory.createGroup();
            group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_NAME, PdasMessageValue.CLIENT_TIME_IN_FORCE));
            group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_VALUE, marketOrderRequest.getTimeInForce()));
            pdasMessageList.addChild(group);
            if (marketOrderRequest.getTimeInForce() == "GTD") {
                group = factory.createGroup();
                group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_NAME, PdasMessageValue.CLIENT_EXPIRE_DT));
                group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_VALUE, DateTimeParser.toDateTimeString(timeController.toServerTime(marketOrderRequest.getExpirationDate()))));
                pdasMessageList.addChild(group);
            }
        }
        if (marketOrderRequest.getCustomId() != null && stdlib.len(marketOrderRequest.getCustomId()) > 0) {
            group = factory.createGroup();
            group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_NAME, PdasMessageValue.CLIENT_QTXT));
            group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_VALUE, marketOrderRequest.getCustomId()));
            pdasMessageList.addChild(group);
        }
        this.processStopOrderSet(factory, marketOrderRequest, pdasMessageList);
        this.processLimitOrderSet(factory, marketOrderRequest, pdasMessageList);
        group = factory.createGroup();
        group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_NAME, PdasMessageValue.CLIENT_QID));
        group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_VALUE, requestId));
        pdasMessageList.addChild(group);
        pdasMessage.addChild(pdasMessageList);
        pdasMessage.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_COMMAND_ID, PdasRequestCommand.CREATE_ORDER));
        pdasMessage.addChild(factory.createStringField(PdasConstants.SID, tradingSession.getSessionId()));
        result = PdasTransportMessage.create(TransportMessageType.CreateOrder, this.createRequestUrl(terminalUrl), pdasMessageSerializer.serialize(pdasMessage));
        return result;
    }
    processStopOrderSet(factory, marketOrderRequest, pdasMessageList) {
        let group;
        if (marketOrderRequest.isStopOrderSet()) {
            if (marketOrderRequest.getStopPips() != 0) {
                group = factory.createGroup();
                group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_NAME, PdasMessageValue.CLIENT_STOP_PRICE_OFFSET_PIPS));
                group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_VALUE, variantCast.castToString(variantCast.fromReal(marketOrderRequest.getStopPips()))));
                pdasMessageList.addChild(group);
                group = factory.createGroup();
                group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_NAME, PdasMessageValue.CLIENT_STOP_PEG_TYPE));
                group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_VALUE, "1"));
                pdasMessageList.addChild(group);
            }
            else {
                group = factory.createGroup();
                group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_NAME, PdasMessageValue.CLIENT_STOP_RATE));
                group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_VALUE, variantCast.castToString(variantCast.fromReal(marketOrderRequest.getStopRate()))));
                pdasMessageList.addChild(group);
            }
            if (marketOrderRequest.isEnabledTrailingStop()) {
                group = factory.createGroup();
                group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_NAME, PdasMessageValue.CLIENT_TRAIL_UPDATE_PIPS_S));
                if (marketOrderRequest.getTrailingStopType() == TrailingStopType.Fixed) {
                    group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_VALUE, variantCast.castToString(variantCast.fromInt(marketOrderRequest.getTrailingStopStep()))));
                }
                else {
                    group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_VALUE, "1"));
                }
                pdasMessageList.addChild(group);
            }
        }
    }
    processLimitOrderSet(factory, marketOrderRequest, pdasMessageList) {
        let group;
        if (marketOrderRequest.isLimitOrderSet()) {
            if (marketOrderRequest.getLimitPips() != 0) {
                group = factory.createGroup();
                group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_NAME, PdasMessageValue.CLIENT_LIMIT_PRICE_OFFSET_PIPS));
                group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_VALUE, variantCast.castToString(variantCast.fromReal(marketOrderRequest.getLimitPips()))));
                pdasMessageList.addChild(group);
                group = factory.createGroup();
                group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_NAME, PdasMessageValue.CLIENT_LIMIT_PEG_TYPE));
                group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_VALUE, "0"));
                pdasMessageList.addChild(group);
            }
            else {
                group = factory.createGroup();
                group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_NAME, PdasMessageValue.CLIENT_LIMIT_RATE));
                group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_VALUE, variantCast.castToString(variantCast.fromReal(marketOrderRequest.getLimitRate()))));
                pdasMessageList.addChild(group);
            }
        }
    }
    addRates(factory, pdasMessageList, marketOrderRequest, clientRate, clientRateStr, pointSize) {
        let group;
        if (marketOrderRequest.isRateRangeFilled()) {
            if (marketOrderRequest.getRateRange() != 0.0) {
                group = factory.createGroup();
                group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_NAME, PdasMessageValue.CLIENT_RATE2));
                group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_VALUE, variantCast.castToString(variantCast.fromReal(clientRate - marketOrderRequest.getRateRange() * pointSize))));
                pdasMessageList.addChild(group);
                group = factory.createGroup();
                group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_NAME, PdasMessageValue.CLIENT_RATE3));
                group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_VALUE, variantCast.castToString(variantCast.fromReal(clientRate + marketOrderRequest.getRateRange() * pointSize))));
                pdasMessageList.addChild(group);
            }
            else {
                group = factory.createGroup();
                group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_NAME, PdasMessageValue.CLIENT_RATE));
                group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_VALUE, variantCast.castToString(variantCast.fromReal(clientRate))));
                pdasMessageList.addChild(group);
            }
        }
    }
}
module.exports = PdasCreateTrueMarketOrderRequestMessage
