'use strict';
let CommonPublisher = require('./CommonPublisher.js');
let LogManager = require('./LogManager.js');
let logger = require('@gehtsoft/LuaxStdlib-node').logger;
let OpenPositionManagerOnChangedAction = require('./OpenPositionManagerOnChangedAction.js');
let OpenPositionManagerOnInsertAction = require('./OpenPositionManagerOnInsertAction.js');
let OpenPositionManagerOnDeleteAction = require('./OpenPositionManagerOnDeleteAction.js');
let OpenPositionManagerOnRefreshAction = require('./OpenPositionManagerOnRefreshAction.js');
//@@DocBrief("The class for getting access to open positions data filtered by account")
class OpenPositionsManagerWithAccountFilter {
    manager;
    account;
    changePublisher;
    log;
    constructor() {
        this.changePublisher = new CommonPublisher();
        this.log = LogManager.getLogger();
    }
    static createManagerWithAccountFilter(manager, account) {
        let result;
        result = new OpenPositionsManagerWithAccountFilter();
        result.manager = manager;
        result.account = account;
        result.subscribeOnManager();
        return result;
    }
    subscribeOpenPositionChange(listener) {
        this.changePublisher.subscribe(listener);
    }
    unsubscribeOpenPositionChange(listener) {
        this.changePublisher.unsubscribe(listener);
    }
    subscribeStateChange(listener) {
        this.manager.subscribeStateChange(listener);
    }
    unsubscribeStateChange(listener) {
        this.manager.unsubscribeStateChange(listener);
    }
    getState() {
        return this.manager.getState();
    }
    getOpenPosition(openPositionId) {
        let openPosition;
        this.log.info("OpenPositionsManagerWithAccountFilter. Get open position by id: " + openPositionId);
        openPosition = this.manager.getInternalOpenPosition(openPositionId);
        if (openPosition == null || openPosition.getAccountId() != this.account.getId()) {
            return null;
        }
        return this.manager.getOpenPosition(openPositionId);
    }
    getOpenPositionsSnapshot() {
        this.log.info("OpenPositionsManagerWithAccountFilter. Get open positions snapshot");
        return this.manager.getInternalCalculatedOpenPositionByAccountId(this.account.getId());
    }
    getCount() {
        return this.manager.getInternalOpenPositionByAccountId(this.account.getId()).length;
    }
    getOpenPositionIds() {
        let openPositions, result, i;
        openPositions = this.manager.getInternalOpenPositionByAccountId(this.account.getId());
        result = new Array(openPositions.length);
        for (i = 0; i <= openPositions.length - 1; i += 1) {
            result[i] = openPositions[i].getTradeID();
        }
        return result;
    }
    refresh() {
        this.log.info("OpenPositionsManagerWithAccountFilter. Run refresh");
        this.manager.refresh();
    }
    getRawOpenPosition(openPositionId) {
        let openPosition;
        logger.info("OpenPositionsManagerWithAccountFilter. Get raw open position by id: " + openPositionId);
        openPosition = this.manager.getInternalOpenPosition(openPositionId);
        if (openPosition == null || openPosition.getAccountId() != this.account.getId()) {
            return null;
        }
        return this.manager.getRawOpenPosition(openPositionId);
    }
    getRawOpenPositionsSnapshot() {
        this.log.info("OpenPositionsManagerWithAccountFilter. Get raw open positions snapshot");
        return this.manager.getInternalRawOpenPositionByAccountId(this.account.getId());
    }
    getInternalOpenPositionsSnapshot() {
        return this.manager.getInternalOpenPositionByAccountId(this.account.getId());
    }
    getInternalOpenPosition(id) {
        let result;
        result = this.manager.getInternalOpenPosition(id);
        if (result == null || result.getAccountId() != this.account.getId()) {
            return null;
        }
        return result;
    }
    getInternalOpenPositionByAccountIdAndOffer(accountId, offerId) {
        if (this.account.getId() != accountId) {
            return new Array(0);
        }
        return this.manager.getInternalOpenPositionByAccountIdAndOffer(this.account.getId(), offerId);
    }
    getInternalOpenPositionByAccountId(accountId) {
        if (this.account.getId() != accountId) {
            return new Array(0);
        }
        return this.manager.getInternalOpenPositionByAccountId(accountId);
    }
    getInternalCalculatedOpenPositionByAccountId(accountId) {
        if (this.account.getId() != accountId) {
            return new Array(0);
        }
        return this.manager.getInternalCalculatedOpenPositionByAccountId(accountId);
    }
    getInternalRawOpenPositionByAccountId(accountId) {
        if (this.account.getId() != accountId) {
            return new Array(0);
        }
        return this.manager.getInternalRawOpenPositionByAccountId(accountId);
    }
    notifyOnChanged(openPositionInfo) {
        this.changePublisher.notifyAction(OpenPositionManagerOnChangedAction.create(openPositionInfo));
    }
    notifyOnInsert(openPositionInfo) {
        this.changePublisher.notifyAction(OpenPositionManagerOnInsertAction.create(openPositionInfo));
    }
    notifyOnDelete(openPositionInfo) {
        this.changePublisher.notifyAction(OpenPositionManagerOnDeleteAction.create(openPositionInfo));
    }
    notifyOnRefresh() {
        this.changePublisher.notifyAction(OpenPositionManagerOnRefreshAction.create());
    }
    subscribeOnManager() {
        let listener;
        listener = new OpenPositionsManagerWithAccountFilter.OpenPositionChangeListener(this);
        this.manager.subscribeOpenPositionChange(listener);
    }
}
module.exports = OpenPositionsManagerWithAccountFilter
OpenPositionsManagerWithAccountFilter.OpenPositionChangeListener = class {
    _owner_;
    constructor(_owner_) {
        this._owner_ = _owner_;
    }
    onChange(openPositionInfo) {
        if (openPositionInfo.getAccountId() == this._owner_.account.getId()) {
            this._owner_.notifyOnChanged(openPositionInfo);
        }
    }
    onAdd(openPositionInfo) {
        if (openPositionInfo.getAccountId() == this._owner_.account.getId()) {
            this._owner_.notifyOnInsert(openPositionInfo);
        }
    }
    onDelete(openPositionInfo) {
        if (openPositionInfo.getAccountId() == this._owner_.account.getId()) {
            this._owner_.notifyOnDelete(openPositionInfo);
        }
    }
    onRefresh() {
        this._owner_.notifyOnRefresh();
    }
}
