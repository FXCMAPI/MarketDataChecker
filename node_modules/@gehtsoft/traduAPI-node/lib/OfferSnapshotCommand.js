'use strict';
let PriceFeedCommand = require('./PriceFeedCommand.js');
let RestExecutor = require('./RestExecutor.js');
let string_map = require('@gehtsoft/LuaxStdlib-node').string_map;
let stdlib = require('@gehtsoft/LuaxStdlib-node').stdlib;
let StringValueObject = require('./StringValueObject.js');
let jsonParser = require('@gehtsoft/LuaxStdlib-node').jsonParser;
let jsonNode = require('@gehtsoft/LuaxStdlib-node').jsonNode;
let GetPriceFeedMessageBuilder = require('./GetPriceFeedMessageBuilder.js');
let MessageBuilder = require('./MessageBuilder.js');
let OfferBuilder = require('./OfferBuilder.js');
let JsonReaderUtil = require('./JsonReaderUtil.js');
let logger = require('@gehtsoft/LuaxStdlib-node').logger;
let PriceTerminalTypes = require('./PriceTerminalTypes.js');
//@@DocBrief("The price feed command")
class OfferSnapshotCommand extends PriceFeedCommand {
    dxFeedNamesProvider;
    rawOfferSnapshotCommandCallback;
    timeController;
    offerIdsMap;
    offerSymbolsMap;
    dxfeedPriceHistoryMediator;
    restExecutor;
    restExecutorCallback;
    constructor() {
        super();
        this.commandName = "OfferSnapshotCommand";
        this.rawOfferSnapshotCommandCallback = null;
        this.restExecutor = null;
    }
    createGetInitializedPriceTerminalCallback() {
        return new OfferSnapshotCommand.RawOfferGetInitializedPriceTerminalCallback(this);
    }
    setRestExecutor(restExecutor) {
        this.restExecutor = restExecutor;
    }
    startDxfeedCommand(dxfeedConnection) {
        let dxfeedSymbols, i, url, symbols;
        if (this.restExecutor == null) {
            this.restExecutor = new RestExecutor();
        }
        dxfeedSymbols = this.dxFeedNamesProvider.getSymbolsForDxFeed(this.getSymbols());
        this.offerIdsMap = new string_map();
        this.offerSymbolsMap = new string_map();
        symbols = "";
        for (i = 0; i <= dxfeedSymbols.length - 1; i += 1) {
            if (stdlib.len(symbols) > 0) {
                symbols = symbols + ",";
            }
            symbols = symbols + dxfeedSymbols[i];
            this.offerIdsMap.set(dxfeedSymbols[i], StringValueObject.create(this.instruments[i].getOfferId()));
            this.offerSymbolsMap.set(dxfeedSymbols[i], StringValueObject.create(this.instruments[i].getSymbol()));
        }
        url = dxfeedConnection.getRestUrl() + "?events=Quote&symbols=" + symbols + "&access_token=" + dxfeedConnection.getAuthToken();
        this.restExecutorCallback = new OfferSnapshotCommand.RestExecutorCallback(this);
        this.restExecutor.execute(url, this.restExecutorCallback);
    }
    getMessageRouter() {
        return this.messageRouter;
    }
    getRequestNumber() {
        return this.requestNumber;
    }
    getPriceTerminalInitializer() {
        return this.priceTerminalInitializer;
    }
    startPdasCommand(result) {
        super.startPdasCommand(result);
    }
    processDxfeedRestResponse(content) {
        let root, parser, ex, error;
        try {
            if (content != null && stdlib.len(content) > 0) {
                parser = new jsonParser();
                root = parser.parse(content);
            }
            else {
                error = "On JSON parse failed: empty response";
                this.logger.error(error);
                this.restExecutorCallback.onError(error);
                return;
            }
        } catch(exTemp1) {
            ex = stdlib.ensureException(exTemp1);
            error = "On JSON parse failed: " + ex.getMessage();
            this.logger.error(error);
            this.restExecutorCallback.onError(error);
            return;
        }
        this.readDxfeedRestResponse(root);
    }
    readDxfeedRestResponse(root) {
        let error;
        if (root.getType() == jsonNode.OBJECT) {
            this.parseDxfeedRestResponseObject(root);
        }
        else {
            error = "On JSON parse failed: incorrect format";
            this.logger.error(error);
            this.restExecutorCallback.onError(error);
        }
    }
    parseDxfeedRestResponseObject(node) {
        let data, n, i, keys, dxfeedSymbol, messageBuilder, status;
        status = "";
        n = node.getChildrenCount();
        for (i = 0; i <= n - 1; i += 1) {
            data = node.getChildByIndex(i);
            if (data.getType() == jsonNode.PROPERTY) {
                if (data.getName() == "Quote") {
                    this.parseDxfeedRawOffers(data.getValueAsNode());
                }
                if (data.getName() == "status") {
                    status = data.getValueAsNode().getValueAsString();
                }
            }
        }
        if (this.offerSymbolsMap.length() > 0) {
            keys = this.offerSymbolsMap.keys();
            for (i = 0; i <= keys.length - 1; i += 1) {
                dxfeedSymbol = keys[i];
                messageBuilder = new GetPriceFeedMessageBuilder();
                messageBuilder.setRequestId("requestid-" + (this.getRequestNumber()).toString());
                messageBuilder.setSymbol(this.offerSymbolsMap.get(dxfeedSymbol).get());
                messageBuilder.setOfferId(this.offerIdsMap.get(dxfeedSymbol).get());
                messageBuilder.setError("No answer on this instrument: " + status);
                this.getMessageRouter().publishNewMessage([MessageBuilder.createLockedMessage(messageBuilder.build())]);
                this.offerSymbolsMap.remove(dxfeedSymbol);
                this.offerIdsMap.remove(dxfeedSymbol);
            }
        }
    }
    parseDxfeedRawOffers(root) {
        let n, i, node;
        n = root.getChildrenCount();
        for (i = 0; i <= n - 1; i += 1) {
            node = root.getChildByIndex(i);
            if (node.getType() == jsonNode.PROPERTY) {
                this.parseNode(node.getValueAsNode());
            }
        }
    }
    parseNode(root) {
        let offerBuilder, messageBuilder, parsingItem;
        parsingItem = new OfferSnapshotCommand.ParsingItem(this);
        parsingItem.process(root);
        if (stdlib.len(parsingItem.getOfferId()) > 0) {
            messageBuilder = new GetPriceFeedMessageBuilder();
            messageBuilder.setSymbol(this.offerSymbolsMap.get(parsingItem.getDxfeedSymbol()).get());
            messageBuilder.setRequestId("requestid-" + (this.getRequestNumber()).toString());
            messageBuilder.setOfferId(parsingItem.getOfferId());
            offerBuilder = new OfferBuilder();
            offerBuilder.setOfferId(parsingItem.getOfferId());
            offerBuilder.setQuoteId(parsingItem.getQuoteId());
            offerBuilder.setBidTradable("T");
            offerBuilder.setAskTradable("T");
            offerBuilder.setVolume(parsingItem.getVolume());
            offerBuilder.setHigh(parsingItem.getHigh());
            offerBuilder.setLow(parsingItem.getLow());
            offerBuilder.setBid(parsingItem.getBid());
            offerBuilder.setAsk(parsingItem.getAsk());
            offerBuilder.setTime(parsingItem.geTime());
            this.offerSymbolsMap.remove(parsingItem.getDxfeedSymbol());
            this.offerIdsMap.remove(parsingItem.getDxfeedSymbol());
            messageBuilder.setOffer(offerBuilder.build());
            this.getMessageRouter().publishNewMessage([MessageBuilder.createLockedMessage(messageBuilder.build())]);
        }
    }
}
module.exports = OfferSnapshotCommand
OfferSnapshotCommand.ParsingItem = class {
    offerId;
    quoteId;
    time;
    bid;
    ask;
    high;
    low;
    volume;
    dxfeedSymbol;
    _owner_;
    constructor(_owner_) {
        this._owner_ = _owner_;
        this.dxfeedSymbol = "";
        this.offerId = "";
        this.quoteId = "";
        this.time = stdlib.mkdate(1900, 1, 1);
        this.bid = 0.0;
        this.ask = 0.0;
        this.high = 0.0;
        this.low = 0.0;
        this.volume = 0;
    }
    geTime() {
        return this.time;
    }
    getAsk() {
        return this.ask;
    }
    getBid() {
        return this.bid;
    }
    getLow() {
        return this.low;
    }
    getHigh() {
        return this.high;
    }
    getVolume() {
        return this.volume;
    }
    getQuoteId() {
        return this.quoteId;
    }
    getOfferId() {
        return this.offerId;
    }
    getDxfeedSymbol() {
        return this.dxfeedSymbol;
    }
    process(root) {
        let n, i, node;
        n = root.getChildrenCount();
        for (i = 0; i <= n - 1; i += 1) {
            node = root.getChildByIndex(i);
            if (node.getType() == jsonNode.PROPERTY) {
                this.processProperty(node);
            }
        }
        this.setHighLow();
    }
    processProperty(node) {
        if (node.getName() == "eventSymbol") {
            this.dxfeedSymbol = node.getValueAsNode().getValueAsString();
            this.setIds();
        } else if (node.getName() == "bidPrice") {
            this.bid = JsonReaderUtil.getRealFromJsonNode(node.getValueAsNode());
        } else if (node.getName() == "askPrice") {
            this.ask = JsonReaderUtil.getRealFromJsonNode(node.getValueAsNode());
        } else if (node.getName() == "bidSize") {
            this.volume = this.volume + node.getValueAsNode().getValueAsInt();
        } else if (node.getName() == "askSize") {
            this.volume = this.volume + node.getValueAsNode().getValueAsInt();
        } else if (node.getName() == "bidTime") {
            this.time = node.getValueAsNode().getValueAsDatetime();
        } else if (node.getName() == "askTime") {
            this.time = node.getValueAsNode().getValueAsDatetime();
        }
    }
    setIds() {
        if (this._owner_.offerIdsMap.contains(this.dxfeedSymbol)) {
            this.offerId = this._owner_.offerIdsMap.get(this.dxfeedSymbol).get();
            this.quoteId = this.dxfeedSymbol + "-" + this.offerId;
        }
    }
    setHighLow() {
        this.high = this.ask;
        if (this.bid > this.high) {
            this.high = this.bid;
        }
        this.low = this.ask;
        if (this.bid < this.low) {
            this.low = this.bid;
        }
    }
}
OfferSnapshotCommand.RestExecutorCallback = class {
    _owner_;
    constructor(_owner_) {
        this._owner_ = _owner_;
    }
    onSuccessSent(content) {
        this._owner_.processDxfeedRestResponse(content);
    }
    onError(error) {
        let messageBuilder;
        messageBuilder = new GetPriceFeedMessageBuilder();
        messageBuilder.setRequestId("requestid-" + (this._owner_.getRequestNumber()).toString());
        messageBuilder.setOfferId("*");
        messageBuilder.setError(error);
        this._owner_.getMessageRouter().publishNewMessage([MessageBuilder.createLockedMessage(messageBuilder.build())]);
    }
}
OfferSnapshotCommand.RawOfferGetInitializedPriceTerminalCallback = class {
    _owner_;
    constructor(_owner_) {
        this._owner_ = _owner_;
    }
    onError(error) {
        logger.error(error);
        if (this._owner_.rawOfferSnapshotCommandCallback != null) {
            this._owner_.rawOfferSnapshotCommandCallback.onError(error);
        }
    }
    onSuccess(result) {
        if (result != null) {
            if (this._owner_.getPriceTerminalInitializer().getPriceTerminalType() == PriceTerminalTypes.PDAS) {
                this._owner_.startPdasCommand(result);
            } else if (this._owner_.getPriceTerminalInitializer().getPriceTerminalType() == PriceTerminalTypes.DXFEED) {
                this._owner_.startDxfeedCommand(result);
            }
        }
    }
}
