'use strict';
let LogManager = require('./LogManager.js');
let DxFeedReconnectAttemptsCounter = require('./DxFeedReconnectAttemptsCounter.js');
let MessageType = require('./MessageType.js');
let ConnectionStatus = require('./ConnectionStatus.js');
let CommonErrorType = require('./CommonErrorType.js');
class DXFeedReconnector {
    static get MAX_RECONNECTION_ATTEMPTS() { return 3; }
    mdtConnectionStatusManager;
    messageRouter;
    logger;
    receiveNewMessageListener;
    dxfeedConnection;
    dxfeedLazyInitializer;
    reconnectAttemptsCounter;
    constructor() {
        this.logger = LogManager.getLogger();
        this.receiveNewMessageListener = new DXFeedReconnector.ReceiveNewMessageListener(this);
        this.reconnectAttemptsCounter = DxFeedReconnectAttemptsCounter.getCounter();
    }
    static create(dxfeedConnection, mdtConnectionStatusManager, messageRouter, dxfeedLazyInitializer) {
        let result;
        result = new DXFeedReconnector();
        result.mdtConnectionStatusManager = mdtConnectionStatusManager;
        result.messageRouter = messageRouter;
        result.dxfeedConnection = dxfeedConnection;
        result.subscribeOnRequiredMessages();
        result.dxfeedLazyInitializer = dxfeedLazyInitializer;
        dxfeedConnection.subscribeStateChange(result);
        return result;
    }
    onStateChange(state) {
        let error;
        if ((this.mdtConnectionStatusManager.getConnectionStatus().isConnected() || this.mdtConnectionStatusManager.getConnectionStatus().isReconnecting()) && state.isDisconnected()) {
            error = "DXFeed connection closed.";
            if (state.hasError()) {
                error = error + " " + state.getError().getMessage();
                this.logger.warning("DXFeed connection closed with error: '" + error + "'. Start reconnecting");
            }
            else {
                this.logger.warning("DXFeed connection closed. Start reconnecting");
            }
            this.reconnect(error);
        }
    }
    stop() {
        this.dxfeedConnection.unsubscribeStateChange(this);
        this.messageRouter.unsubscribeNewMessageReceive(MessageType.KeepAlive, this.receiveNewMessageListener);
    }
    reconnect(error) {
        let callback, connectionAttempts;
        connectionAttempts = this.reconnectAttemptsCounter.next();
        if (connectionAttempts <= DXFeedReconnector.MAX_RECONNECTION_ATTEMPTS) {
            this.logger.warning("DXFeed attempt to reconnect:" + (connectionAttempts).toString());
            this.dxfeedLazyInitializer.stop();
            callback = new DXFeedReconnector.GetInitializedPriceTerminalCallback(this);
            this.mdtConnectionStatusManager.changeConnectionStatusWithError(ConnectionStatus.RECONNECTING, error);
            this.dxfeedLazyInitializer.getInitializedPriceTerminal(callback);
        }
        else {
            this.logger.warning("DXFeed failed to reconnect. Change state DISCONNECTED");
            this.reconnectAttemptsCounter.reset();
            this.dxfeedLazyInitializer.reset();
            this.mdtConnectionStatusManager.changeConnectionStatusWithError(ConnectionStatus.DISCONNECTED, error);
        }
    }
    subscribeOnRequiredMessages() {
        this.messageRouter.subscribeNewMessageReceive(MessageType.KeepAlive, this.receiveNewMessageListener);
    }
}
module.exports = DXFeedReconnector
DXFeedReconnector.ReceiveNewMessageListener = class {
    _owner_;
    constructor(_owner_) {
        this._owner_ = _owner_;
    }
    onNewMessageReceive(message) {
        let specifiedMessage;
        if (message.getType() == MessageType.KeepAlive) {
            specifiedMessage = message;
            if (specifiedMessage.getError() == CommonErrorType.SessionExpired) {
                this._owner_.reconnectAttemptsCounter.reset();
                this._owner_.dxfeedLazyInitializer.reset();
                this._owner_.mdtConnectionStatusManager.changeConnectionStatusWithError(ConnectionStatus.DISCONNECTED, specifiedMessage.getError());
            }
        }
    }
}
DXFeedReconnector.GetInitializedPriceTerminalCallback = class {
    _owner_;
    constructor(_owner_) {
        this._owner_ = _owner_;
    }
    onError(error) {
        return void(0);
    }
    onSuccess(result) {
        this._owner_.logger.info("DXFeed connection is restored.");
        this._owner_.reconnectAttemptsCounter.reset();
    }
}
