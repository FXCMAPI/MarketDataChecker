'use strict';
let APdasRequestMessage = require('./APdasRequestMessage.js');
let PdasMessageFieldFactory = require('./PdasMessageFieldFactory.js');
let PdasMessageSerializer = require('./PdasMessageSerializer.js');
let PdasMessageFieldTag = require('./PdasMessageFieldTag.js');
let PdasMessageValue = require('./PdasMessageValue.js');
let variantCast = require('@gehtsoft/LuaxStdlib-node').variantCast;
let TrailingStopType = require('./TrailingStopType.js');
let PdasRequestCommand = require('./PdasRequestCommand.js');
let PdasConstants = require('./PdasConstants.js');
let PdasTransportMessage = require('./PdasTransportMessage.js');
let TransportMessageType = require('./TransportMessageType.js');
let stdlib = require('@gehtsoft/LuaxStdlib-node').stdlib;
class PdasChangeOrderRequestMessage extends APdasRequestMessage {
    build(tradingSession, acctId, changeOrderRequest, pointSize, orderType, requestNumberGenerator, transactTime) {
        let pdasMessageSerializer, factory, pdasMessage, requestId, pdasMessageList, group, result, terminalUrl;
        factory = new PdasMessageFieldFactory();
        pdasMessageSerializer = new PdasMessageSerializer();
        terminalUrl = tradingSession.getTradingTerminal().getUrls()[0];
        requestId = tradingSession.getSessionId() + "-" + (requestNumberGenerator.getNextRequestNumber()).toString();
        pdasMessage = APdasRequestMessage.createMessage(factory, tradingSession, transactTime, requestId);
        pdasMessageList = factory.createList(PdasMessageFieldTag.FXCM_NO_PARAM);
        group = factory.createGroup();
        group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_NAME, PdasMessageValue.CLIENT_ORDER_ID));
        group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_VALUE, changeOrderRequest.getOrderId()));
        pdasMessageList.addChild(group);
        group = factory.createGroup();
        group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_NAME, PdasMessageValue.CLIENT_ACCT_ID));
        group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_VALUE, acctId));
        pdasMessageList.addChild(group);
        if (changeOrderRequest.getAmount() > 0) {
            group = factory.createGroup();
            group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_NAME, PdasMessageValue.CLIENT_QUANTITY));
            group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_VALUE, variantCast.castToString(variantCast.fromInt(changeOrderRequest.getAmount()))));
            pdasMessageList.addChild(group);
        }
        if (changeOrderRequest.getRateRange() != 0.0) {
            group = factory.createGroup();
            group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_NAME, PdasMessageValue.CLIENT_RATE2));
            group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_VALUE, variantCast.castToString(variantCast.fromReal(changeOrderRequest.getRate()))));
            pdasMessageList.addChild(group);
            group = factory.createGroup();
            group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_NAME, PdasMessageValue.CLIENT_RATE3));
            group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_VALUE, variantCast.castToString(variantCast.fromReal(changeOrderRequest.getRate() + changeOrderRequest.getRateRange() * pointSize))));
            pdasMessageList.addChild(group);
        }
        else {
            this.processNoRateSpecified(factory, changeOrderRequest, orderType, pdasMessageList);
        }
        if (changeOrderRequest.isEnabledTrailing()) {
            group = factory.createGroup();
            group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_NAME, PdasMessageValue.CLIENT_TRAIL_UPDATE_PIPS));
            if (changeOrderRequest.getTrailingType() == TrailingStopType.Fixed) {
                group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_VALUE, variantCast.castToString(variantCast.fromInt(changeOrderRequest.getTrailingStep()))));
            }
            else {
                group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_VALUE, "1"));
            }
            pdasMessageList.addChild(group);
        }
        group = factory.createGroup();
        group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_NAME, PdasMessageValue.CLIENT_QID));
        group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_VALUE, requestId));
        pdasMessageList.addChild(group);
        pdasMessage.addChild(pdasMessageList);
        pdasMessage.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_COMMAND_ID, PdasRequestCommand.CHANGE_ORDER));
        pdasMessage.addChild(factory.createStringField(PdasConstants.SID, tradingSession.getSessionId()));
        result = PdasTransportMessage.create(TransportMessageType.ChangeOrder, this.createRequestUrl(terminalUrl), pdasMessageSerializer.serialize(pdasMessage));
        return result;
    }
    processNoRateSpecified(factory, changeOrderRequest, orderType, pdasMessageList) {
        let isStop, isLimit, group, pegType;
        isStop = orderType != null && stdlib.indexOf(orderType, "S", false) > -1;
        isLimit = orderType != null && stdlib.indexOf(orderType, "L", false) > -1;
        if (changeOrderRequest.getPips() != 0 && (isStop || isLimit)) {
            group = factory.createGroup();
            group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_NAME, PdasMessageValue.CLIENT_PRICE_OFFSET_PIPS));
            group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_VALUE, variantCast.castToString(variantCast.fromReal(changeOrderRequest.getPips()))));
            pdasMessageList.addChild(group);
            if (isStop) {
                pegType = "1";
            }
            else {
                pegType = "0";
            }
            group = factory.createGroup();
            group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_NAME, PdasMessageValue.CLIENT_PEG_TYPE));
            group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_VALUE, pegType));
            pdasMessageList.addChild(group);
        }
        else {
            group = factory.createGroup();
            group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_NAME, PdasMessageValue.CLIENT_RATE));
            group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_VALUE, variantCast.castToString(variantCast.fromReal(changeOrderRequest.getRate()))));
            pdasMessageList.addChild(group);
        }
    }
}
module.exports = PdasChangeOrderRequestMessage
