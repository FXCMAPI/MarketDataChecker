'use strict';
let RakeOutController = require('./RakeOutController.js');
let MessageType = require('./MessageType.js');
let logger = require('@gehtsoft/LuaxStdlib-node').logger;
class RakeOutPriceController extends RakeOutController {
    rakeOutPriceControllerCallback;
    constructor() {
        super();
        this.rakeOutPriceControllerCallback = null;
    }
    stop() {
        this.stopImpl();
    }
    static createPriceController(sessionProvider, messageRouter, connectionStatusManager, rakeOutCommand, rakeOutPriceControllerCallback) {
        let controller, startMessageType;
        startMessageType = MessageType.Connected;
        controller = new RakeOutPriceController();
        controller.rakeOutPriceControllerCallback = rakeOutPriceControllerCallback;
        controller.initialize(sessionProvider, messageRouter, connectionStatusManager, rakeOutCommand, startMessageType);
        return controller;
    }
    createRakeOutCommandListener() {
        this.rakeOutCommandListener = new RakeOutPriceController.RakeOutCommandListener(this);
    }
}
module.exports = RakeOutPriceController
RakeOutPriceController.RakeOutCommandListener = class {
    _owner_;
    constructor(_owner_) {
        this._owner_ = _owner_;
    }
    onSuccess(message) {
        return void(0);
    }
    onError(error) {
        this._owner_.stop();
        logger.warning("RakeOut got error: " + error);
        if (this._owner_.rakeOutPriceControllerCallback != null) {
            this._owner_.rakeOutPriceControllerCallback.onError(error);
        }
    }
    onCancel() {
        return void(0);
    }
}
