'use strict';
let AccountsStorage = require('./AccountsStorage.js');
let CommonPublisher = require('./CommonPublisher.js');
let LogManager = require('./LogManager.js');
let MessageType = require('./MessageType.js');
let exception = require('@gehtsoft/LuaxStdlib-node').exception;
let FXConnectLiteErrorCodes = require('./FXConnectLiteErrorCodes.js');
let stdlib = require('@gehtsoft/LuaxStdlib-node').stdlib;
let AccountBuilder = require('./AccountBuilder.js');
let UpdateCommandType = require('./UpdateCommandType.js');
//@@DocBrief("The class provides access to accounts data")
class AccountsManager {
    messageRouter;
    receiveNewMessageListener;
    accountsStorage;
    publisher;
    accountCalculator;
    logger;
    systemSettingsProvider;
    accountRefreshController;
    constructor() {
        this.accountsStorage = new AccountsStorage();
        this.publisher = new CommonPublisher();
        this.logger = LogManager.getLogger();
    }
    static create(messageRouter, accountCalculator, systemSettingsProvider) {
        let accountsManager;
        accountsManager = new AccountsManager();
        accountsManager.messageRouter = messageRouter;
        accountsManager.setReceiveNewMessageListener();
        accountsManager.setAccountRefreshController();
        accountsManager.accountCalculator = accountCalculator;
        accountsManager.systemSettingsProvider = systemSettingsProvider;
        accountsManager.setSystemPropertiesLoadedListener();
        accountsManager.receiveNewMessageListener.setStorage(accountsManager.accountsStorage);
        accountsManager.receiveNewMessageListener.setLogger(accountsManager.logger);
        messageRouter.subscribeNewMessageReceive(MessageType.GetAccount, accountsManager.receiveNewMessageListener);
        messageRouter.subscribeNewMessageReceive(MessageType.Disconnected, accountsManager.receiveNewMessageListener);
        messageRouter.subscribeNewMessageReceive(MessageType.AccountUpdateMessage, accountsManager.receiveNewMessageListener);
        return accountsManager;
    }
    getAccountsInfo() {
        this.logger.debug("AccountsManager. Get accounts info");
        return this.accountsStorage.getAccountInfoCollection();
    }
    subscribeAccountChange(listener) {
        if (listener == null) {
            this.logger.error("AccountsManager.subscribeAccountChange(): listener is not set");
            throw exception.create(FXConnectLiteErrorCodes.CODE_REQUIRED_PARAMETER_NOT_SET, "listener is not set");
        }
        this.publisher.subscribe(listener);
    }
    unsubscribeAccountChange(listener) {
        if (listener == null) {
            this.logger.error("AccountsManager.unsubscribeAccountChange(): listener is not set");
            throw exception.create(FXConnectLiteErrorCodes.CODE_REQUIRED_PARAMETER_NOT_SET, "listener is not set");
        }
        this.publisher.unsubscribe(listener);
    }
    getAccount(accountInfo, getAccountCallback) {
        let account;
        if (accountInfo == null) {
            this.logger.error("AccountsManager.getAccount(): accountInfo is not set");
            throw exception.create(FXConnectLiteErrorCodes.CODE_REQUIRED_PARAMETER_NOT_SET, "accountInfo is not set");
        }
        if (getAccountCallback == null) {
            this.logger.error("AccountsManager.getAccount(): getAccountCallback is not set");
            throw exception.create(FXConnectLiteErrorCodes.CODE_REQUIRED_PARAMETER_NOT_SET, "getAccountCallback is not set");
        }
        this.logger.info("AccountsManager. Get account: " + accountInfo.getId());
        account = this.accountsStorage.getAccount(accountInfo.getId());
        if (account != null) {
            if (account.getBaseCurrency() == "") {
                this.setBaseCurrencyFromSystemSettings(account);
            }
            getAccountCallback.onAccountReceived(this.calculate(account));
        }
    }
    getAccountById(accountId) {
        let account;
        if (accountId == null) {
            this.logger.error("AccountsManager.getAccountById(): accountId is not set");
            throw exception.create(FXConnectLiteErrorCodes.CODE_REQUIRED_PARAMETER_NOT_SET, "accountId is not set");
        }
        this.logger.debug("AccountsManager. Get account by id: " + accountId);
        account = this.accountsStorage.getAccount(accountId);
        if (account != null) {
            if (account.getBaseCurrency() == "") {
                this.setBaseCurrencyFromSystemSettings(account);
            }
            return this.calculate(account);
        }
        return null;
    }
    getRawAccountById(accountId) {
        let account;
        if (accountId == null) {
            this.logger.error("AccountsManager.getRawAccountById(): accountId is not set");
            throw exception.create(FXConnectLiteErrorCodes.CODE_REQUIRED_PARAMETER_NOT_SET, "accountId is not set");
        }
        this.logger.debug("AccountsManager. Get raw account by id: " + accountId);
        account = this.accountsStorage.getAccount(accountId);
        if (account != null && account.getBaseCurrency() == "") {
            this.setBaseCurrencyFromSystemSettings(account);
        }
        return account;
    }
    setBaseCurrencyFromSystemSettings(accountBuilder) {
        let currency;
        currency = this.systemSettingsProvider.getBaseCurrency();
        if (currency == null || stdlib.len(currency) == 0) {
            this.logger.error("Base currency is empty for account '" + accountBuilder.getAccountName() + "'");
        }
        accountBuilder.setBaseCurrency(currency);
        accountBuilder.setBaseCurrencyPrecision(this.systemSettingsProvider.getBaseCurrencyPrecision());
    }
    calculate(account) {
        let accountBuilder, accountCalculatedFields;
        accountBuilder = this.copyAccount(account);
        if (this.accountCalculator != null) {
            accountCalculatedFields = this.accountCalculator.calculatePublicFields(account);
            accountBuilder.setEquity(accountCalculatedFields.getEquity());
            accountBuilder.setGrossPL(accountCalculatedFields.getGrossPL());
            accountBuilder.setUsedMargin(accountCalculatedFields.getUsedMargin());
            accountBuilder.setUsableMargin(accountCalculatedFields.getUsableMargin());
            accountBuilder.setUsableMarginPercentage(accountCalculatedFields.getUsableMarginPercentage());
            accountBuilder.setUsedMaintenanceMargin(accountCalculatedFields.getUsedMaintenanceMargin());
            accountBuilder.setUsableMaintenanceMargin(accountCalculatedFields.getUsableMaintenanceMargin());
            accountBuilder.setUsableMaintenanceMarginPercentage(accountCalculatedFields.getUsableMaintenanceMarginPercentage());
            accountBuilder.setDayPL(accountCalculatedFields.getDayPL());
        }
        return accountBuilder.build();
    }
    copyAccount(account) {
        let builder;
        builder = new AccountBuilder();
        builder.setAccountId(account.getAccountId());
        builder.setAccountKind(account.getAccountKind());
        builder.setAccountName(account.getAccountName());
        builder.setOrderAmountLimit(account.getOrderAmountLimit());
        builder.setATPId(account.getATPId());
        builder.setBaseUnitSize(account.getBaseUnitSize());
        builder.setLeverageProfileId(account.getLeverageProfileId());
        builder.setM2MEquity(account.getM2MEquity());
        builder.setMaintenanceFlag(account.getMaintenanceFlag());
        builder.setMaintenanceType(account.getMaintenanceType());
        builder.setManagerAccountId(account.getManagerAccountId());
        builder.setMarginCallFlag(account.getMarginCallFlag());
        builder.setRefreshProfileFlags(account.getRefreshProfileFlags());
        builder.setNonTradeEquity(account.getNonTradeEquity());
        builder.setBaseCurrency(account.getBaseCurrency());
        builder.setBaseCurrencyPrecision(account.getBaseCurrencyPrecision());
        builder.setLastMarginCallDate(account.getLastMarginCallDate());
        builder.setBalance(account.getBalance());
        builder.setRolloverProfileId(account.getRolloverProfileId());
        return builder;
    }
    getAccountInternal(accountInfo) {
        return this.getRawAccountById(accountInfo.getId());
    }
    getAccountsSnapshot(accountsSnapshotCallback) {
        this.logger.info("AccountsManager. Get accounts snapshot");
        this.processGetAccountsSnapshot(accountsSnapshotCallback);
    }
    refresh() {
        this.logger.info("AccountsManager. Refresh");
    }
    processGetAccountsSnapshot(accountsSnapshotCallback) {
        let accountsCollector;
        accountsCollector = new AccountsManager.AccountsCollector(this);
        accountsCollector.collectAccounts(accountsSnapshotCallback);
    }
    setSystemPropertiesLoadedListener() {
        this.systemSettingsProvider.subscribeLoaded(new AccountsManager.SystemPropertiesLoadedListener(this));
    }
    setReceiveNewMessageListener() {
        this.receiveNewMessageListener = AccountsManager.ReceiveNewMessageListener.create(this);
    }
    setAccountRefreshController() {
        this.accountRefreshController = new AccountsManager.AccountRefreshController(this);
        this.accountRefreshController.setPublisher(this.publisher);
    }
    notifyAccountsRefreshed() {
        this.accountRefreshController.setRefreshed();
    }
    notifyAccountRefreshed(accountInfo) {
        this.publisher.notifyAction(AccountsManager.AccountRefreshedAction.create(accountInfo));
    }
    notifyAccountAdded(accountInfo) {
        this.publisher.notifyAction(AccountsManager.AccountAddedAction.create(accountInfo));
    }
    notifyAccountDeleted(accountInfo) {
        this.publisher.notifyAction(AccountsManager.AccountDeletedAction.create(accountInfo));
    }
}
module.exports = AccountsManager
AccountsManager.SystemPropertiesLoadedListener = class {
    _owner_;
    constructor(_owner_) {
        this._owner_ = _owner_;
    }
    invoke() {
        this._owner_.accountRefreshController.setSystemSettingsLoaded();
    }
}
AccountsManager.AccountsCollector = class {
    result;
    total;
    count;
    accountsSnapshotCallback;
    _owner_;
    constructor(_owner_) {
        this._owner_ = _owner_;
    }
    collectAccounts(accountsSnapshotCallback) {
        let info, i;
        info = this._owner_.getAccountsInfo();
        this.total = info.length;
        this.count = 0;
        this.result = new Array(this.total);
        this.accountsSnapshotCallback = accountsSnapshotCallback;
        for (i = 0; i <= this.total - 1; i += 1) {
            this._owner_.getAccount(info[i], new AccountsManager.AccountsCollector.accountCallback(this));
        }
    }
}
AccountsManager.AccountsCollector.accountCallback = class {
    _owner_;
    constructor(_owner_) {
        this._owner_ = _owner_;
    }
    onAccountReceived(account) {
        this._owner_.result[this._owner_.count] = account;
        this._owner_.count = this._owner_.count + 1;
        if (this._owner_.count >= this._owner_.total) {
            this._owner_.accountsSnapshotCallback.onAccountsReceived(this._owner_.result);
        }
    }
}
AccountsManager.ReceiveNewMessageListener = class {
    storage;
    owner;
    logger;
    _owner_;
    constructor(_owner_) {
        this._owner_ = _owner_;
    }
    static create(owner) {
        let instance;
        instance = new AccountsManager.ReceiveNewMessageListener(this);
        instance.owner = owner;
        return instance;
    }
    setStorage(storage) {
        this.storage = storage;
    }
    setLogger(logger) {
        this.logger = logger;
    }
    onNewMessageReceive(message) {
        let getAccountMessage, account;
        this.logger.debug("AccountsManager. Receive message: " + message.getType());
        if (message.getType() == MessageType.GetAccount) {
            getAccountMessage = message;
            account = getAccountMessage.getAccount();
            if (this.hasAcceptableKind(account)) {
                this.storage.setAccount(account);
                if (getAccountMessage.isLastInList()) {
                    this.owner.notifyAccountsRefreshed();
                }
            }
        } else if (message.getType() == MessageType.AccountUpdateMessage) {
            this.processAccountUpdateMessage(message);
        } else if (message.getType() == MessageType.Disconnected) {
            this.storage.clear();
        }
    }
    processAccountUpdateMessage(accountUpdateMessage) {
        let accountInfo, accountID, account;
        account = accountUpdateMessage.getAccount();
        if (this.hasAcceptableKind(account)) {
            accountID = account.getAccountId();
            if (accountUpdateMessage.getUpdateCommand() == UpdateCommandType.UPDATE) {
                this.storage.changeAccount(accountID, account);
                accountInfo = this.storage.getAccountInfo(accountID);
                this.logger.debug("AccountsManager. Account updated: " + accountID);
                this.owner.notifyAccountRefreshed(accountInfo);
            } else if (accountUpdateMessage.getUpdateCommand() == UpdateCommandType.INSERT) {
                this.storage.setAccount(account);
                accountInfo = this.storage.getAccountInfo(accountID);
                this.logger.debug("AccountsManager. Account added: " + accountID);
                this.owner.notifyAccountAdded(accountInfo);
            } else if (accountUpdateMessage.getUpdateCommand() == UpdateCommandType.DELETE) {
                accountInfo = this.storage.getAccountInfo(accountID);
                this.storage.removeAccount(accountID);
                this.logger.debug("AccountsManager. Account deleted: " + accountID);
                this.owner.notifyAccountDeleted(accountInfo);
            }
        }
    }
    hasAcceptableKind(account) {
        return account.getAccountKind() == "32" || account.getAccountKind() == "36";
    }
}
AccountsManager.AccountDeletedAction = class {
    listener;
    accountInfo;
    _owner_;
    constructor(_owner_) {
        this._owner_ = _owner_;
    }
    static create(accountInfo) {
        let result;
        result = new AccountsManager.AccountDeletedAction(this);
        result.accountInfo = accountInfo;
        return result;
    }
    setListener(listener) {
        this.listener = listener;
    }
    execute() {
        this.listener.onDelete(this.accountInfo);
    }
}
AccountsManager.AccountAddedAction = class {
    listener;
    accountInfo;
    _owner_;
    constructor(_owner_) {
        this._owner_ = _owner_;
    }
    static create(accountInfo) {
        let result;
        result = new AccountsManager.AccountAddedAction(this);
        result.accountInfo = accountInfo;
        return result;
    }
    setListener(listener) {
        this.listener = listener;
    }
    execute() {
        this.listener.onAdd(this.accountInfo);
    }
}
AccountsManager.AccountRefreshedAction = class {
    listener;
    accountInfo;
    _owner_;
    constructor(_owner_) {
        this._owner_ = _owner_;
    }
    static create(accountInfo) {
        let result;
        result = new AccountsManager.AccountRefreshedAction(this);
        result.accountInfo = accountInfo;
        return result;
    }
    setListener(listener) {
        this.listener = listener;
    }
    execute() {
        this.listener.onChange(this.accountInfo);
    }
}
AccountsManager.RefreshedAction = class {
    listener;
    _owner_;
    constructor(_owner_) {
        this._owner_ = _owner_;
    }
    setListener(listener) {
        this.listener = listener;
    }
    execute() {
        this.listener.onRefresh();
    }
}
AccountsManager.AccountRefreshController = class {
    systemSettingsLoaded;
    refreshed;
    publisher;
    _owner_;
    constructor(_owner_) {
        this._owner_ = _owner_;
        this.systemSettingsLoaded = false;
        this.refreshed = false;
    }
    setPublisher(publisher) {
        this.publisher = publisher;
    }
    setSystemSettingsLoaded() {
        this.systemSettingsLoaded = true;
        this.check();
    }
    setRefreshed() {
        this.refreshed = true;
        this.check();
    }
    check() {
        if (this.systemSettingsLoaded && this.refreshed) {
            this.publisher.notifyAction(new AccountsManager.RefreshedAction(this._owner_));
        }
    }
}
