'use strict';
let AFxmsgReader = require('./AFxmsgReader.js');
let csvParser = require('@gehtsoft/LuaxStdlib-node').csvParser;
let PdasMessageType = require('./PdasMessageType.js');
let PdasMessageFieldTag = require('./PdasMessageFieldTag.js');
let PdasMessageValue = require('./PdasMessageValue.js');
let stdlib = require('@gehtsoft/LuaxStdlib-node').stdlib;
class ABatchFxmsgReader extends AFxmsgReader {
    linesParser;
    constructor() {
        super();
        this.linesParser = new csvParser();
        this.linesParser.valueSeparator = "\n";
    }
    getExpectedCommand() {
        return null;
    }
    read(responseList, xmlRootNode, messages) {
        let i;
        if (messages == null || messages.length == 0) {
            return;
        }
        for (i = 0; i <= messages.length - 1; i += 1) {
            if (messages[i].getType() == PdasMessageType.FXCM_RESPONSE && messages[i].getFieldValue(PdasMessageFieldTag.FXCM_COMMAND_ID) == this.getExpectedCommand()) {
                this.findAndProcessList(responseList, messages[i]);
            } else if (messages[i].getType() == PdasMessageType.FXCM_BATCH_RESPONSE) {
                this.processBatch(responseList, messages[i]);
            }
        }
    }
    processBatch(responseList, source) {
        let j, groups, group, embList;
        embList = source.getList(PdasMessageFieldTag.FXCM_EMB_MSG);
        if (embList != null) {
            groups = embList.getGroups();
            for (j = 0; j <= groups.length() - 1; j += 1) {
                group = groups.get(j);
                if (group.getFieldValue(PdasMessageFieldTag.FXCM_COMMAND_ID) == this.getExpectedCommand()) {
                    this.findAndProcessList(responseList, group);
                }
            }
        }
    }
    findAndProcessList(responseList, source) {
        let data, noParamList, acctId, offerIdsStr, offerIds, parser;
        noParamList = source.getList(PdasMessageFieldTag.FXCM_NO_PARAM);
        if (noParamList != null) {
            data = noParamList.getGroupParamValueByParamName(PdasMessageValue.CLIENT_DAS);
            if (data != null) {
                acctId = noParamList.getGroupParamValueByParamName(PdasMessageValue.CLIENT_ACCT_ID);
                offerIdsStr = noParamList.getGroupParamValueByParamName(PdasMessageValue.CLIENT_OFFER_IDS);
                if (offerIdsStr != null && stdlib.len(offerIdsStr) > 0) {
                    parser = new csvParser();
                    parser.valueSeparator = ",";
                    offerIds = parser.splitLine(offerIdsStr);
                }
                else {
                    offerIds = [];
                }
                this.processData(responseList, data, acctId, offerIds);
            }
        }
    }
    processData(responseList, data, acctId, offerIds) {
        return void(0);
    }
}
module.exports = ABatchFxmsgReader
