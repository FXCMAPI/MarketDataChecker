'use strict';
let jsonNode = require('@gehtsoft/LuaxStdlib-node').jsonNode;
let DxFeedQuotesList = require('./DxFeedQuotesList.js');
let DXFeedQuote = require('./DXFeedQuote.js');
let JsonReaderUtil = require('./JsonReaderUtil.js');
class DxFeedReceiveQuotesDataReader {
    static get CHANNEL() { return "/service/data"; }
    eventSymbolIndex;
    eventTimeIndex;
    sequenceIndex;
    timeNanoPartIndex;
    bidTimeIndex;
    bidExchangeCodeIndex;
    bidPriceIndex;
    bidSizeIndex;
    askTimeIndex;
    askExchangeCodeIndex;
    askPriceIndex;
    askSizeIndex;
    parametersNumber;
    constructor() {
        this.eventSymbolIndex = 0;
        this.eventTimeIndex = 1;
        this.sequenceIndex = 2;
        this.timeNanoPartIndex = 3;
        this.bidTimeIndex = 4;
        this.bidExchangeCodeIndex = 5;
        this.bidPriceIndex = 6;
        this.bidSizeIndex = 7;
        this.askTimeIndex = 8;
        this.askExchangeCodeIndex = 9;
        this.askPriceIndex = 10;
        this.askSizeIndex = 11;
        this.parametersNumber = 12;
    }
    read(root) {
        let dXFeedQuote;
        dXFeedQuote = [];
        if (root.getType() == jsonNode.OBJECT) {
            dXFeedQuote = this.parseObject(root, dXFeedQuote);
        }
        return dXFeedQuote;
    }
    parseObject(node, quotes) {
        let dXFeedQuote, channelProperty, data;
        dXFeedQuote = [];
        channelProperty = node.getPropertyByName("channel");
        if (channelProperty != null && channelProperty.getValueAsString() == DxFeedReceiveQuotesDataReader.CHANNEL) {
            data = node.getPropertyByName("data");
            if (data != null) {
                dXFeedQuote = this.parseQuotes(data);
            }
        }
        return dXFeedQuote;
    }
    parseQuotes(root) {
        let n, i, node, dxFeedQuotesList;
        n = root.getChildrenCount();
        dxFeedQuotesList = new DxFeedQuotesList();
        for (i = 0; i <= n - 1; i += 1) {
            node = root.getChildByIndex(i);
            if (node.getType() == jsonNode.ARRAY && node.getChildrenCount() == 2) {
                this.tryParseDescription(node);
            } else if (node.getType() == jsonNode.ARRAY && node.getChildrenCount() >= this.parametersNumber) {
                this.parse(node, dxFeedQuotesList);
            }
        }
        return dxFeedQuotesList.toArray();
    }
    tryParseDescription(node) {
        let arr, item, n, i;
        if (node.getChildByIndex(0).getType() == jsonNode.STRING && node.getChildByIndex(1).getType() == jsonNode.ARRAY) {
            if (node.getChildByIndex(0).getValueAsString() == "Quote") {
                arr = node.getChildByIndex(1);
                n = arr.getChildrenCount();
                this.parametersNumber = n;
                for (i = 0; i <= n - 1; i += 1) {
                    item = arr.getChildByIndex(i);
                    if (item.getType() == jsonNode.STRING) {
                        this.processDescriptionItem(item.getValueAsString(), i);
                    }
                }
            }
        }
    }
    processDescriptionItem(value, index) {
        if (value == "eventSymbol") {
            this.eventSymbolIndex = index;
        } else if (value == "eventTime") {
            this.eventTimeIndex = index;
        } else if (value == "sequence") {
            this.sequenceIndex = index;
        } else if (value == "timeNanoPart") {
            this.timeNanoPartIndex = index;
        } else if (value == "bidTime") {
            this.bidTimeIndex = index;
        } else if (value == "bidExchangeCode") {
            this.bidExchangeCodeIndex = index;
        } else if (value == "bidPrice") {
            this.bidPriceIndex = index;
        } else if (value == "bidSize") {
            this.bidSizeIndex = index;
        } else if (value == "askTime") {
            this.askTimeIndex = index;
        } else if (value == "askExchangeCode") {
            this.askExchangeCodeIndex = index;
        } else if (value == "askPrice") {
            this.askPriceIndex = index;
        } else if (value == "askSize") {
            this.askSizeIndex = index;
        }
    }
    parse(node, dxFeedQuotesList) {
        let n, len;
        n = 0;
        len = node.getChildrenCount();
        while(n <= len - this.parametersNumber) {
            dxFeedQuotesList.add(this.parseQuotte(node, n));
            n = n + this.parametersNumber;
        }
    }
    parseQuotte(node, n) {
        return DXFeedQuote.create(node.getChildByIndex(this.eventSymbolIndex + n).getValueAsString(), node.getChildByIndex(this.bidTimeIndex + n).getValueAsDatetime(), node.getChildByIndex(this.askTimeIndex + n).getValueAsDatetime(), JsonReaderUtil.getRealFromJsonNode(node.getChildByIndex(this.bidPriceIndex + n)), JsonReaderUtil.getRealFromJsonNode(node.getChildByIndex(this.askPriceIndex + n)), JsonReaderUtil.getRealFromJsonNode(node.getChildByIndex(this.bidSizeIndex + n)), JsonReaderUtil.getRealFromJsonNode(node.getChildByIndex(this.askSizeIndex + n)), node.getChildByIndex(this.bidExchangeCodeIndex + n).getValueAsString(), node.getChildByIndex(this.askExchangeCodeIndex + n).getValueAsString());
    }
}
module.exports = DxFeedReceiveQuotesDataReader
