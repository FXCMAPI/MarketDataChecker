'use strict';
let ClosedPositionsStorage = require('./ClosedPositionsStorage.js');
let DataManagerState = require('./DataManagerState.js');
let DataManagerStatePublisher = require('./DataManagerStatePublisher.js');
let CommonPublisher = require('./CommonPublisher.js');
let LogManager = require('./LogManager.js');
let exception = require('@gehtsoft/LuaxStdlib-node').exception;
let FXConnectLiteErrorCodes = require('./FXConnectLiteErrorCodes.js');
let stdlib = require('@gehtsoft/LuaxStdlib-node').stdlib;
let ClosedPositionBuilder = require('./ClosedPositionBuilder.js');
let MessageType = require('./MessageType.js');
let list = require('@gehtsoft/LuaxStdlib-node').list;
let CollectionUtils = require('./CollectionUtils.js');
let ExecutionTimeEvenUtil = require('./ExecutionTimeEvenUtil.js');
let ClosedPositionInfoBuilder = require('./ClosedPositionInfoBuilder.js');
let UpdateCommandType = require('./UpdateCommandType.js');
let ExecutionTimeEventName = require('./ExecutionTimeEventName.js');
class ClosedPositionsManager {
    storage;
    state;
    stateChangePublisher;
    closedPositionChangePublisher;
    messageRouter;
    commandFactory;
    sessionProvider;
    messageFactory;
    requestNumberGenerator;
    messageExecutor;
    receiveNewMessageListener;
    connectionStatusManager;
    meLoaded;
    closedPositionCalculator;
    logger;
    instrumentsProvider;
    getInstrumentsCallback;
    eventRefresh;
    constructor() {
        this.meLoaded = false;
        this.storage = new ClosedPositionsStorage();
        this.state = new DataManagerState();
        this.stateChangePublisher = new DataManagerStatePublisher();
        this.closedPositionChangePublisher = new CommonPublisher();
        this.setReceiveNewMessageListener();
        this.getInstrumentsCallback = ClosedPositionsManager.GetInstrumentsCallback.create(this);
        this.logger = LogManager.getLogger();
    }
    static create(commandFactory, messageRouter, messageExecutor, sessionProvider, messageFactory, requestNumberGenerator, connectionStatusManager, closedPositionCalculator, instrumentsProvider) {
        let result;
        result = new ClosedPositionsManager();
        result.commandFactory = commandFactory;
        result.messageRouter = messageRouter;
        result.messageExecutor = messageExecutor;
        result.sessionProvider = sessionProvider;
        result.messageFactory = messageFactory;
        result.requestNumberGenerator = requestNumberGenerator;
        result.connectionStatusManager = connectionStatusManager;
        result.closedPositionCalculator = closedPositionCalculator;
        result.instrumentsProvider = instrumentsProvider;
        result.subscribeOnRequiredMessages();
        return result;
    }
    subscribeStateChange(listener) {
        if (listener == null) {
            this.logger.error("ClosedPositionsManager.subscribeStateChange(): listener is not set");
            throw exception.create(FXConnectLiteErrorCodes.CODE_REQUIRED_PARAMETER_NOT_SET, "listener is not set");
        }
        this.stateChangePublisher.subscribe(listener);
    }
    unsubscribeStateChange(listener) {
        if (listener == null) {
            this.logger.error("ClosedPositionsManager.unsubscribeStateChange(): listener is not set");
            throw exception.create(FXConnectLiteErrorCodes.CODE_REQUIRED_PARAMETER_NOT_SET, "listener is not set");
        }
        this.stateChangePublisher.unsubscribe(listener);
    }
    subscribeClosedPositionChange(listener) {
        if (listener == null) {
            this.logger.error("ClosedPositionsManager.subscribeClosedPositionChange(): listener is not set");
            throw exception.create(FXConnectLiteErrorCodes.CODE_REQUIRED_PARAMETER_NOT_SET, "listener is not set");
        }
        this.closedPositionChangePublisher.subscribe(listener);
    }
    unsubscribeClosedPositionChange(listener) {
        if (listener == null) {
            this.logger.error("ClosedPositionsManager.unsubscribeClosedPositionChange(): listener is not set");
            throw exception.create(FXConnectLiteErrorCodes.CODE_REQUIRED_PARAMETER_NOT_SET, "listener is not set");
        }
        this.closedPositionChangePublisher.subscribe(listener);
    }
    getClosedPosition(tradeId) {
        let closedPosition, calculatedFields;
        if (tradeId == null || stdlib.len(tradeId) == 0) {
            this.logger.error("ClosedPositionsManager.getClosedPosition(): tradeId is not set");
            throw exception.create(FXConnectLiteErrorCodes.CODE_REQUIRED_PARAMETER_NOT_SET, "tradeId is not set");
        }
        this.logger.info("ClosedPositionsManager. Get closed position by id: " + tradeId);
        closedPosition = this.storage.getClosedPositionByTradeId(tradeId);
        if (closedPosition == null) {
            this.logger.info("ClosedPositionsManager. Closed position with id: " + tradeId + " not exist");
            return null;
        }
        calculatedFields = this.closedPositionCalculator.calculate(closedPosition);
        return this.combineToClosedPosition(closedPosition, calculatedFields);
    }
    getClosedPositionsSnapshot() {
        let closePositions, result, calculatedFields, i;
        this.logger.info("ClosedPositionsManager. Get closed positions snapshot");
        closePositions = this.storage.getAllClosedPositions();
        result = new Array(closePositions.length);
        for (i = 0; i <= closePositions.length - 1; i += 1) {
            calculatedFields = this.closedPositionCalculator.calculate(closePositions[i]);
            result[i] = this.combineToClosedPosition(closePositions[i], calculatedFields);
        }
        return result;
    }
    combineToClosedPosition(rawClosePosition, calculatedFields) {
        let closedPositionBuilder;
        closedPositionBuilder = this.copyClosedPosition(rawClosePosition);
        closedPositionBuilder.setPL(calculatedFields.getPL());
        closedPositionBuilder.setPLPips(calculatedFields.getPLPips());
        closedPositionBuilder.setNetPL(calculatedFields.getNetPL());
        return closedPositionBuilder.build();
    }
    copyClosedPosition(closedPosition) {
        let builder;
        builder = new ClosedPositionBuilder();
        builder.setTradeID(closedPosition.getTradeID());
        builder.setAccountId(closedPosition.getAccountId());
        builder.setAccountName(closedPosition.getAccountName());
        builder.setAccountKind(closedPosition.getAccountKind());
        builder.setOfferId(closedPosition.getOfferId());
        builder.setAmount(closedPosition.getAmount());
        builder.setBuySell(closedPosition.getBuySell());
        builder.setOpenRate(closedPosition.getOpenRate());
        builder.setOpenTime(closedPosition.getOpenTime());
        builder.setOpenQuoteId(closedPosition.getOpenQuoteId());
        builder.setOpenOrderId(closedPosition.getOpenOrderId());
        builder.setOpenOrderReqId(closedPosition.getOpenOrderReqId());
        builder.setOpenOrderRequestTXT(closedPosition.getOpenOrderRequestTXT());
        builder.setCloseRate(closedPosition.getCloseRate());
        builder.setCloseTime(closedPosition.getCloseTime());
        builder.setCloseQuoteId(closedPosition.getCloseQuoteId());
        builder.setCloseOrderId(closedPosition.getCloseOrderId());
        builder.setCloseOrderReqId(closedPosition.getCloseOrderReqId());
        builder.setCloseOrderRequestTXT(closedPosition.getCloseOrderRequestTXT());
        builder.setCloseOrderParties(closedPosition.getCloseOrderParties());
        builder.setCommission(closedPosition.getCommission());
        builder.setRolloverInterest(closedPosition.getRolloverInterest());
        builder.setTradeIdOrigin(closedPosition.getTradeIdOrigin());
        builder.setTradeIdRemain(closedPosition.getTradeIdRemain());
        builder.setValueDate(closedPosition.getValueDate());
        builder.setGrossPL(closedPosition.getGrossPL());
        builder.setDividends(closedPosition.getDividends());
        return builder;
    }
    notifyStateChange(stateStatus) {
        this.logger.debug("ClosedPositionsManager. State status changed: " + (stateStatus).toString());
        this.state.setState(stateStatus);
        this.stateChangePublisher.notifyStateChange(this.state);
    }
    setReceiveNewMessageListener() {
        this.receiveNewMessageListener = ClosedPositionsManager.ReceiveNewMessageListener.create(this);
    }
    subscribeOnRequiredMessages() {
        this.messageRouter.subscribeNewMessageReceive(MessageType.GetClosedPositions, this.receiveNewMessageListener);
        this.messageRouter.subscribeNewMessageReceive(MessageType.ClosedPositionUpdateMessage, this.receiveNewMessageListener);
        this.messageRouter.subscribeNewMessageReceive(MessageType.Disconnected, this.receiveNewMessageListener);
    }
    processMessage(message) {
        let getClosedPositionsMessage, closedPositions, updateClosedPositionMessage, i;
        this.logger.debug("ClosedPositionsManager. Receive message: " + message.getType());
        if (message.getType() == MessageType.GetClosedPositions) {
            getClosedPositionsMessage = message;
            closedPositions = getClosedPositionsMessage.getClosedPositions();
            for (i = 0; i <= closedPositions.length - 1; i += 1) {
                this.storage.addClosedPosition(closedPositions[i].getClosedPosition());
            }
            if (!this.getState().isLoaded()) {
                this.meLoaded = true;
                this.loadInstrumentsIfRequired();
            }
        } else if (message.getType() == MessageType.ClosedPositionUpdateMessage) {
            updateClosedPositionMessage = message;
            this.updateClosedPosition(updateClosedPositionMessage.getUpdateCommand(), updateClosedPositionMessage.getPosition());
        } else if (message.getType() == MessageType.Disconnected) {
            this.setDisconnected();
        }
    }
    setDisconnected() {
        this.storage.clear();
        this.notifyStateChange(DataManagerState.NOT_LOADED);
        this.meLoaded = false;
    }
    loadInstrumentsIfRequired() {
        let offerIds, positions, i;
        positions = this.storage.getAllClosedPositions();
        offerIds = new list();
        for (i = 0; i <= positions.length - 1; i += 1) {
            CollectionUtils.addStringToList(offerIds, positions[i].getOfferId());
        }
        if (offerIds.length() > 0) {
            this.instrumentsProvider.getOrLoadInstrumentsByOfferIds(CollectionUtils.stringListToArray(offerIds), this.getInstrumentsCallback);
        }
        else {
            this.completeRefresh();
        }
    }
    completeRefresh() {
        ExecutionTimeEvenUtil.eventStop(this.eventRefresh);
        this.notifyStateChange(DataManagerState.LOADED);
        this.notifyOnRefresh();
    }
    updateClosedPosition(updateType, updClosedPosition) {
        let oldClosedPosition, oldClosedPositionBuilder, closedPositionInfo, closedPositionInfoBuilder, id;
        id = updClosedPosition.getClosedPosition().getTradeID();
        closedPositionInfoBuilder = new ClosedPositionInfoBuilder();
        closedPositionInfoBuilder.setId(id);
        closedPositionInfo = closedPositionInfoBuilder.build();
        if (updateType == UpdateCommandType.UPDATE) {
            if (!this.getState().isLoaded()) {
                return;
            }
            oldClosedPosition = this.storage.getClosedPositionByTradeId(id);
            oldClosedPositionBuilder = oldClosedPosition;
            this.makeUpdate(oldClosedPositionBuilder, updClosedPosition);
            this.notifyOnChanged(closedPositionInfo);
        } else if (updateType == UpdateCommandType.INSERT) {
            this.storage.addClosedPosition(updClosedPosition.getClosedPosition());
            this.notifyOnInsert(closedPositionInfo);
        }
    }
    makeUpdate(oldClosedPositionBuilder, updClosedPosition) {
        this.makeUpdate1(oldClosedPositionBuilder, updClosedPosition);
        this.makeUpdate2(oldClosedPositionBuilder, updClosedPosition);
    }
    makeUpdate1(oldClosedPositionBuilder, updClosedPosition) {
        if (updClosedPosition.isAccountIdChanged()) {
            oldClosedPositionBuilder.setAccountId(updClosedPosition.getClosedPosition().getAccountId());
        }
        if (updClosedPosition.isAccountNameChanged()) {
            oldClosedPositionBuilder.setAccountName(updClosedPosition.getClosedPosition().getAccountName());
        }
        if (updClosedPosition.isAccountKindChanged()) {
            oldClosedPositionBuilder.setAccountKind(updClosedPosition.getClosedPosition().getAccountKind());
        }
        if (updClosedPosition.isOfferIdChanged()) {
            oldClosedPositionBuilder.setOfferId(updClosedPosition.getClosedPosition().getOfferId());
        }
        if (updClosedPosition.isBuySellChanged()) {
            oldClosedPositionBuilder.setBuySell(updClosedPosition.getClosedPosition().getBuySell());
        }
        if (updClosedPosition.isOpenOrderIdChanged()) {
            oldClosedPositionBuilder.setOpenOrderId(updClosedPosition.getClosedPosition().getOpenOrderId());
        }
        if (updClosedPosition.isOpenOrderReqIdChanged()) {
            oldClosedPositionBuilder.setOpenOrderReqId(updClosedPosition.getClosedPosition().getOpenOrderReqId());
        }
        if (updClosedPosition.isOpenOrderRequestTXTChanged()) {
            oldClosedPositionBuilder.setOpenOrderRequestTXT(updClosedPosition.getClosedPosition().getOpenOrderRequestTXT());
        }
        if (updClosedPosition.isCloseRateChanged()) {
            oldClosedPositionBuilder.setCloseRate(updClosedPosition.getClosedPosition().getCloseRate());
        }
        if (updClosedPosition.isCloseTimeChanged()) {
            oldClosedPositionBuilder.setCloseTime(updClosedPosition.getClosedPosition().getCloseTime());
        }
        if (updClosedPosition.isCloseQuoteIdChanged()) {
            oldClosedPositionBuilder.setCloseQuoteId(updClosedPosition.getClosedPosition().getCloseQuoteId());
        }
        if (updClosedPosition.isCloseOrderIdChanged()) {
            oldClosedPositionBuilder.setCloseOrderId(updClosedPosition.getClosedPosition().getCloseOrderId());
        }
        if (updClosedPosition.isCloseOrderReqIdChanged()) {
            oldClosedPositionBuilder.setCloseOrderReqId(updClosedPosition.getClosedPosition().getCloseOrderReqId());
        }
    }
    makeUpdate2(oldClosedPositionBuilder, updClosedPosition) {
        if (updClosedPosition.isCloseOrderRequestTXTChanged()) {
            oldClosedPositionBuilder.setCloseOrderRequestTXT(updClosedPosition.getClosedPosition().getCloseOrderRequestTXT());
        }
        if (updClosedPosition.isCloseOrderPartiesChanged()) {
            oldClosedPositionBuilder.setCloseOrderParties(updClosedPosition.getClosedPosition().getCloseOrderParties());
        }
        if (updClosedPosition.isTradeIdRemainChanged()) {
            oldClosedPositionBuilder.setTradeIdRemain(updClosedPosition.getClosedPosition().getTradeIdRemain());
        }
        if (updClosedPosition.isGrossPLChanged()) {
            oldClosedPositionBuilder.setGrossPL(updClosedPosition.getClosedPosition().getGrossPL());
        }
        if (updClosedPosition.isAmountChanged()) {
            oldClosedPositionBuilder.setAmount(updClosedPosition.getClosedPosition().getAmount());
        }
        if (updClosedPosition.isOpenRateChanged()) {
            oldClosedPositionBuilder.setOpenRate(updClosedPosition.getClosedPosition().getOpenRate());
        }
        if (updClosedPosition.isOpenTimeChanged()) {
            oldClosedPositionBuilder.setOpenTime(updClosedPosition.getClosedPosition().getOpenTime());
        }
        if (updClosedPosition.isOpenQuoteIdChanged()) {
            oldClosedPositionBuilder.setOpenQuoteId(updClosedPosition.getClosedPosition().getOpenQuoteId());
        }
        if (updClosedPosition.isCommissionChanged()) {
            oldClosedPositionBuilder.setCommission(updClosedPosition.getClosedPosition().getCommission());
        }
        if (updClosedPosition.isRolloverInterestChanged()) {
            oldClosedPositionBuilder.setRolloverInterest(updClosedPosition.getClosedPosition().getRolloverInterest());
        }
        if (updClosedPosition.isTradeIdOriginChanged()) {
            oldClosedPositionBuilder.setTradeIdOrigin(updClosedPosition.getClosedPosition().getTradeIdOrigin());
        }
        if (updClosedPosition.isValueDateChanged()) {
            oldClosedPositionBuilder.setValueDate(updClosedPosition.getClosedPosition().getValueDate());
        }
        if (updClosedPosition.isDividendsChanged()) {
            oldClosedPositionBuilder.setDividends(updClosedPosition.getClosedPosition().getDividends());
        }
    }
    notifyOnChanged(closedPositionInfo) {
        this.closedPositionChangePublisher.notifyAction(ClosedPositionsManager.OnChangedAction.create(closedPositionInfo));
    }
    notifyOnInsert(closedPositionInfo) {
        this.closedPositionChangePublisher.notifyAction(ClosedPositionsManager.OnInsertAction.create(closedPositionInfo));
    }
    getState() {
        return this.state;
    }
    refresh() {
        let getAllClosedPositionsCommand;
        this.logger.info("ClosedPositionsManager. Load all closed positions from server");
        if (this.getState().isLoading()) {
            this.logger.warning("ClosedPositionsManager. Manager not loaded yet");
            return;
        }
        if (!this.connectionStatusManager.getConnectionStatus().isConnected()) {
            this.logger.warning("ClosedPositionsManager. Session not connected");
            return;
        }
        this.storage.clear();
        this.eventRefresh = ExecutionTimeEvenUtil.eventStart(ExecutionTimeEventName.ClosedPositionsManagerRefreshTime);
        this.notifyStateChange(DataManagerState.LOADING);
        getAllClosedPositionsCommand = this.commandFactory.createGetClosedPositionsCommand(this.messageExecutor, this.sessionProvider.getSession(), this.messageFactory, this.requestNumberGenerator);
        getAllClosedPositionsCommand.subscribeStatusChange(ClosedPositionsManager.GetCommandStatusListener.create(this));
        getAllClosedPositionsCommand.execute();
    }
    notifyOnRefresh() {
        this.closedPositionChangePublisher.notifyAction(ClosedPositionsManager.OnRefreshAction.create());
    }
}
module.exports = ClosedPositionsManager
ClosedPositionsManager.GetCommandStatusListener = class {
    owner;
    _owner_;
    constructor(_owner_) {
        this._owner_ = _owner_;
    }
    static create(owner) {
        let instance;
        instance = new ClosedPositionsManager.GetCommandStatusListener(this);
        instance.owner = owner;
        return instance;
    }
    onSuccess(message) {
        return void(0);
    }
    onError(error) {
        this.owner.setDisconnected();
    }
    onCancel() {
        this.owner.setDisconnected();
    }
}
ClosedPositionsManager.OnChangedAction = class {
    listener;
    closedPositionInfo;
    _owner_;
    constructor(_owner_) {
        this._owner_ = _owner_;
    }
    static create(closedPositionInfo) {
        let result;
        result = new ClosedPositionsManager.OnChangedAction(this);
        result.closedPositionInfo = closedPositionInfo;
        return result;
    }
    setListener(listener) {
        this.listener = listener;
    }
    execute() {
        this.listener.onChange(this.closedPositionInfo);
    }
}
ClosedPositionsManager.OnInsertAction = class {
    listener;
    closedPositionInfo;
    _owner_;
    constructor(_owner_) {
        this._owner_ = _owner_;
    }
    static create(closedPositionInfo) {
        let result;
        result = new ClosedPositionsManager.OnInsertAction(this);
        result.closedPositionInfo = closedPositionInfo;
        return result;
    }
    setListener(listener) {
        this.listener = listener;
    }
    execute() {
        this.listener.onAdd(this.closedPositionInfo);
    }
}
ClosedPositionsManager.OnRefreshAction = class {
    listener;
    _owner_;
    constructor(_owner_) {
        this._owner_ = _owner_;
    }
    static create() {
        let result;
        result = new ClosedPositionsManager.OnRefreshAction(this);
        return result;
    }
    setListener(listener) {
        this.listener = listener;
    }
    execute() {
        this.listener.onRefresh();
    }
}
ClosedPositionsManager.ReceiveNewMessageListener = class {
    owner;
    _owner_;
    constructor(_owner_) {
        this._owner_ = _owner_;
    }
    onNewMessageReceive(message) {
        this.owner.processMessage(message);
    }
    static create(owner) {
        let instance;
        instance = new ClosedPositionsManager.ReceiveNewMessageListener(this);
        instance.owner = owner;
        return instance;
    }
}
ClosedPositionsManager.GetInstrumentsCallback = class {
    owner;
    _owner_;
    constructor(_owner_) {
        this._owner_ = _owner_;
    }
    onSuccess(instruments) {
        this.owner.completeRefresh();
    }
    onError(error) {
        this.owner.completeRefresh();
    }
    static create(owner) {
        let instance;
        instance = new ClosedPositionsManager.GetInstrumentsCallback(this);
        instance.owner = owner;
        return instance;
    }
}
