'use strict';
let ABatchFxmsgReader = require('./ABatchFxmsgReader.js');
let AccountCommissionsCsvParser = require('./AccountCommissionsCsvParser.js');
let PdasRequestCommand = require('./PdasRequestCommand.js');
let GetAccountCommissionsMessageBuilder = require('./GetAccountCommissionsMessageBuilder.js');
let AccountCommissionsList = require('./AccountCommissionsList.js');
class GetAccountCommissionsFxmsgReader extends ABatchFxmsgReader {
    accountCommissionCsvParser;
    constructor() {
        super();
        this.accountCommissionCsvParser = new AccountCommissionsCsvParser();
    }
    getExpectedCommand() {
        return PdasRequestCommand.GET_ACCOUNT_COMMISSIONS;
    }
    processData(responseList, data, acctId, offerIds) {
        let getAccountCommissionsMessageBuilder;
        getAccountCommissionsMessageBuilder = new GetAccountCommissionsMessageBuilder();
        getAccountCommissionsMessageBuilder.addAccountCommissions(this.parseAccountCommission(data, acctId));
        getAccountCommissionsMessageBuilder.setAcctId(acctId);
        getAccountCommissionsMessageBuilder.setOfferIds(offerIds);
        responseList.add(this.createLockedMessage(getAccountCommissionsMessageBuilder.build()));
    }
    parseAccountCommission(data, acctId) {
        let lines, i, j, accountCommissionsList, accountCommissions;
        accountCommissionsList = new AccountCommissionsList();
        lines = this.linesParser.splitLine(data);
        for (i = 0; i <= lines.length - 1; i += 1) {
            accountCommissions = this.accountCommissionCsvParser.parse(lines[i]);
            if (accountCommissions != null) {
                for (j = 0; j <= accountCommissions.length - 1; j += 1) {
                    accountCommissions[j].setAcctId(acctId);
                    accountCommissionsList.add(accountCommissions[j]);
                }
            }
        }
        return accountCommissionsList;
    }
}
module.exports = GetAccountCommissionsFxmsgReader
