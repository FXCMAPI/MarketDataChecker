'use strict';
let AFxmsgReader = require('./AFxmsgReader.js');
let csvParser = require('@gehtsoft/LuaxStdlib-node').csvParser;
let ClosedPositionCsvParser = require('./ClosedPositionCsvParser.js');
let PdasMessageFieldTag = require('./PdasMessageFieldTag.js');
let GetClosedPositionsMessageBuilder = require('./GetClosedPositionsMessageBuilder.js');
let PdasMessageType = require('./PdasMessageType.js');
let PdasRequestCommand = require('./PdasRequestCommand.js');
let ClosedPositionsList = require('./ClosedPositionsList.js');
class GetClosedPositionsFxmsgReader extends AFxmsgReader {
    linesParser;
    closedPositionCsvParser;
    constructor() {
        super();
        this.linesParser = new csvParser();
        this.linesParser.valueSeparator = "\n";
        this.closedPositionCsvParser = new ClosedPositionCsvParser();
    }
    read(responseList, xmlRootNode, messages) {
        let data, i, getClosedPositionsMessageBuilder;
        if (messages == null || messages.length == 0) {
            return;
        }
        for (i = 0; i <= messages.length - 1; i += 1) {
            if (messages[i].getType() == PdasMessageType.FXCM_RESPONSE && messages[i].getFieldValue(PdasMessageFieldTag.FXCM_COMMAND_ID) == PdasRequestCommand.GET_CLOSED_POSITIONS) {
                data = messages[i].getList(PdasMessageFieldTag.FXCM_NO_PARAM).getGroupParamValueByParamName("DAS");
                if (data != null) {
                    getClosedPositionsMessageBuilder = new GetClosedPositionsMessageBuilder();
                    getClosedPositionsMessageBuilder.addClosedPositions(this.parseClosedPositions(data));
                    responseList.add(this.createLockedMessage(getClosedPositionsMessageBuilder.build()));
                }
            }
        }
    }
    parseClosedPositions(data) {
        let lines, i, closedPositionsList, closedPosition;
        closedPositionsList = new ClosedPositionsList();
        lines = this.linesParser.splitLine(data);
        for (i = 0; i <= lines.length - 1; i += 1) {
            closedPosition = this.closedPositionCsvParser.parse(lines[i]);
            if (closedPosition != null) {
                closedPositionsList.add(closedPosition);
            }
        }
        return closedPositionsList;
    }
}
module.exports = GetClosedPositionsFxmsgReader
