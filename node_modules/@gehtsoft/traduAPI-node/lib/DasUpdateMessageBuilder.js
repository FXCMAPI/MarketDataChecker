'use strict';
let InstrumentCsvParser = require('./InstrumentCsvParser.js');
let AccountCsvParser = require('./AccountCsvParser.js');
let OffersCsvParser = require('./OffersCsvParser.js');
let OpenPositionCsvParser = require('./OpenPositionCsvParser.js');
let OrderCsvParser = require('./OrderCsvParser.js');
let ClosedPositionCsvParser = require('./ClosedPositionCsvParser.js');
let ClientMessageCsvParser = require('./ClientMessageCsvParser.js');
let csvParser = require('@gehtsoft/LuaxStdlib-node').csvParser;
let SystemPropertyUpdateMessageBuilder = require('./SystemPropertyUpdateMessageBuilder.js');
let ClientMessageUpdateMessageBuilder = require('./ClientMessageUpdateMessageBuilder.js');
let OfferUpdateMessageBuilder = require('./OfferUpdateMessageBuilder.js');
let AccountUpdateMessageBuilder = require('./AccountUpdateMessageBuilder.js');
let InstrumentUpdateMessageBuilder = require('./InstrumentUpdateMessageBuilder.js');
let OpenPositionUpdateMessageBuilder = require('./OpenPositionUpdateMessageBuilder.js');
let OrderUpdateMessageBuilder = require('./OrderUpdateMessageBuilder.js');
let ClosedPositionUpdateMessageBuilder = require('./ClosedPositionUpdateMessageBuilder.js');
class DasUpdateMessageBuilder {
    instrumentCsvParser;
    accountCsvParser;
    offerCsvParser;
    positionCsvParser;
    orderCsvParser;
    closedPositionCsvParser;
    clientMessageCsvParser;
    csvParserInstance;
    constructor() {
        this.instrumentCsvParser = new InstrumentCsvParser();
        this.accountCsvParser = new AccountCsvParser();
        this.offerCsvParser = new OffersCsvParser();
        this.positionCsvParser = new OpenPositionCsvParser();
        this.orderCsvParser = new OrderCsvParser();
        this.closedPositionCsvParser = new ClosedPositionCsvParser();
        this.clientMessageCsvParser = new ClientMessageCsvParser();
        this.csvParserInstance = new csvParser();
        this.csvParserInstance.valueSeparator = ";";
    }
    isSupportType(type) {
        if (type == "ACCT") {
            return true;
        } else if (type == "INSTRMT") {
            return true;
        } else if (type == "OFFER") {
            return true;
        } else if (type == "TRADE") {
            return true;
        } else if (type == "ORDER") {
            return true;
        } else if (type == "CLSDTRADE") {
            return true;
        } else if (type == "MAIL") {
            return true;
        } else if (type == "PARAM") {
            return true;
        }         else {
            return false;
        }
    }
    create(type, operation, data) {
        if (type == "ACCT") {
            return this.toIMessage(this.createAccountMessage(operation, data));
        } else if (type == "INSTRMT") {
            return this.toIMessage(this.createInstrumentMessage(operation, data));
        } else if (type == "OFFER") {
            return this.toIMessage(this.createOfferMessage(operation, data));
        } else if (type == "TRADE") {
            return this.toIMessage(this.createPositionMessage(operation, data));
        } else if (type == "ORDER") {
            return this.toIMessage(this.createOrderMessage(operation, data));
        } else if (type == "CLSDTRADE") {
            return this.toIMessage(this.createClosedPositionMessage(operation, data));
        } else if (type == "MAIL") {
            return this.toIMessage(this.createClientMessageMessage(operation, data));
        }
        return this.toIMessage(this.createPropertyUpdateMessage(operation, data));
    }
    toIMessage(mess) {
        return mess;
    }
    createPropertyUpdateMessage(operation, data) {
        let messageBuilder, splittedText;
        if (operation == "U") {
            splittedText = this.csvParserInstance.splitLine(data);
            if (splittedText.length > 4) {
                messageBuilder = new SystemPropertyUpdateMessageBuilder();
                messageBuilder.setParameterName(splittedText[0]);
                messageBuilder.setParameterValue(splittedText[4]);
                return messageBuilder.build();
            }
        }
        return null;
    }
    createClientMessageMessage(operation, data) {
        let messageBuilder, message;
        if (operation == "I") {
            message = this.clientMessageCsvParser.parse(data);
            if (message != null) {
                messageBuilder = new ClientMessageUpdateMessageBuilder();
                messageBuilder.setClientMessage(message);
                return messageBuilder.build();
            }
        }
        return null;
    }
    createOfferMessage(operation, data) {
        let offerUpdateMessageBuilder, message;
        message = this.offerCsvParser.parse(data);
        if (message != null) {
            offerUpdateMessageBuilder = new OfferUpdateMessageBuilder();
            offerUpdateMessageBuilder.setOffer(message);
            offerUpdateMessageBuilder.setUpdateCommand(operation);
            return offerUpdateMessageBuilder.build();
        }
        return null;
    }
    createAccountMessage(operation, data) {
        let accountUpdateMessageBuilder, message;
        message = this.accountCsvParser.parse(data);
        if (message != null) {
            accountUpdateMessageBuilder = new AccountUpdateMessageBuilder();
            accountUpdateMessageBuilder.setAccount(message);
            accountUpdateMessageBuilder.setUpdateCommand(operation);
            return accountUpdateMessageBuilder.build();
        }
        return null;
    }
    createInstrumentMessage(operation, data) {
        let instrumentUpdateMessageBuilder, message;
        message = this.instrumentCsvParser.parse(data);
        if (message != null) {
            instrumentUpdateMessageBuilder = new InstrumentUpdateMessageBuilder();
            instrumentUpdateMessageBuilder.setInstrument(message);
            instrumentUpdateMessageBuilder.setUpdateCommand(operation);
            return instrumentUpdateMessageBuilder.build();
        }
        return null;
    }
    createPositionMessage(operation, data) {
        let positionUpdateMessageBuilder, message;
        message = this.positionCsvParser.parse(data);
        if (message != null) {
            positionUpdateMessageBuilder = new OpenPositionUpdateMessageBuilder();
            positionUpdateMessageBuilder.setPosition(message);
            positionUpdateMessageBuilder.setUpdateCommand(operation);
            return positionUpdateMessageBuilder.build();
        }
        return null;
    }
    createOrderMessage(operation, data) {
        let orderUpdateMessageBuilder, message;
        message = this.orderCsvParser.parse(data);
        if (message != null) {
            orderUpdateMessageBuilder = new OrderUpdateMessageBuilder();
            orderUpdateMessageBuilder.setOrder(message);
            orderUpdateMessageBuilder.setUpdateCommand(operation);
            return orderUpdateMessageBuilder.build();
        }
        return null;
    }
    createClosedPositionMessage(operation, data) {
        let positionUpdateMessageBuilder, message;
        message = this.closedPositionCsvParser.parse(data);
        if (message != null) {
            positionUpdateMessageBuilder = new ClosedPositionUpdateMessageBuilder();
            positionUpdateMessageBuilder.setPosition(message);
            positionUpdateMessageBuilder.setUpdateCommand(operation);
            return positionUpdateMessageBuilder.build();
        }
        return null;
    }
}
module.exports = DasUpdateMessageBuilder
