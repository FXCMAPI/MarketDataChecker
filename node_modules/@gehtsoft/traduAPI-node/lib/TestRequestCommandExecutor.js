'use strict';
class TestRequestCommandExecutor {
    static get DEFAULT_PERIOD_MILLISECOND() { return 30000; }
    priceSessionCommandExecutor;
    pdasPriceTerminalControllerCallback;
    connectionParameters;
    commandFactory;
    messageFactory;
    requestNumberGenerator;
    messageExecutor;
    messageRouter;
    priceSessionProvider;
    connectionStatusManager;
    priceTerminal;
    testRequestController;
    testRequestControllerFactory;
    testRequestControllerCallback;
    constructor() {
        this.priceSessionCommandExecutor = null;
        this.pdasPriceTerminalControllerCallback = null;
        this.testRequestController = null;
        this.testRequestControllerCallback = null;
        this.connectionParameters = null;
        this.commandFactory = null;
        this.messageFactory = null;
        this.requestNumberGenerator = null;
        this.messageExecutor = null;
        this.messageRouter = null;
        this.priceSessionProvider = null;
        this.connectionStatusManager = null;
        this.priceTerminal = null;
    }
    setSuccessor(priceSessionCommandExecutor) {
        this.priceSessionCommandExecutor = priceSessionCommandExecutor;
    }
    execute(pdasPriceTerminalControllerCallback) {
        this.pdasPriceTerminalControllerCallback = pdasPriceTerminalControllerCallback;
        if (this.priceSessionProvider.getSession() != null) {
            this.testRequestController = this.testRequestControllerFactory.createTestRequestPrices(this.commandFactory, this.connectionParameters, this.priceSessionProvider, this.messageFactory, this.messageExecutor, this.messageRouter, this.requestNumberGenerator, TestRequestCommandExecutor.DEFAULT_PERIOD_MILLISECOND, this.priceTerminal, this.testRequestControllerCallback);
            this.testRequestController.start();
            if (this.priceSessionCommandExecutor != null) {
                this.priceSessionCommandExecutor.execute(pdasPriceTerminalControllerCallback);
            }
        }
        else {
            pdasPriceTerminalControllerCallback.onError("The pdas price session is empty.");
        }
    }
    static create(commandEnvironment, commandFactory, priceSessionProvider, connectionStatusManager, priceTerminal, testRequestControllerFactory, testRequestControllerCallback) {
        let testRequestCommandExecutor;
        testRequestCommandExecutor = new TestRequestCommandExecutor();
        testRequestCommandExecutor.connectionParameters = commandEnvironment.getConnectionParameters();
        testRequestCommandExecutor.commandFactory = commandFactory;
        testRequestCommandExecutor.messageFactory = commandEnvironment.getMessageFactory();
        testRequestCommandExecutor.requestNumberGenerator = commandEnvironment.getRequestNumberGenerator();
        testRequestCommandExecutor.messageExecutor = commandEnvironment.getMessageExecutor();
        testRequestCommandExecutor.messageRouter = commandEnvironment.getMessageRouter();
        testRequestCommandExecutor.priceSessionProvider = priceSessionProvider;
        testRequestCommandExecutor.connectionStatusManager = connectionStatusManager;
        testRequestCommandExecutor.priceTerminal = priceTerminal;
        testRequestCommandExecutor.testRequestControllerFactory = testRequestControllerFactory;
        testRequestCommandExecutor.testRequestControllerCallback = testRequestControllerCallback;
        return testRequestCommandExecutor;
    }
    stop() {
        if (this.testRequestController != null) {
            this.testRequestController.shutdown();
        }
    }
}
module.exports = TestRequestCommandExecutor
