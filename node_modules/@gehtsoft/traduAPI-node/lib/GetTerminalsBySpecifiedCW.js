'use strict';
let LogManager = require('./LogManager.js');
let HostsReceiver = require('./HostsReceiver.js');
let MessageType = require('./MessageType.js');
let LoginError = require('./LoginError.js');
class GetTerminalsBySpecifiedCW {
    static get INCORRECT_CREDENTIALS_ERROR() { return "Incorrect user name or password"; }
    static get INCORRECT_CONNECTION_ERROR() { return "Incorrect connection"; }
    login;
    tradingSystemUrl;
    connection;
    subId;
    callback;
    tradingTerminalsCommand;
    communicator;
    connectionParameters;
    logger;
    commandFactory;
    constructor() {
        this.logger = LogManager.getLogger();
        this.tradingTerminalsCommand = null;
    }
    static create(commandFactory, communicator, connectionParameters, login, tradingSystemUrl, connection, subId, callback) {
        let result;
        result = new GetTerminalsBySpecifiedCW();
        result.login = login;
        result.tradingSystemUrl = tradingSystemUrl;
        result.connection = connection;
        result.subId = subId;
        result.callback = callback;
        result.communicator = communicator;
        result.connectionParameters = connectionParameters;
        result.commandFactory = commandFactory;
        return result;
    }
    stop() {
        if (this.tradingTerminalsCommand != null) {
            this.tradingTerminalsCommand.stop();
        }
    }
    execute() {
        let hostsReceiver, terminalCommandStatusListener;
        this.logger.debug("GetTerminalsBySpecifiedCW. request trading terminals");
        hostsReceiver = HostsReceiver.create(this.communicator, this.connectionParameters.getApplicationName());
        this.tradingTerminalsCommand = this.commandFactory.createGetTradingTerminalsCommand(this.login, this.tradingSystemUrl, this.connection, hostsReceiver, "", "");
        terminalCommandStatusListener = new GetTerminalsBySpecifiedCW.TerminalCommandStatusListener(this);
        this.tradingTerminalsCommand.subscribeStatusChange(terminalCommandStatusListener);
        this.tradingTerminalsCommand.execute();
    }
    subscribeStatusChange(callback) {
        return void(0);
    }
    unsubscribeStatusChange(callback) {
        return void(0);
    }
}
module.exports = GetTerminalsBySpecifiedCW
GetTerminalsBySpecifiedCW.TerminalCommandStatusListener = class {
    _owner_;
    constructor(_owner_) {
        this._owner_ = _owner_;
    }
    onSuccess(message) {
        let getTradingTerminalsMessage, terminals, i;
        if (message != null && message.getType() == MessageType.GetTradingTerminals) {
            getTradingTerminalsMessage = message;
            terminals = getTradingTerminalsMessage.getTradingTerminals();
            this._owner_.logger.debug("GetTerminalsBySpecifiedCW. terminals received. count: " + (terminals.length).toString());
            if (terminals.length == 0) {
                this._owner_.logger.warning("GetTerminalsBySpecifiedCW. no trading terminal found");
                this._owner_.callback.onError("No trading terminal found.");
                return;
            }
            if (terminals.length > 1) {
                for (i = 0; i <= terminals.length - 1; i += 1) {
                    if (terminals[i].getSubId() == this._owner_.subId) {
                        this._owner_.callback.onSuccess(terminals[i]);
                        return;
                    }
                }
            }
            else {
                this._owner_.callback.onSuccess(terminals[0]);
            }
        }
        else {
            this._owner_.callback.onError("GetTerminalsBySpecifiedCW. The message in 'Terminal CommandStatusListener' is invalid or has an unexpected type");
        }
    }
    onError(error) {
        let loggerMessage;
        loggerMessage = "GetTerminalsBySpecifiedCW. request terminals failed.";
        if (error == "INCORRECT_CREDENTIALS") {
            this._owner_.logger.warning(loggerMessage + " code: " + (LoginError.CODE_WRONG_USERNAME_OR_PASSWORD).toString() + " error: " + GetTerminalsBySpecifiedCW.INCORRECT_CREDENTIALS_ERROR);
            this._owner_.callback.onError(GetTerminalsBySpecifiedCW.INCORRECT_CREDENTIALS_ERROR);
        } else if (error == "INCORRECT_CONNECTION") {
            this._owner_.logger.warning(loggerMessage + " code: " + (LoginError.CODE_INCORRECT_CONNECTION_NAME).toString() + " error: " + GetTerminalsBySpecifiedCW.INCORRECT_CONNECTION_ERROR);
            this._owner_.callback.onError(GetTerminalsBySpecifiedCW.INCORRECT_CONNECTION_ERROR);
        }         else {
            this._owner_.logger.warning(loggerMessage + error);
            this._owner_.callback.onError(error);
        }
    }
    onCancel() {
        return void(0);
    }
}
