'use strict';
let DXFeedQuoteToOfferUpdateConvertor = require('./DXFeedQuoteToOfferUpdateConvertor.js');
let OfferUpdateMessageBuilder = require('./OfferUpdateMessageBuilder.js');
let MessageBuilder = require('./MessageBuilder.js');
class OfferUpdateAdapter {
    messageRouter;
    connection;
    dXFeedReceiveQuotesListener;
    convertor;
    instrumentsProvider;
    parametersController;
    start(connection) {
        if (connection != null) {
            connection.subscribeToReceiveQuotes(this.dXFeedReceiveQuotesListener);
        }
    }
    stop() {
        if (this.connection != null) {
            this.connection.unsubscribeFromReceiveQuotes(new OfferUpdateAdapter.EmptyDXFeedReceiveQuotesListener(this));
        }
    }
    static create(messageRouter, instrumentsProvider, parametersController) {
        let offerUpdateAdapter;
        offerUpdateAdapter = new OfferUpdateAdapter();
        offerUpdateAdapter.messageRouter = messageRouter;
        offerUpdateAdapter.instrumentsProvider = instrumentsProvider;
        offerUpdateAdapter.parametersController = parametersController;
        offerUpdateAdapter.initialize();
        return offerUpdateAdapter;
    }
    initialize() {
        this.dXFeedReceiveQuotesListener = new OfferUpdateAdapter.DXFeedReceiveQuotesListener(this);
        this.convertor = DXFeedQuoteToOfferUpdateConvertor.create(this.instrumentsProvider, this.parametersController);
    }
}
module.exports = OfferUpdateAdapter
OfferUpdateAdapter.DXFeedReceiveQuotesListener = class {
    _owner_;
    constructor(_owner_) {
        this._owner_ = _owner_;
    }
    onQuotesReceived(quotes) {
        let i, messageBuilder, messages;
        messages = new Array(quotes.length);
        for (i = 0; i <= quotes.length - 1; i += 1) {
            this.notifyParameters(quotes[i]);
            messageBuilder = new OfferUpdateMessageBuilder();
            messageBuilder.setOffer(this._owner_.convertor.convert(quotes[i]));
            messageBuilder.setUpdateCommand("UI");
            messages[i] = MessageBuilder.createLockedMessage(messageBuilder.build());
        }
        this._owner_.messageRouter.publishNewMessage(messages);
    }
    notifyParameters(quote) {
        let symbol;
        symbol = quote.getSymbol();
        this._owner_.parametersController.collectNewPrice(symbol, quote.getAsk(), quote.getBid());
    }
}
OfferUpdateAdapter.EmptyDXFeedReceiveQuotesListener = class {
    _owner_;
    constructor(_owner_) {
        this._owner_ = _owner_;
    }
    onQuotesReceived(quotes) {
        return void(0);
    }
}
