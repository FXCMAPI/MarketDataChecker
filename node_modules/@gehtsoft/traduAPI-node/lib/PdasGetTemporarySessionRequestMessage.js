'use strict';
let APdasRequestMessage = require('./APdasRequestMessage.js');
let stdlib = require('@gehtsoft/LuaxStdlib-node').stdlib;
let PdasConstants = require('./PdasConstants.js');
let PdasMessageFieldFactory = require('./PdasMessageFieldFactory.js');
let PdasMessageSerializer = require('./PdasMessageSerializer.js');
let PdasMessageType = require('./PdasMessageType.js');
let PdasMessageFieldTag = require('./PdasMessageFieldTag.js');
let PdasMessageValue = require('./PdasMessageValue.js');
let PdasTransportMessage = require('./PdasTransportMessage.js');
class PdasGetTemporarySessionRequestMessage extends APdasRequestMessage {
    build(saltedPassword, ssoToken, login, applicationName, agent, terminal, priceTerminal, tradingSession, messageType, flags, requestNumberGenerator, uniqueString, ssoTokenProvider, configFlags) {
        let pdasMessageSerializer, factory, pdasMessageList, group, remoteAddress, result, pdasMessage, requestId, terminalUrl, subId, name;
        name = "";
        terminalUrl = terminal.getUrls()[0];
        subId = terminal.getSubId();
        if (priceTerminal != null) {
            name = priceTerminal.getName();
            terminalUrl = priceTerminal.getUrls()[0];
            if (priceTerminal.getSubId() != null && stdlib.len(priceTerminal.getSubId()) > 0) {
                subId = priceTerminal.getSubId();
            }
        }
        remoteAddress = terminalUrl.getParam(PdasConstants.CLIENT_ADDRESS);
        requestId = "NewSession-" + name + "-" + (requestNumberGenerator.getNextRequestNumber()).toString() + "-" + uniqueString;
        factory = new PdasMessageFieldFactory();
        pdasMessageSerializer = new PdasMessageSerializer();
        pdasMessage = factory.createMessage(PdasMessageType.USER_REQUEST);
        pdasMessage.addChild(factory.createStringField(PdasMessageFieldTag.TEST_REQUEST_ID, requestId));
        pdasMessage.addChild(factory.createStringField(PdasMessageFieldTag.TRADING_SESSION_ID, terminal.getId()));
        pdasMessage.addChild(factory.createStringField(PdasMessageFieldTag.MSG_TYPE, PdasMessageType.USER_REQUEST));
        pdasMessage.addChild(factory.createStringField(PdasMessageFieldTag.USER_NAME, login));
        if (stdlib.len(ssoToken) == 0) {
            pdasMessage.addChild(factory.createStringField(PdasMessageFieldTag.PASSWORD, saltedPassword));
        }
        else {
            pdasMessage.addChild(factory.createStringField(PdasMessageFieldTag.SSO_TOKEN, ssoToken));
        }
        pdasMessage.addChild(factory.createStringField(PdasMessageFieldTag.TRADING_SESSION_SUB_ID, subId));
        pdasMessageList = factory.createList(PdasMessageFieldTag.FXCM_NO_PARAM);
        group = factory.createGroup();
        group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_NAME, PdasMessageValue.CLIENT_TRANSPORT_VERSION));
        group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_VALUE, "1.0"));
        pdasMessageList.addChild(group);
        group = factory.createGroup();
        group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_NAME, PdasMessageValue.CLIENT_REMOTE_ADDRESS));
        group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_VALUE, remoteAddress));
        pdasMessageList.addChild(group);
        group = factory.createGroup();
        group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_NAME, PdasMessageValue.CLIENT_REMOTE_APP_NAME));
        group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_VALUE, agent));
        pdasMessageList.addChild(group);
        group = factory.createGroup();
        group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_NAME, PdasMessageValue.CLIENT_REMOTE_APP_CODE));
        group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_VALUE, applicationName));
        pdasMessageList.addChild(group);
        group = factory.createGroup();
        group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_NAME, PdasMessageValue.CLIENT_MESSAGE_FLAG));
        group.addChild(factory.createLongField(PdasMessageFieldTag.FXCM_PARAM_VALUE, flags));
        pdasMessageList.addChild(group);
        if (stdlib.len(tradingSession) == 0) {
            group = factory.createGroup();
            group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_NAME, PdasMessageValue.CLIENT_EXTRA));
            group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_VALUE, this.getExtraValue(configFlags)));
            pdasMessageList.addChild(group);
            group = factory.createGroup();
            group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_NAME, PdasMessageValue.CLIENT_TOKEN_KEY_REQUIRED));
            group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_VALUE, PdasConstants.TRUE_VALUE));
            pdasMessageList.addChild(group);
            if (stdlib.len(ssoTokenProvider) > 0) {
                group = factory.createGroup();
                group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_NAME, PdasMessageValue.CLIENT_SSO_TOKEN_PROVIDER));
                group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_VALUE, ssoTokenProvider));
                pdasMessageList.addChild(group);
            }
        }
        else {
            group = factory.createGroup();
            group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_NAME, PdasConstants.SID));
            group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_VALUE, tradingSession));
            pdasMessageList.addChild(group);
            if (priceTerminal != null && priceTerminal.getSubId() != null && stdlib.len(priceTerminal.getSubId()) > 0) {
                group = factory.createGroup();
                group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_NAME, PdasConstants.MDT));
                group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_VALUE, "Y"));
                pdasMessageList.addChild(group);
            }
        }
        group = factory.createGroup();
        group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_NAME, PdasMessageValue.CLIENT_ASYNCH));
        group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_VALUE, PdasConstants.YES_VALUE));
        pdasMessageList.addChild(group);
        pdasMessage.addChild(pdasMessageList);
        pdasMessage.addChild(factory.createStringField(PdasMessageFieldTag.USER_REQUEST_ID, requestId));
        pdasMessage.addChild(factory.createIntField(PdasMessageFieldTag.USER_REQUEST_TYPE, 1));
        pdasMessage.addChild(factory.createStringField(PdasConstants.SID, ""));
        result = PdasTransportMessage.create(messageType, this.createRequestUrl(terminalUrl), pdasMessageSerializer.serialize(pdasMessage));
        return result;
    }
    getExtraValue(configFlags) {
        let i;
        if (configFlags != null) {
            for (i = 0; i <= configFlags.length - 1; i += 1) {
                if (configFlags[i] == "RID99") {
                    return PdasConstants.DEFAULT_EXTRA_RID99_VALUE;
                }
            }
        }
        return PdasConstants.DEFAULT_EXTRA_VALUE;
    }
}
module.exports = PdasGetTemporarySessionRequestMessage
