'use strict';
let string_map = require('@gehtsoft/LuaxStdlib-node').string_map;
let LogManager = require('./LogManager.js');
let DXFeedOfferParametersItem = require('./DXFeedOfferParametersItem.js');
let Timeframe = require('./Timeframe.js');
let TimeframeUnit = require('./TimeframeUnit.js');
let stdlib = require('@gehtsoft/LuaxStdlib-node').stdlib;
let PriceHistoryDxfRequest = require('./PriceHistoryDxfRequest.js');
class DXFeedOfferParametersController {
    timeController;
    priceTerminal;
    items;
    wasStarted;
    dXFeedReceiveTimeSeriesListener;
    dxfeedPriceHistoryMediator;
    logger;
    dxFeedNamesProvider;
    confFlags;
    rawOffersStorage;
    identity;
    static create(priceTerminal, timeController, dxFeedNamesProvider) {
        let instance;
        instance = new DXFeedOfferParametersController();
        instance.priceTerminal = priceTerminal;
        instance.timeController = timeController;
        instance.dxFeedNamesProvider = dxFeedNamesProvider;
        instance.dxfeedPriceHistoryMediator = null;
        instance.items = new string_map();
        instance.logger = LogManager.getLogger();
        instance.wasStarted = false;
        instance.confFlags = [];
        instance.rawOffersStorage = null;
        instance.identity = null;
        instance.initialization();
        return instance;
    }
    setConfigFlags(confFlags) {
        this.confFlags = confFlags;
    }
    setRawOffersStorage(rawOffersStorage) {
        this.rawOffersStorage = rawOffersStorage;
    }
    initialization() {
        this.dXFeedReceiveTimeSeriesListener = new DXFeedOfferParametersController.DXFeedPriceHistoryMediatorCallback(this);
    }
    setDxfeedPriceHistoryMediator(dxfeedPriceHistoryMediator) {
        this.dxfeedPriceHistoryMediator = dxfeedPriceHistoryMediator;
    }
    isRid99InUse() {
        let i;
        for (i = 0; i <= this.confFlags.length - 1; i += 1) {
            if (this.confFlags[i] == "RID99") {
                return true;
            }
        }
        return false;
    }
    getParam(symbol) {
        let obj;
        if (this.items.contains(symbol)) {
            obj = this.items.get(symbol);
            if (obj != null) {
                return obj;
            }
        }
        return null;
    }
    getHighBySymbol(symbol) {
        let param;
        param = this.getParam(symbol);
        if (param != null) {
            return param.getHigh();
        }
        return 0.0;
    }
    getLowBySymbol(symbol) {
        let param;
        param = this.getParam(symbol);
        if (param != null) {
            return param.getLow();
        }
        return 0.0;
    }
    getVolumeBySymbol(symbol) {
        let param;
        param = this.getParam(symbol);
        if (param != null) {
            return param.getVolume();
        }
        return 0;
    }
    loadHighAndLowForSymbols(symbols) {
        let preparedSymbols, i, item, offer;
        if (!this.wasStarted) {
            if (!this.isRid99InUse()) {
                this.dxfeedPriceHistoryMediator.start();
            }
            this.wasStarted = true;
        }
        preparedSymbols = this.dxFeedNamesProvider.getSymbolsForDxFeed(symbols);
        for (i = 0; i <= preparedSymbols.length - 1; i += 1) {
            item = new DXFeedOfferParametersItem();
            if (this.isRid99InUse()) {
                offer = this.rawOffersStorage.getOfferById(this.dxFeedNamesProvider.getOfferIdBySymbol(symbols[i]));
                if (offer != null) {
                    item.setHigh(offer.getHigh());
                    item.setLow(offer.getLow());
                }
                item.setVolume(0);
            }
            this.items.set(preparedSymbols[i], item);
        }
        if (!this.isRid99InUse() && symbols.length > 0) {
            this.loadInfo(preparedSymbols);
        }
    }
    loadInfo(symbols) {
        this.identity = this.dxfeedPriceHistoryMediator.getMultiplePrices(this.prepareRequestForHistory(symbols), this.dXFeedReceiveTimeSeriesListener);
    }
    prepareRequestForHistory(keys) {
        let result, i, timeframe, from, to, border;
        timeframe = Timeframe.create(TimeframeUnit.Day, 1);
        to = stdlib.nowutc();
        border = this.timeController.toServerTime(stdlib.mkdatetime(stdlib.year(to), stdlib.month(to), stdlib.day(to), this.getTradingDayStartHour(), 0, 0, 0));
        if (stdlib.toJdn(to) <= stdlib.toJdn(border)) {
            border = stdlib.fromJdn(stdlib.toJdn(border) - 1);
        }
        from = this.timeController.toServerTime(stdlib.mkdatetime(stdlib.year(border), stdlib.month(border), stdlib.day(border), stdlib.hour(border), 0, 0, 0));
        result = new Array(keys.length);
        for (i = 0; i <= keys.length - 1; i += 1) {
            result[i] = PriceHistoryDxfRequest.createWithoutTo(keys[i], timeframe, from, 0);
        }
        return result;
    }
    stop() {
        if (!this.wasStarted) {
            return;
        }
        if (!this.isRid99InUse() && this.identity != null) {
            this.dxfeedPriceHistoryMediator.stopCommand(this.identity);
        }
        this.wasStarted = false;
        this.items.clear();
    }
    collectNewPrice(symbol, ask, bid) {
        let param;
        param = this.getParam(symbol);
        if (param != null) {
            if (ask > param.getHigh() || param.getHigh() == 0.0) {
                param.setHigh(ask);
            }
            if (bid < param.getLow() || param.getLow() == 0.0) {
                param.setLow(bid);
            }
            param.setVolume(param.getVolume() + 1);
        }
    }
    getTradingDayStartHour() {
        return 0;
    }
}
module.exports = DXFeedOfferParametersController
DXFeedOfferParametersController.DXFeedPriceHistoryMediatorCallback = class {
    _owner_;
    constructor(_owner_) {
        this._owner_ = _owner_;
    }
    onSuccess(symbol, series) {
        let param;
        param = this._owner_.getParam(symbol);
        if (param != null && series.length > 0) {
            param.setHigh(series[0].getHigh());
            param.setLow(series[0].getLow());
            param.setVolume(0);
        }
    }
    onAllComplete() {
        return void(0);
    }
    onError(symbol, error) {
        this._owner_.logger.error("DXFeedOfferParametersController can't receive price history for symbol '" + symbol + "': " + error.getMessage());
    }
}
