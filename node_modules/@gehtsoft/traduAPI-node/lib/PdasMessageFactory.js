'use strict';
let PdasSessionStatusRequestMessage = require('./PdasSessionStatusRequestMessage.js');
let PdasGetTemporaryTradingSessionRequestMessage = require('./PdasGetTemporaryTradingSessionRequestMessage.js');
let PdasGetTemporaryPriceSessionRequestMessage = require('./PdasGetTemporaryPriceSessionRequestMessage.js');
let PdasGetTemporaryPriceSessionBySsoTokenRequestMessage = require('./PdasGetTemporaryPriceSessionBySsoTokenRequestMessage.js');
let PdasGetTemporaryTradingSessionBySsoTokenRequestMessage = require('./PdasGetTemporaryTradingSessionBySsoTokenRequestMessage.js');
let PdasKeepAliveRequestMessage = require('./PdasKeepAliveRequestMessage.js');
let PdasLogoutRequestMessage = require('./PdasLogoutRequestMessage.js');
let PdasGetAccountsRequestMessage = require('./PdasGetAccountsRequestMessage.js');
let PdasRakeOutRequestMessage = require('./PdasRakeOutRequestMessage.js');
let PdasGetAllInstrumentsRequestMessage = require('./PdasGetAllInstrumentsRequestMessage.js');
let PdasGetSystemPropertiesRequestMessage = require('./PdasGetSystemPropertiesRequestMessage.js');
let PdasGetInstrumentDescriptorsRequestMessage = require('./PdasGetInstrumentDescriptorsRequestMessage.js');
let PdasGetAllOffersRequestMessage = require('./PdasGetAllOffersRequestMessage.js');
let PdasInstrumentSubscribingRequestMessage = require('./PdasInstrumentSubscribingRequestMessage.js');
let PdasGetOpenPositionsByAcctRequestMessage = require('./PdasGetOpenPositionsByAcctRequestMessage.js');
let PdasGetLeverageProfileByAcctRequestMessage = require('./PdasGetLeverageProfileByAcctRequestMessage.js');
let PdasCreateTrueMarketOrderRequestMessage = require('./PdasCreateTrueMarketOrderRequestMessage.js');
let PdasGetClosedPositionsRequestMessage = require('./PdasGetClosedPositionsRequestMessage.js');
let PdasGetPriceHistoryRequestMessage = require('./PdasGetPriceHistoryRequestMessage.js');
let PdasSLOrderRequestMessage = require('./PdasSLOrderRequestMessage.js');
let PdasCloseMarketOrderRequestMessage = require('./PdasCloseMarketOrderRequestMessage.js');
let PdasGetAccountRolloverProfilesRequestMessage = require('./PdasGetAccountRolloverProfilesRequestMessage.js');
let PdasGetAccountCommissionsRequestMessage = require('./PdasGetAccountCommissionsRequestMessage.js');
let PdasCreateEntryOrderRequestMessage = require('./PdasCreateEntryOrderRequestMessage.js');
let PdasCreateOcoOrderRequestMessage = require('./PdasCreateOcoOrderRequestMessage.js');
let PdasGetOrdersRequestMessage = require('./PdasGetOrdersRequestMessage.js');
let PdasRemoveOrderRequestMessage = require('./PdasRemoveOrderRequestMessage.js');
let PdasChangeOrderRequestMessage = require('./PdasChangeOrderRequestMessage.js');
let PdasGetSsoTokenRequestMessage = require('./PdasGetSsoTokenRequestMessage.js');
let PdasPriceFeedCommandMessage = require('./PdasPriceFeedCommandMessage.js');
let PdasPriceFeedBatchCommandMessage = require('./PdasPriceFeedBatchCommandMessage.js');
let PdasCloseAllPositionsMessage = require('./PdasCloseAllPositionsMessage.js');
let PdasSendMailMessage = require('./PdasSendMailMessage.js');
let PdasTestRequestMessage = require('./PdasTestRequestMessage.js');
let TransportMessageType = require('./TransportMessageType.js');
//@@DocBrief("The implementation of message generator for pdas")
class PdasMessageFactory {
    pdasSessionStatusRequestMessage;
    pdasGetTemporaryTradingSessionRequestMessage;
    pdasGetTemporaryPriceSessionRequestMessage;
    pdasGetTemporaryPriceSessionBySsoTokenRequestMessage;
    pdasGetTemporaryTradingSessionBySsoTokenRequestMessage;
    pdasKeepAliveRequestMessage;
    pdasLogoutRequestMessage;
    pdasGetAccountsRequestMessage;
    pdasRakeOutRequestMessage;
    pdasGetAllInstrumentsRequestMessage;
    pdasGetSystemPropertiesRequestMessage;
    pdasGetInstrumentDescriptorsRequestMessage;
    pdasGetAllOffersRequestMessage;
    pdasInstrumentSubscribingRequestMessage;
    pdasGetOpenPositionsByAcctRequestMessage;
    pdasGetLeverageProfileByAcctRequestMessage;
    pdasCreateTrueMarketOrderRequestMessage;
    pdasGetClosedPositionsRequestMessage;
    pdasGetPriceHistoryRequestMessage;
    pdasSLOrderRequestMessage;
    pdasCloseMarketOrderRequestMessage;
    pdasGetAccountRolloverProfilesRequestMessage;
    pdasGetAccountCommissionsRequestMessage;
    pdasCreateEntryOrderRequestMessage;
    pdasCreateOcoOrderRequestMessage;
    pdasGetOrdersRequestMessage;
    pdasRemoveOrderRequestMessage;
    pdasChangeOrderRequestMessage;
    pdasGetSsoTokenRequestMessage;
    pdasPriceFeedCommandMessage;
    pdasPriceFeedBatchCommandMessage;
    pdasCloseAllPositionsMessage;
    pdasSendMailMessage;
    pdasTestRequestMessage;
    constructor() {
        this.pdasSessionStatusRequestMessage = new PdasSessionStatusRequestMessage();
        this.pdasGetTemporaryTradingSessionRequestMessage = new PdasGetTemporaryTradingSessionRequestMessage();
        this.pdasGetTemporaryPriceSessionRequestMessage = new PdasGetTemporaryPriceSessionRequestMessage();
        this.pdasGetTemporaryPriceSessionBySsoTokenRequestMessage = new PdasGetTemporaryPriceSessionBySsoTokenRequestMessage();
        this.pdasGetTemporaryTradingSessionBySsoTokenRequestMessage = new PdasGetTemporaryTradingSessionBySsoTokenRequestMessage();
        this.pdasKeepAliveRequestMessage = new PdasKeepAliveRequestMessage();
        this.pdasLogoutRequestMessage = new PdasLogoutRequestMessage();
        this.pdasGetAccountsRequestMessage = new PdasGetAccountsRequestMessage();
        this.pdasRakeOutRequestMessage = new PdasRakeOutRequestMessage();
        this.pdasGetAllInstrumentsRequestMessage = new PdasGetAllInstrumentsRequestMessage();
        this.pdasGetSystemPropertiesRequestMessage = new PdasGetSystemPropertiesRequestMessage();
        this.pdasGetInstrumentDescriptorsRequestMessage = new PdasGetInstrumentDescriptorsRequestMessage();
        this.pdasGetAllOffersRequestMessage = new PdasGetAllOffersRequestMessage();
        this.pdasInstrumentSubscribingRequestMessage = new PdasInstrumentSubscribingRequestMessage();
        this.pdasGetOpenPositionsByAcctRequestMessage = new PdasGetOpenPositionsByAcctRequestMessage();
        this.pdasGetLeverageProfileByAcctRequestMessage = new PdasGetLeverageProfileByAcctRequestMessage();
        this.pdasCreateTrueMarketOrderRequestMessage = new PdasCreateTrueMarketOrderRequestMessage();
        this.pdasGetClosedPositionsRequestMessage = new PdasGetClosedPositionsRequestMessage();
        this.pdasGetPriceHistoryRequestMessage = new PdasGetPriceHistoryRequestMessage();
        this.pdasSLOrderRequestMessage = new PdasSLOrderRequestMessage();
        this.pdasCloseMarketOrderRequestMessage = new PdasCloseMarketOrderRequestMessage();
        this.pdasGetAccountRolloverProfilesRequestMessage = new PdasGetAccountRolloverProfilesRequestMessage();
        this.pdasGetAccountCommissionsRequestMessage = new PdasGetAccountCommissionsRequestMessage();
        this.pdasCreateEntryOrderRequestMessage = new PdasCreateEntryOrderRequestMessage();
        this.pdasCreateOcoOrderRequestMessage = new PdasCreateOcoOrderRequestMessage();
        this.pdasGetOrdersRequestMessage = new PdasGetOrdersRequestMessage();
        this.pdasRemoveOrderRequestMessage = new PdasRemoveOrderRequestMessage();
        this.pdasChangeOrderRequestMessage = new PdasChangeOrderRequestMessage();
        this.pdasGetSsoTokenRequestMessage = new PdasGetSsoTokenRequestMessage();
        this.pdasPriceFeedCommandMessage = new PdasPriceFeedCommandMessage();
        this.pdasPriceFeedBatchCommandMessage = new PdasPriceFeedBatchCommandMessage();
        this.pdasCloseAllPositionsMessage = new PdasCloseAllPositionsMessage();
        this.pdasSendMailMessage = new PdasSendMailMessage();
        this.pdasTestRequestMessage = new PdasTestRequestMessage();
    }
    createSessionStatusRequestMessage(session, login, terminal, priceTerminal, messageType, requestNumberGenerator) {
        return this.pdasSessionStatusRequestMessage.build(session, login, terminal, priceTerminal, messageType, requestNumberGenerator);
    }
    createGetTemporaryTradingSessionRequestMessage(saltedPassword, login, applicationName, agent, terminal, requestNumberGenerator, uniqueString, configFlags) {
        return this.pdasGetTemporaryTradingSessionRequestMessage.build(saltedPassword, login, applicationName, agent, terminal, requestNumberGenerator, uniqueString, configFlags);
    }
    createKeepAliveRequestMessage(session, requestNumber) {
        return this.pdasKeepAliveRequestMessage.build(session, session.getTradingTerminal(), requestNumber, TransportMessageType.KeepAlive);
    }
    createKeepAlivePricesRequestMessage(session, priceTerminal, requestNumber) {
        return this.pdasKeepAliveRequestMessage.build(session, priceTerminal, requestNumber, TransportMessageType.KeepAlivePrices);
    }
    createLogoutRequestMessage(tradingSession, requestNumberGenerator) {
        return this.pdasLogoutRequestMessage.build(tradingSession, requestNumberGenerator);
    }
    createGetAccountsRequestMessage(tradingSession, requestNumberGenerator, transactTime) {
        return this.pdasGetAccountsRequestMessage.build(tradingSession, requestNumberGenerator, transactTime);
    }
    createRakeOutRequestMessage(tradingSession, stikingTime, requestNumberGenerator) {
        return this.pdasRakeOutRequestMessage.build(tradingSession, stikingTime, requestNumberGenerator, tradingSession.getTradingTerminal(), null, 1, TransportMessageType.RakeOut);
    }
    createGetAllInstrumentsRequestMessage(offerIds, tradingSession, requestNumber, transactTime) {
        return this.pdasGetAllInstrumentsRequestMessage.localBuild(offerIds, tradingSession, requestNumber, transactTime);
    }
    createGetSystemPropertiesRequestMessage(tradingSession, requestNumberGenerator, transactTime) {
        return this.pdasGetSystemPropertiesRequestMessage.build(tradingSession, requestNumberGenerator, transactTime);
    }
    createGetInstrumentDescriptorsRequestMessage(tradingSession, requestNumberGenerator, transactTime) {
        return this.pdasGetInstrumentDescriptorsRequestMessage.build(tradingSession, requestNumberGenerator, transactTime);
    }
    createGetTemporaryPriceSessionRequestMessage(saltedPassword, login, applicationName, agent, terminal, tradingSession, requestNumberGenerator, uniqueString) {
        return this.pdasGetTemporaryPriceSessionRequestMessage.build(saltedPassword, login, applicationName, agent, terminal, tradingSession, requestNumberGenerator, uniqueString);
    }
    createGetTemporaryPriceSessionBySsoTokenRequestMessage(ssoToken, login, applicationName, agent, terminal, priceTerminal, tradingSession, requestNumberGenerator, uniqueString) {
        return this.pdasGetTemporaryPriceSessionBySsoTokenRequestMessage.build(ssoToken, login, applicationName, agent, terminal, priceTerminal, tradingSession, requestNumberGenerator, uniqueString);
    }
    createGetTemporaryTradingSessionBySsoTokenRequestMessage(ssoToken, login, applicationName, agent, terminal, requestNumberGenerator, uniqueString, ssoTokenProvider, configFlags) {
        return this.pdasGetTemporaryTradingSessionBySsoTokenRequestMessage.build(ssoToken, login, applicationName, agent, terminal, requestNumberGenerator, uniqueString, ssoTokenProvider, configFlags);
    }
    createGetAllOffersRequestMessage(session, offerIds, requestNumber, transactTime) {
        return this.pdasGetAllOffersRequestMessage.localBuild(offerIds, session, requestNumber, transactTime);
    }
    createRakeOutPricesRequestMessage(priceSession, priceTerminal, stikingTime, requestNumberGenerator) {
        return this.pdasRakeOutRequestMessage.build(priceSession, stikingTime, requestNumberGenerator, priceSession.getTradingTerminal(), priceTerminal, 1022, TransportMessageType.RakeOutPrices);
    }
    createInstrumentSubscribingRequestMessage(session, offerIds, toSubscribe, requestNumber, transactTime) {
        return this.pdasInstrumentSubscribingRequestMessage.build(session, offerIds, toSubscribe, requestNumber, transactTime);
    }
    createGetOpenPositionsByAcctRequestMessage(session, acctId, requestNumberGenerator, transactTime) {
        return this.pdasGetOpenPositionsByAcctRequestMessage.build(session, acctId, requestNumberGenerator, transactTime);
    }
    createGetLeverageProfileByAcctRequestMessage(session, acctIds, offerIds, requestNumberGenerator, transactTime) {
        return this.pdasGetLeverageProfileByAcctRequestMessage.build(session, acctIds, offerIds, requestNumberGenerator, transactTime);
    }
    createTrueMarketOrderRequestMessage(session, marketOrderRequest, clientRate, pointSize, requestNumberGenerator, transactTime, timeController) {
        return this.pdasCreateTrueMarketOrderRequestMessage.build(session, marketOrderRequest, clientRate, pointSize, requestNumberGenerator, transactTime, timeController);
    }
    createGetClosedPositionsRequestMessage(session, requestNumberGenerator, transactTime) {
        return this.pdasGetClosedPositionsRequestMessage.build(session, requestNumberGenerator, transactTime);
    }
    createGetPriceHistoryRequestMessage(priceTerminalData, priceHistoryRequest, requestNumber, transactTime) {
        return this.pdasGetPriceHistoryRequestMessage.build(priceTerminalData, priceHistoryRequest, requestNumber, transactTime);
    }
    createCloseMarketOrderRequestMessage(session, closeMarketOrderRequest, clientRate, pointSize, openPosition, requestNumberGenerator, transactTime, timeController) {
        return this.pdasCloseMarketOrderRequestMessage.build(session, closeMarketOrderRequest, clientRate, pointSize, openPosition, requestNumberGenerator, transactTime, timeController);
    }
    createEntryOrderRequestMessage(session, entryOrderRequest, side, clientRate, pointSize, requestNumberGenerator, transactTime, timeController) {
        return this.pdasCreateEntryOrderRequestMessage.build(session, entryOrderRequest, side, clientRate, pointSize, requestNumberGenerator, transactTime, timeController);
    }
    createOcoOrderRequestMessage(session, entryOrderRequest, side, clientRate, pointSize, requestNumberGenerator, transactTime, timeController) {
        return this.pdasCreateOcoOrderRequestMessage.build(session, entryOrderRequest, side, clientRate, pointSize, requestNumberGenerator, transactTime, timeController);
    }
    createGetAccountRolloverProfilesRequestMessage(session, acctIds, offerIds, requestNumberGenerator, transactTime) {
        return this.pdasGetAccountRolloverProfilesRequestMessage.build(session, acctIds, offerIds, requestNumberGenerator, transactTime);
    }
    createGetAccountCommissionsRequestMessage(session, acctIds, offerIds, requestNumberGenerator, transactTime) {
        return this.pdasGetAccountCommissionsRequestMessage.build(session, acctIds, offerIds, requestNumberGenerator, transactTime);
    }
    createGetOrdersRequestMessage(tradingSession, acctId, requestNumberGenerator, transactTime) {
        return this.pdasGetOrdersRequestMessage.build(tradingSession, acctId, requestNumberGenerator, transactTime);
    }
    createRemoveOrderRequestMessage(tradingSession, acctId, orderId, requestNumberGenerator, transactTime) {
        return this.pdasRemoveOrderRequestMessage.build(tradingSession, acctId, orderId, requestNumberGenerator, transactTime);
    }
    createChangeOrderRequestMessage(tradingSession, acctId, changeOrderRequest, pointSize, orderType, requestNumberGenerator, transactTime) {
        return this.pdasChangeOrderRequestMessage.build(tradingSession, acctId, changeOrderRequest, pointSize, orderType, requestNumberGenerator, transactTime);
    }
    createStopOrderForTradeRequestMessage(session, stopOrderRequest, openPosition, requestNumberGenerator, transactTime) {
        return this.pdasSLOrderRequestMessage.buildStopForTrade(session, stopOrderRequest, openPosition, requestNumberGenerator, transactTime, true);
    }
    createLimitOrderForTradeRequestMessage(session, limitOrderRequest, openPosition, requestNumberGenerator, transactTime) {
        return this.pdasSLOrderRequestMessage.buildForTrade(session, limitOrderRequest, openPosition, requestNumberGenerator, transactTime, false);
    }
    createStopOrderForOrderRequestMessage(session, stopOrderRequest, order, requestNumberGenerator, transactTime) {
        return this.pdasSLOrderRequestMessage.buildStopForOrder(session, stopOrderRequest, order, requestNumberGenerator, transactTime, true);
    }
    createLimitOrderForOrderRequestMessage(session, limitOrderRequest, order, requestNumberGenerator, transactTime) {
        return this.pdasSLOrderRequestMessage.buildForOrder(session, limitOrderRequest, order, requestNumberGenerator, transactTime, false);
    }
    createGetSsoTokenRequestMessage(session, applicationName, providerName, requestNumber, transactTime) {
        return this.pdasGetSsoTokenRequestMessage.build(session, applicationName, providerName, requestNumber, transactTime);
    }
    createPriceFeedCommandMessage(priceSession, terminal, instruments, priceDescriptor, requestNumber) {
        return this.pdasPriceFeedCommandMessage.build(priceSession, terminal, instruments, priceDescriptor, requestNumber);
    }
    createPriceFeedBatchCommandMessage(priceSession, terminal, priceDescriptors, requestNumberGenerator, forceReset, transactTime) {
        return this.pdasPriceFeedBatchCommandMessage.build(priceSession, terminal, priceDescriptors, requestNumberGenerator, forceReset, transactTime);
    }
    createCloseAllPositionsMessage(session, request, descriptors, requestNumberGenerator, transactTime, timeController) {
        return this.pdasCloseAllPositionsMessage.buildMessage(session, request, descriptors, requestNumberGenerator, transactTime, timeController);
    }
    createSendMailMessage(tradingSession, sendClientMessageRequest, requestNumberGenerator, transactTime) {
        return this.pdasSendMailMessage.build(tradingSession, sendClientMessageRequest, requestNumberGenerator, transactTime);
    }
    createTestRequestForMdtRequestMessage(session, priceTerminal, requestNumber) {
        return this.pdasTestRequestMessage.build(session, priceTerminal, requestNumber, TransportMessageType.TestRequestMdt);
    }
    createTestRequestForPdsRequestMessage(session, requestNumber) {
        return this.pdasTestRequestMessage.build(session, session.getTradingTerminal(), requestNumber, TransportMessageType.TestRequestPds);
    }
}
module.exports = PdasMessageFactory
