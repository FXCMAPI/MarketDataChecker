'use strict';
let ConnectionParameters = require('./ConnectionParameters.js');
let ResilienceBuilder = require('./ResilienceBuilder.js');
//@@DocInclude
//@@DocBrief("Sets additional connection parameters, including application name, number of reconnects before attempting to disconnect, resilience policy, agent name, login timeout, and number of seconds before reconnect")
class ConnectionParametersBuilder extends ConnectionParameters {
    resilienceBuilder;
    constructor() {
        super();
        this.resilienceBuilder = new ResilienceBuilder();
        this.resilienceBuilder.setAttempts(10);
        this.resilienceBuilder.setPeriodInMilliseconds(500);
    }
    getResilienceBuilder() {
        return this.resilienceBuilder;
    }
    setLoginTimeoutInSeconds(loginTimeoutInSeconds) {
        this.loginTimeoutInSeconds = loginTimeoutInSeconds;
    }
    setApplicationName(applicationName) {
        this.applicationName = applicationName;
    }
    setAgent(agent) {
        this.agent = agent;
    }
    setReconnectionsNumber(reconnectionsNumber) {
        this.reconnectionsNumber = reconnectionsNumber;
    }
    setReconnectionDelayInSeconds(reconnectionDelayInSeconds) {
        this.reconnectionDelayInSeconds = reconnectionDelayInSeconds;
    }
    setResilienceBuilder(resilienceBuilder) {
        this.resilienceBuilder = resilienceBuilder;
    }
    build() {
        this.resilience = this.resilienceBuilder.build();
        return this;
    }
    copyFrom(connectionParameters) {
        this.setLoginTimeoutInSeconds(connectionParameters.getLoginTimeoutInSeconds());
        this.setReconnectionsNumber(connectionParameters.getReconnectionsNumber());
        this.setReconnectionDelayInSeconds(connectionParameters.getReconnectionDelayInSeconds());
        this.setAgent(connectionParameters.getAgent());
        this.resilienceBuilder.copyFrom(connectionParameters.getResilience());
    }
}
module.exports = ConnectionParametersBuilder
