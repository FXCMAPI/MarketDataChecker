'use strict';
let string_map = require('@gehtsoft/LuaxStdlib-node').string_map;
let MarginDescriptor = require('./MarginDescriptor.js');
let CalcPathParser = require('./CalcPathParser.js');
//@@DocBrief("class provides access to a collection of margin levels descriptors information")
class LeverageProfilesStorage {
    storage;
    marginDescriptorStorage;
    lplCalculationPathStorage;
    constructor() {
        this.storage = new string_map();
        this.marginDescriptorStorage = new string_map();
        this.lplCalculationPathStorage = new string_map();
    }
    clear() {
        this.storage.clear();
        this.marginDescriptorStorage.clear();
        this.lplCalculationPathStorage.clear();
    }
    addLeverageProfiles(leverageProfiles) {
        let i;
        for (i = 0; i <= leverageProfiles.length - 1; i += 1) {
            this.addLeverageProfile(leverageProfiles[i]);
        }
    }
    addLeverageProfile(leverageProfile) {
        let localStorage, key;
        key = this.createPrimaryKey(leverageProfile.getAccountID(), leverageProfile.getAlpID());
        if (!this.storage.contains(key)) {
            localStorage = new string_map();
            this.storage.set(key, localStorage);
        }
        else {
            localStorage = this.storage.get(key);
        }
        localStorage.set(leverageProfile.getOfferID(), leverageProfile);
    }
    createPrimaryKey(accountId, leverageProfileId) {
        return accountId + "-" + leverageProfileId;
    }
    createDetailedKey(accountId, leverageProfileId, offerId) {
        return this.createPrimaryKey(accountId, leverageProfileId) + "-" + offerId;
    }
    createDescriptor(leverageProfile) {
        let marginDescriptor, key;
        key = this.createDetailedKey(leverageProfile.getAccountID(), leverageProfile.getAlpID(), leverageProfile.getOfferID());
        marginDescriptor = MarginDescriptor.create(leverageProfile.getUsedMargin(), leverageProfile.getUsedMarginAware(), leverageProfile.getUsedMarginEntry(), leverageProfile.getProgressiveMargin(), leverageProfile.getMarginType(), leverageProfile.getMarginCoeff(), leverageProfile.getMarginAwareCoeff(), leverageProfile.getMarginEntryCoeff());
        this.marginDescriptorStorage.set(key, marginDescriptor);
        return marginDescriptor;
    }
    findMarginDescriptor(accountId, leverageProfileId, offerId) {
        let key, leverageProfile;
        key = this.createDetailedKey(accountId, leverageProfileId, offerId);
        if (this.marginDescriptorStorage.contains(key)) {
            return this.marginDescriptorStorage.get(key);
        }
        leverageProfile = this.getLeverageProfile(accountId, leverageProfileId, offerId);
        if (leverageProfile == null) {
            return null;
        }
        else {
            return this.createDescriptor(leverageProfile);
        }
    }
    findMarginDescriptors(accountId, leverageProfileId) {
        let localStorage, keys, result, i, key;
        key = this.createPrimaryKey(accountId, leverageProfileId);
        if (!this.storage.contains(key)) {
            return null;
        }
        else {
            localStorage = this.storage.get(key);
            keys = localStorage.keys();
            result = new Array(keys.length);
            for (i = 0; i <= keys.length - 1; i += 1) {
                key = this.createDetailedKey(accountId, leverageProfileId, keys[i]);
                if (this.marginDescriptorStorage.contains(key)) {
                    result[i] = this.marginDescriptorStorage.get(key);
                }
                else {
                    result[i] = this.createDescriptor(localStorage.get(keys[i]));
                }
            }
            return result;
        }
    }
    getLeverageProfile(accountId, leverageProfileId, offerId) {
        let localStorage, key;
        key = this.createPrimaryKey(accountId, leverageProfileId);
        if (!this.storage.contains(key)) {
            return null;
        }
        else {
            localStorage = this.storage.get(key);
            if (!localStorage.contains(offerId)) {
                return null;
            }
            else {
                return localStorage.get(offerId);
            }
        }
    }
    getPLCalculationPath(accountId, leverageProfileId, offerId) {
        let key, leverageProfile;
        key = this.createDetailedKey(accountId, leverageProfileId, offerId);
        if (this.lplCalculationPathStorage.contains(key)) {
            return this.lplCalculationPathStorage.get(key);
        }
        leverageProfile = this.getLeverageProfile(accountId, leverageProfileId, offerId);
        if (leverageProfile == null) {
            return null;
        }
        return this.createPLCalculationPath(leverageProfile);
    }
    createPLCalculationPath(leverageProfile) {
        let plCalculationPath, key;
        key = this.createDetailedKey(leverageProfile.getAccountID(), leverageProfile.getAlpID(), leverageProfile.getOfferID());
        plCalculationPath = CalcPathParser.parse(leverageProfile.getCalcPath());
        this.lplCalculationPathStorage.set(key, plCalculationPath);
        return plCalculationPath;
    }
}
module.exports = LeverageProfilesStorage
