'use strict';
let list = require('@gehtsoft/LuaxStdlib-node').list;
let xmlNode = require('@gehtsoft/LuaxStdlib-node').xmlNode;
let XmlReaderUtil = require('./XmlReaderUtil.js');
let variantCast = require('@gehtsoft/LuaxStdlib-node').variantCast;
class PdasResponseMessageCommonParser {
    messageFieldFactory;
    static create(messageFieldFactory) {
        let result;
        result = new PdasResponseMessageCommonParser();
        result.messageFieldFactory = messageFieldFactory;
        return result;
    }
    parse(xmlRootNode) {
        let i, child, result, resultArray;
        result = new list();
        if (xmlRootNode != null && xmlRootNode.getChildrenCount() > 0) {
            for (i = 0; i <= xmlRootNode.getChildrenCount() - 1; i += 1) {
                child = xmlRootNode.getChild(i);
                if (child.getType() == xmlNode.ELEMENT && child.getName() == "m") {
                    result.add(this.parseMessage(child));
                }
            }
        }
        resultArray = new Array(result.length());
        for (i = 0; i <= result.length() - 1; i += 1) {
            resultArray[i] = result.get(i);
        }
        return resultArray;
    }
    parseMessage(node) {
        let message;
        message = this.messageFieldFactory.createMessage(XmlReaderUtil.getAttrValue(node, "t"));
        this.parseChildren(message, node);
        return message;
    }
    parseChildren(parent, node) {
        let i, child;
        for (i = 0; i <= node.getChildrenCount() - 1; i += 1) {
            child = node.getChild(i);
            if (child.getType() == xmlNode.ELEMENT) {
                if (child.getName() == "f") {
                    parent.addChild(this.parseField(child));
                } else if (child.getName() == "l") {
                    parent.addChild(this.parseList(child));
                } else if (child.getName() == "g") {
                    parent.addChild(this.parseGroup(child));
                }
            }
        }
    }
    parseGroup(node) {
        let group;
        group = this.messageFieldFactory.createGroup();
        this.parseChildren(group, node);
        return group;
    }
    parseList(node) {
        let listInstance;
        listInstance = this.messageFieldFactory.createList(XmlReaderUtil.getAttrValue(node, "n"));
        this.parseChildren(listInstance, node);
        return listInstance;
    }
    parseField(node) {
        let field;
        if (XmlReaderUtil.isAttrEqualTo(node, "t", "i")) {
            field = this.messageFieldFactory.createIntField(XmlReaderUtil.getAttrValue(node, "n"), variantCast.castToInt(variantCast.fromString(XmlReaderUtil.getNodeText(node))));
        } else if (XmlReaderUtil.isAttrEqualTo(node, "t", "l")) {
            field = this.messageFieldFactory.createLongField(XmlReaderUtil.getAttrValue(node, "n"), variantCast.castToInt(variantCast.fromString(XmlReaderUtil.getNodeText(node))));
        } else if (XmlReaderUtil.isAttrEqualTo(node, "t", "d")) {
            field = this.messageFieldFactory.createDoubleField(XmlReaderUtil.getAttrValue(node, "n"), variantCast.castToReal(variantCast.fromString(XmlReaderUtil.getNodeText(node))));
        }         else {
            field = this.messageFieldFactory.createStringField(XmlReaderUtil.getAttrValue(node, "n"), XmlReaderUtil.getNodeText(node));
        }
        return field;
    }
}
module.exports = PdasResponseMessageCommonParser
