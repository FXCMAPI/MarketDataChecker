'use strict';
let HostsJspUrlBuilder = require('./HostsJspUrlBuilder.js');
let httpResponseCallback = require('@gehtsoft/LuaxStdlib-node').httpResponseCallback;
//@@DocBrief("Receiver implementation for read Hosts.jsp content from the required server")
class HostsReceiver {
    hostsReceiverCallback;
    communicator;
    applicationName;
    receiveHosts(login, url, connection, hostsReceiverCallback, ssoToken, ssoTokenProvider) {
        let postUrl;
        this.hostsReceiverCallback = hostsReceiverCallback;
        postUrl = HostsJspUrlBuilder.createUrl(url, login, connection, this.applicationName, ssoToken, ssoTokenProvider);
        this.communicator.post(postUrl, "", new HostsReceiver.responseCallback(this));
    }
    cancel() {
        this.communicator.cancel();
    }
    static create(communicator, applicationName) {
        let receiver;
        receiver = new HostsReceiver();
        receiver.communicator = communicator;
        receiver.applicationName = applicationName;
        return receiver;
    }
}
module.exports = HostsReceiver
HostsReceiver.responseCallback = class extends httpResponseCallback {
    _owner_;
    constructor(_owner_) {
        super();
        this._owner_ = _owner_;
    }
    onComplete(status, responseText) {
        if (status == 200) {
            this._owner_.hostsReceiverCallback.onHostsReceived(responseText);
        }
        else {
            this.onError("Unexpected status " + (status).toString() + " : " + responseText);
        }
    }
    onError(error) {
        this._owner_.hostsReceiverCallback.onError(error);
    }
}
