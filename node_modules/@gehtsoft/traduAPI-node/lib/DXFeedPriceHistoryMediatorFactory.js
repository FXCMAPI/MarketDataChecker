'use strict';
let string_map = require('@gehtsoft/LuaxStdlib-node').string_map;
let DXFeedPriceHistoryMediator = require('./DXFeedPriceHistoryMediator.js');
let variantCast = require('@gehtsoft/LuaxStdlib-node').variantCast;
class DXFeedPriceHistoryMediatorFactory {
    mediators;
    connections;
    timeController;
    counter;
    dxFeedNamesProvider;
    constructor() {
        this.connections = new string_map();
        this.mediators = new string_map();
        this.counter = 0;
    }
    static create(timeController, dxFeedNamesProvider) {
        let result;
        result = new DXFeedPriceHistoryMediatorFactory();
        result.timeController = timeController;
        result.dxFeedNamesProvider = dxFeedNamesProvider;
        return result;
    }
    createMediator(connection) {
        let index;
        index = this.getIndexByConnection(connection);
        return this.getOrCreateMediator(index, connection);
    }
    getOrCreateMediator(index, connection) {
        let mediator;
        if (this.mediators.contains(index)) {
            return this.mediators.get(index);
        }
        mediator = DXFeedPriceHistoryMediator.create(connection, this.timeController, this.dxFeedNamesProvider);
        mediator.start();
        this.mediators.set(index, mediator);
        return mediator;
    }
    getIndexByConnection(connection) {
        let i, keys;
        keys = this.connections.keys();
        for (i = 0; i <= keys.length - 1; i += 1) {
            if (this.connections.get(keys[i]) == connection) {
                return keys[i];
            }
        }
        this.counter = this.counter + 1;
        this.connections.set(variantCast.fromInt(this.counter).asString(), connection);
        return (this.counter).toString();
    }
}
module.exports = DXFeedPriceHistoryMediatorFactory
