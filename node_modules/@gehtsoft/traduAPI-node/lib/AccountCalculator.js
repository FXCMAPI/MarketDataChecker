'use strict';
let AccountCalculatedFieldsBuilder = require('./AccountCalculatedFieldsBuilder.js');
class AccountCalculator {
    openPositionsProvider;
    openPositionCalculator;
    static create(openPositionsProvider) {
        let result;
        result = new AccountCalculator();
        result.openPositionsProvider = openPositionsProvider;
        return result;
    }
    setOpenPositionCalculator(openPositionCalculator) {
        this.openPositionCalculator = openPositionCalculator;
    }
    calculatePublicFields(account) {
        let builder;
        builder = new AccountCalculatedFieldsBuilder();
        builder.setGrossPL(this.calculateGrossPL(account));
        builder.setEquity(this.calculateEquity(builder.getGrossPL(), account));
        builder.setDayPL(this.calculateDayPL(builder.getEquity(), account));
        this.calculateMargin(builder, account.getAccountId());
        return builder.build();
    }
    calculateMargin(builder, accountId) {
        let positions, calculatedMarginFields, usedMargin, usedMaintenanceMargin, i;
        usedMargin = 0;
        usedMaintenanceMargin = 0;
        positions = this.openPositionsProvider.getInternalOpenPositionByAccount(accountId);
        calculatedMarginFields = this.openPositionCalculator.calculateMarginFieldsForAll(positions);
        for (i = 0; i <= calculatedMarginFields.length - 1; i += 1) {
            usedMargin = usedMargin + calculatedMarginFields[i].getUsedMargin();
            usedMaintenanceMargin = usedMaintenanceMargin + calculatedMarginFields[i].getUsedMarginAware();
        }
        builder.setUsedMargin(usedMargin);
        builder.setUsableMargin(builder.getEquity() - builder.getUsedMargin());
        builder.setUsableMarginPercentage(this.calcMarginPercentage(builder.getUsableMargin(), builder.getEquity()));
        builder.setUsedMaintenanceMargin(usedMaintenanceMargin);
        builder.setUsableMaintenanceMargin(builder.getEquity() - builder.getUsedMaintenanceMargin());
        builder.setUsableMaintenanceMarginPercentage(this.calcMarginPercentage(builder.getUsableMaintenanceMargin(), builder.getEquity()));
    }
    calcMarginPercentage(usableMargin, equity) {
        return usableMargin * 100 / equity;
    }
    calculateGrossPL(account) {
        let i, openPositions, openPositionCalculatedFields, dGrossPL;
        dGrossPL = 0.0;
        openPositions = this.openPositionsProvider.getInternalOpenPositionByAccount(account.getAccountId());
        for (i = 0; i <= openPositions.length - 1; i += 1) {
            openPositionCalculatedFields = this.openPositionsProvider.getCalculatedFields(openPositions[i]);
            dGrossPL = dGrossPL + openPositionCalculatedFields.getGrossPL();
        }
        return dGrossPL;
    }
    calculateEquity(dGrossPL, account) {
        return account.getBalance() + dGrossPL;
    }
    calculateDayPL(dEquity, account) {
        return dEquity - account.getM2MEquity() - account.getNonTradeEquity();
    }
}
module.exports = AccountCalculator
