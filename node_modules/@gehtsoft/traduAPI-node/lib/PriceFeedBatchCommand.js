'use strict';
let SendSingleCommandWithoutResponse = require('./SendSingleCommandWithoutResponse.js');
let stdlib = require('@gehtsoft/LuaxStdlib-node').stdlib;
let logger = require('@gehtsoft/LuaxStdlib-node').logger;
class PriceFeedBatchCommand extends SendSingleCommandWithoutResponse {
    terminal;
    descriptors;
    requestNumberGenerator;
    priceSession;
    sessionStorage;
    priceTerminalInitializer;
    priceFeedCommandCallback;
    forceReset;
    PriceFeedCommand() {
        this.commandName = "PriceFeedBatchCommand";
        this.priceFeedCommandCallback = null;
    }
    execute() {
        let callback;
        this.priceTerminalInitializer = this.sessionStorage.getPriceTerminalInitializerByPriceStreamId(this.descriptors[0].getFxcmDasMessagePriceStream());
        if (this.priceTerminalInitializer != null) {
            callback = this.createGetInitializedPriceTerminalCallback();
            this.priceTerminalInitializer.getInitializedPriceTerminal(callback);
        }
        else {
            this.logger.error("Not found price terminal for price stream '" + this.descriptors[0].getFxcmDasMessagePriceStream() + "'");
        }
    }
    executeCommand() {
        super.execute();
    }
    createTransportMessage() {
        return this.messageFactory.createPriceFeedBatchCommandMessage(this.priceSession, this.terminal, this.descriptors, this.requestNumberGenerator, this.forceReset, stdlib.nowutc());
    }
    createGetInitializedPriceTerminalCallback() {
        return new PriceFeedBatchCommand.GetInitializedPriceTerminalCallback(this);
    }
}
module.exports = PriceFeedBatchCommand
PriceFeedBatchCommand.GetInitializedPriceTerminalCallback = class {
    _owner_;
    constructor(_owner_) {
        this._owner_ = _owner_;
    }
    onError(error) {
        logger.error(error);
        if (this._owner_.priceFeedCommandCallback != null) {
            this._owner_.priceFeedCommandCallback.onError(error);
        }
    }
    onSuccess(result) {
        let dxfeedConnection, data;
        if (result != null) {
            data = result;
            this._owner_.terminal = data.getPriceTerminal();
            this._owner_.priceSession = data.getPriceSession();
            this._owner_.executeCommand();
        }
    }
}
