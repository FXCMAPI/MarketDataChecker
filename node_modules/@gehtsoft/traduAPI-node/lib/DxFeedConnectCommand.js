'use strict';
let CommandStatusPublisher = require('./CommandStatusPublisher.js');
let LogManager = require('./LogManager.js');
class DxFeedConnectCommand {
    commandFactory;
    getDxFeedTokenCommand;
    publisher;
    dxFeedConnection;
    ssoTokenController;
    logger;
    url;
    constructor() {
        this.publisher = new CommandStatusPublisher();
        this.logger = LogManager.getLogger();
        this.commandFactory = null;
        this.url = null;
        this.getDxFeedTokenCommand = null;
    }
    execute() {
        this.getToken();
    }
    subscribeStatusChange(callback) {
        this.publisher.subscribe(callback);
    }
    unsubscribeStatusChange(callback) {
        this.publisher.unsubscribe(callback);
    }
    stop() {
        this.publisher.notifyCancel();
    }
    getToken() {
        let getTokenCallback;
        this.logger.debug("DxFeedConnectCommand. Start get DxFeed auth token process");
        getTokenCallback = new DxFeedConnectCommand.GetTokenCallback(this);
        this.ssoTokenController.getProviderToken("dxfeed", getTokenCallback);
    }
}
module.exports = DxFeedConnectCommand
DxFeedConnectCommand.GetTokenCallback = class {
    _owner_;
    constructor(_owner_) {
        this._owner_ = _owner_;
    }
    onError(error) {
        this._owner_.publisher.notifyError(error);
    }
    onSuccess(token) {
        this._owner_.logger.debug("DxFeedConnectCommand. DxFeed auth token received: " + token);
        this.login(token);
    }
    login(dxFeedToken) {
        this._owner_.logger.debug("DxFeedConnectCommand. Start login to DxFeed process");
        this._owner_.dxFeedConnection.subscribeStateChange(new DxFeedConnectCommand.DXFeedConnectionStateListener(this._owner_));
        this._owner_.dxFeedConnection.setAuthToken(dxFeedToken);
        this._owner_.dxFeedConnection.connect(this._owner_.url);
    }
}
DxFeedConnectCommand.DXFeedConnectionStateListener = class {
    _owner_;
    constructor(_owner_) {
        this._owner_ = _owner_;
    }
    onStateChange(state) {
        let error;
        if (state.isConnected()) {
            this._owner_.dxFeedConnection.unsubscribeStateChange(this);
            this._owner_.publisher.notifySuccess(null);
        } else if (state.isDisconnected()) {
            this._owner_.dxFeedConnection.unsubscribeStateChange(this);
            error = null;
            if (state.hasError()) {
                error = state.getError().getMessage();
            }
            this._owner_.publisher.notifyError(error);
        }
    }
}
