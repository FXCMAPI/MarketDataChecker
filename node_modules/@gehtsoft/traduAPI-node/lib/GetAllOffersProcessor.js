'use strict';
let int_map = require('@gehtsoft/LuaxStdlib-node').int_map;
let StringUtil = require('./StringUtil.js');
class GetAllOffersProcessor {
    commandFactory;
    messageExecutor;
    sessionProvider;
    messageFactory;
    requestNumberGenerator;
    pendingCallbacks;
    static create(commandFactory, messageExecutor, sessionProvider, messageFactory, requestNumberGenerator) {
        let instance;
        instance = new GetAllOffersProcessor();
        instance.commandFactory = commandFactory;
        instance.messageExecutor = messageExecutor;
        instance.sessionProvider = sessionProvider;
        instance.messageFactory = messageFactory;
        instance.requestNumberGenerator = requestNumberGenerator;
        instance.pendingCallbacks = new int_map();
        return instance;
    }
    execute(offerIds, callback, defaultProcessing) {
        let getAllOffersCommand, requestNumber;
        requestNumber = this.requestNumberGenerator.getNextRequestNumber();
        getAllOffersCommand = this.commandFactory.createGetAllOffersCommand(offerIds, this.messageExecutor, this.sessionProvider.getSession(), this.messageFactory, requestNumber);
        getAllOffersCommand.subscribeStatusChange(GetAllOffersProcessor.CommandStatusListener.create(callback));
        this.pendingCallbacks.set(requestNumber, GetAllOffersProcessor.ProcessItem.create(callback, defaultProcessing));
        getAllOffersCommand.execute();
    }
    preProcessResponse(getRequestNumber, offerUpdates) {
        let requestNumber, callback, defaultProcessing, processItem;
        requestNumber = StringUtil.getRequestNumber(getRequestNumber);
        if (this.pendingCallbacks.contains(requestNumber)) {
            processItem = this.pendingCallbacks.get(requestNumber);
            defaultProcessing = processItem.getDefaultProcessing();
            if (!defaultProcessing) {
                callback = processItem.getCallback();
                this.pendingCallbacks.remove(requestNumber);
                callback.invoke(offerUpdates);
                return true;
            }
        }
        return false;
    }
    processResponse(getRequestNumber, offerUpdates) {
        let requestNumber, callback;
        requestNumber = StringUtil.getRequestNumber(getRequestNumber);
        if (this.pendingCallbacks.contains(requestNumber)) {
            callback = this.pendingCallbacks.get(requestNumber).getCallback();
            this.pendingCallbacks.remove(requestNumber);
            callback.invoke(offerUpdates);
            return true;
        }
        return false;
    }
}
module.exports = GetAllOffersProcessor
GetAllOffersProcessor.CommandStatusListener = class {
    callback;
    _owner_;
    constructor(_owner_) {
        this._owner_ = _owner_;
    }
    static create(callback) {
        let instance;
        instance = new GetAllOffersProcessor.CommandStatusListener(this);
        instance.callback = callback;
        return instance;
    }
    onSuccess(message) {
        return void(0);
    }
    onError(errorText) {
        this.callback.onError(errorText);
    }
    onCancel() {
        this.callback.onError("cancelled");
    }
}
GetAllOffersProcessor.ProcessItem = class {
    callback;
    defaultProcessing;
    _owner_;
    constructor(_owner_) {
        this._owner_ = _owner_;
    }
    getCallback() {
        return this.callback;
    }
    getDefaultProcessing() {
        return this.defaultProcessing;
    }
    static create(callback, defaultProcessing) {
        let instance;
        instance = new GetAllOffersProcessor.ProcessItem(this);
        instance.callback = callback;
        instance.defaultProcessing = defaultProcessing;
        return instance;
    }
}
