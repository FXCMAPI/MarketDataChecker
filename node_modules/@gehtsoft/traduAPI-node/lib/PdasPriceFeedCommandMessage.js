'use strict';
let APdasRequestMessage = require('./APdasRequestMessage.js');
let PdasMessageFieldFactory = require('./PdasMessageFieldFactory.js');
let PdasMessageSerializer = require('./PdasMessageSerializer.js');
let PdasMessageType = require('./PdasMessageType.js');
let PdasMessageFieldTag = require('./PdasMessageFieldTag.js');
let variantCast = require('@gehtsoft/LuaxStdlib-node').variantCast;
let PdasConstants = require('./PdasConstants.js');
let PdasTransportMessage = require('./PdasTransportMessage.js');
let TransportMessageType = require('./TransportMessageType.js');
class PdasPriceFeedCommandMessage extends APdasRequestMessage {
    build(priceSession, priceTerminal, instruments, commandDescriptor, requestNumber) {
        let pdasMessageSerializer, factory, pdasMessage, requestId, pdasMessageList, group, result, terminalUrl, i, fxcmIncludeWeekends;
        if (commandDescriptor.getFxcmIncludeWeekends()) {
            fxcmIncludeWeekends = "true";
        }
        else {
            fxcmIncludeWeekends = "false";
        }
        factory = new PdasMessageFieldFactory();
        pdasMessageSerializer = new PdasMessageSerializer();
        terminalUrl = priceTerminal.getUrls()[0];
        requestId = priceSession.getSessionId() + "-" + (requestNumber).toString();
        pdasMessage = factory.createMessage(PdasMessageType.PRICE_FEED_MESSAGE);
        pdasMessageList = factory.createList(PdasMessageFieldTag.NO_RELATED_SYM);
        for (i = 0; i <= instruments.length - 1; i += 1) {
            group = factory.createGroup();
            group.addChild(factory.createStringField(PdasMessageFieldTag.SYMBOL, instruments[i].getSymbol()));
            group.addChild(factory.createIntField(PdasMessageFieldTag.FXCM_SYM_ID, variantCast.fromString(instruments[i].getOfferId()).asInt()));
            group.addChild(factory.createIntField(PdasMessageFieldTag.FXCM_SYM_PRECISION, 0));
            pdasMessageList.addChild(group);
        }
        pdasMessage.addChild(pdasMessageList);
        pdasMessage.addChild(factory.createStringField(PdasMessageFieldTag.MD_REQ_ID, requestId));
        pdasMessage.addChild(factory.createStringField(PdasMessageFieldTag.SUBSCRIPTION_REQUEST_TYPE, commandDescriptor.getSubscriptionRequestType()));
        pdasMessage.addChild(factory.createIntField(PdasMessageFieldTag.MARKET_DEPTH, commandDescriptor.getMarketDepth()));
        pdasMessage.addChild(factory.createIntField(PdasMessageFieldTag.MD_UPDATE_TYPE, commandDescriptor.getMdUpdateType()));
        pdasMessageList = factory.createList(PdasMessageFieldTag.NO_MD_ENTRY_TYPES);
        pdasMessage.addChild(pdasMessageList);
        pdasMessage.addChild(factory.createStringField(PdasMessageFieldTag.TRADING_SESSION_ID, priceTerminal.getId()));
        pdasMessage.addChild(factory.createStringField(PdasMessageFieldTag.MSG_TYPE, PdasMessageType.PRICE_FEED_MESSAGE));
        pdasMessageList = factory.createList(PdasMessageFieldTag.NO_TRADING_SESSIONS);
        group = factory.createGroup();
        group.addChild(factory.createStringField(PdasMessageFieldTag.TRADING_SESSION_ID, priceTerminal.getId()));
        group.addChild(factory.createStringField(PdasMessageFieldTag.TRADING_SESSION_SUB_ID, priceTerminal.getSubId()));
        pdasMessageList.addChild(group);
        pdasMessage.addChild(pdasMessageList);
        pdasMessage.addChild(factory.createStringField(PdasMessageFieldTag.TRADING_SESSION_SUB_ID, priceTerminal.getSubId()));
        pdasMessage.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_TIMING_INTERVAL, commandDescriptor.getFxcmTimingInterval()));
        pdasMessage.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_DAS_MESSAGE_PRICE_STREAM, commandDescriptor.getFxcmDasMessagePriceStream()));
        pdasMessage.addChild(factory.createStringField(PdasMessageFieldTag.TIMEFRAME, commandDescriptor.getFxcmTimingIntervalEx()));
        pdasMessage.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_INCLUDE_WEEKENDS, fxcmIncludeWeekends));
        pdasMessage.addChild(factory.createStringField(PdasConstants.SID, priceSession.getSessionId()));
        result = PdasTransportMessage.create(TransportMessageType.PriceFeedCommand, this.createRequestUrl(terminalUrl), pdasMessageSerializer.serialize(pdasMessage));
        return result;
    }
}
module.exports = PdasPriceFeedCommandMessage
