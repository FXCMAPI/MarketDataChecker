'use strict';
let LogManager = require('./LogManager.js');
let PriceTerminalCallbacksContainer = require('./PriceTerminalCallbacksContainer.js');
let PdasPriceTerminalStatusManager = require('./PdasPriceTerminalStatusManager.js');
let PdasReconnector = require('./PdasReconnector.js');
let MessageType = require('./MessageType.js');
let scheduler = require('@gehtsoft/LuaxStdlib-node').scheduler;
let PriceTerminalTypes = require('./PriceTerminalTypes.js');
let ConnectionStatus = require('./ConnectionStatus.js');
let PriceTerminalData = require('./PriceTerminalData.js');
let GetInitializedPriceTerminalCallback = require('./GetInitializedPriceTerminalCallback.js');
let ExecutionTimeEvenUtil = require('./ExecutionTimeEvenUtil.js');
let ExecutionTimeEventName = require('./ExecutionTimeEventName.js');
let PdasPriceTerminalController = require('./PdasPriceTerminalController.js');
let TradingSessionProvider = require('./TradingSessionProvider.js');
let MdtConnectedMessage = require('./MdtConnectedMessage.js');
let MessageBuilder = require('./MessageBuilder.js');
let NamedTriggerMessage = require('./NamedTriggerMessage.js');
class PdasPriceTerminalLazyInitializer {
    static get MAX_ATTEMPTS() { return 5; }
    static get ATTEMPT_DELAY_IN_MSC() { return 300; }
    ssoTokenController;
    sessionStorage;
    commandEnvironment;
    commandFactory;
    login;
    ssoToken;
    logger;
    aliveControllerFactory;
    rakeOutControllerFactory;
    priceTerminal;
    tradeSessionStatusManager;
    pdasPriceTerminalStatusManager;
    pdasTerminalControllerInstance;
    priceSessionInstance;
    priceTerminalCallbacksContainer;
    executionTimeEvent;
    pdasReconnector;
    loginAttempts;
    attemptsScheduler;
    attemptDelay;
    messageRouter;
    receiveNewMessageListener;
    testRequestControllerFactory;
    constructor() {
        this.logger = LogManager.getLogger();
        this.aliveControllerFactory = null;
        this.rakeOutControllerFactory = null;
        this.priceSessionInstance = null;
        this.pdasTerminalControllerInstance = null;
        this.pdasReconnector = null;
        this.messageRouter = null;
        this.priceTerminalCallbacksContainer = new PriceTerminalCallbacksContainer();
        this.pdasPriceTerminalStatusManager = new PdasPriceTerminalStatusManager();
        this.receiveNewMessageListener = new PdasPriceTerminalLazyInitializer.ReceiveNewMessageListener(this);
        this.loginAttempts = 0;
        this.attemptDelay = PdasPriceTerminalLazyInitializer.ATTEMPT_DELAY_IN_MSC;
        this.executionTimeEvent = null;
    }
    static create(commandFactory, commandEnvironment, sessionStorage, ssoTokenController, tradeSessionStatusManager, login, ssoToken, aliveControllerFactory, rakeOutControllerFactory, testRequestControllerFactory, priceTerminal) {
        let result;
        result = new PdasPriceTerminalLazyInitializer();
        result.commandFactory = commandFactory;
        result.commandEnvironment = commandEnvironment;
        result.ssoTokenController = ssoTokenController;
        result.sessionStorage = sessionStorage;
        result.login = login;
        result.ssoToken = ssoToken;
        result.tradeSessionStatusManager = tradeSessionStatusManager;
        result.aliveControllerFactory = aliveControllerFactory;
        result.rakeOutControllerFactory = rakeOutControllerFactory;
        result.testRequestControllerFactory = testRequestControllerFactory;
        result.priceTerminal = priceTerminal;
        if (commandEnvironment != null) {
            result.messageRouter = commandEnvironment.getMessageRouter();
            result.subscribeMessages();
            result.pdasPriceTerminalStatusManager = PdasPriceTerminalStatusManager.create(priceTerminal.getName(), commandEnvironment.getMessageRouter(), tradeSessionStatusManager);
            result.pdasReconnector = PdasReconnector.create(commandEnvironment.getMessageRouter(), result.pdasPriceTerminalStatusManager, result);
        }
        result.setAttemptScheduler();
        return result;
    }
    subscribeMessages() {
        this.messageRouter.subscribeNewMessageReceive(MessageType.NamedTrigger, this.receiveNewMessageListener);
    }
    setAttemptScheduler() {
        this.attemptsScheduler = scheduler.create(this.attemptDelay, new PdasPriceTerminalLazyInitializer.RunAttempt(this));
    }
    setReconnectorAttemptDelay(attemptDelay) {
        if (this.pdasReconnector != null) {
            this.pdasReconnector.setReconnectorAttemptDelay(attemptDelay);
        }
    }
    getPriceTerminalType() {
        return PriceTerminalTypes.PDAS;
    }
    isInitialized() {
        return this.priceSessionInstance != null;
    }
    stop() {
        this.reset();
        if (this.messageRouter != null) {
            this.messageRouter.unsubscribeNewMessageReceive(MessageType.NamedTrigger, this.receiveNewMessageListener);
        }
        this.pdasPriceTerminalStatusManager.changeConnectionStatus(ConnectionStatus.DISCONNECTED);
    }
    reset() {
        this.stopWithoutAttemptsScheduler();
        this.priceSessionInstance = null;
        this.priceTerminalCallbacksContainer.clear();
        if (this.attemptsScheduler != null) {
            this.attemptsScheduler.stop();
        }
    }
    stopWithoutAttemptsScheduler() {
        if (this.pdasReconnector != null) {
            this.pdasReconnector.stop();
        }
        if (this.pdasTerminalControllerInstance != null) {
            this.pdasTerminalControllerInstance.stop();
            this.pdasTerminalControllerInstance = null;
        }
    }
    getInitializedPriceTerminal(callback) {
        let toLogin;
        toLogin = this.priceTerminalCallbacksContainer.length() == 0;
        if (this.priceSessionInstance == null) {
            this.priceTerminalCallbacksContainer.enqueue(callback);
            if (toLogin) {
                this.loginToDASPriceTerminal(this.priceTerminalCallbacksContainer);
            }
        }
        else {
            callback.onSuccess(PriceTerminalData.create(this.priceTerminal, this.priceSessionInstance));
        }
    }
    loginToDASPriceTerminal(callback) {
        let priceTerminalControllerCallback, tradingTerminal, getInitializedPriceTerminalCallback;
        getInitializedPriceTerminalCallback = GetInitializedPriceTerminalCallback.create(this.pdasPriceTerminalStatusManager, callback);
        if (this.executionTimeEvent == null) {
            this.executionTimeEvent = ExecutionTimeEvenUtil.eventStart(ExecutionTimeEventName.PDasTerminalLoginTime);
            this.pdasReconnector.start();
            this.pdasPriceTerminalStatusManager.onStartLogin();
        }
        tradingTerminal = this.commandEnvironment.getTradingTerminal();
        this.pdasTerminalControllerInstance = PdasPriceTerminalController.create(this.commandFactory, this.commandEnvironment, TradingSessionProvider.create(this.sessionStorage), this.ssoTokenController, this.tradeSessionStatusManager, this.aliveControllerFactory, this.rakeOutControllerFactory, this.testRequestControllerFactory);
        priceTerminalControllerCallback = new PdasPriceTerminalLazyInitializer.PdasPriceTerminalControllerCallback(this);
        priceTerminalControllerCallback.setPdasPriceTerminalController(this.pdasTerminalControllerInstance);
        priceTerminalControllerCallback.setPriceTerminal(this.priceTerminal);
        priceTerminalControllerCallback.setCallback(getInitializedPriceTerminalCallback);
        this.pdasTerminalControllerInstance.setSessionErrorObserver(this.pdasPriceTerminalStatusManager);
        this.pdasTerminalControllerInstance.login(this.sessionStorage.getTradingSession(), this.login, this.ssoToken, tradingTerminal, this.priceTerminal, priceTerminalControllerCallback);
    }
    getConnectionStatus() {
        return this.pdasPriceTerminalStatusManager.getConnectionStatus();
    }
    getMdtId() {
        return this.priceTerminal.getName();
    }
    getPriceStreams() {
        return this.priceTerminal.getStreams();
    }
    connect() {
        this.getInitializedPriceTerminal(GetInitializedPriceTerminalCallback.create(this.pdasPriceTerminalStatusManager, null));
    }
    disconnect() {
        this.stop();
    }
    subscribeConnectionStatusChange(listener) {
        this.pdasPriceTerminalStatusManager.subscribeConnectionStatusChange(listener);
    }
}
module.exports = PdasPriceTerminalLazyInitializer
PdasPriceTerminalLazyInitializer.PdasPriceTerminalControllerCallback = class {
    pdasPriceTerminalController;
    priceTerminal;
    callback;
    _owner_;
    constructor(_owner_) {
        this._owner_ = _owner_;
    }
    setCallback(callback) {
        this.callback = callback;
    }
    setPdasPriceTerminalController(pdasPriceTerminalController) {
        this.pdasPriceTerminalController = pdasPriceTerminalController;
    }
    setPriceTerminal(priceTerminal) {
        this.priceTerminal = priceTerminal;
    }
    onError(error) {
        if (this._owner_.getConnectionStatus().isConnecting() && this._owner_.loginAttempts < PdasPriceTerminalLazyInitializer.MAX_ATTEMPTS) {
            this._owner_.loginAttempts = this._owner_.loginAttempts + 1;
            this._owner_.logger.info(error + ": Try login again with attempt=" + (this._owner_.loginAttempts).toString());
            this._owner_.attemptsScheduler.startWithDelay();
            return;
        }
        this._owner_.loginAttempts = 0;
        if (this._owner_.executionTimeEvent != null) {
            ExecutionTimeEvenUtil.eventStopWithError(this._owner_.executionTimeEvent, error);
            this._owner_.executionTimeEvent = null;
        }
        this._owner_.executionTimeEvent = null;
        if (this._owner_.getConnectionStatus().isConnecting()) {
            this._owner_.pdasPriceTerminalStatusManager.onLoginError(error);
            this._owner_.stopWithoutAttemptsScheduler();
        }
        this.callback.onError(error);
    }
    onSuccess(priceSession) {
        this._owner_.loginAttempts = 0;
        this._owner_.priceSessionInstance = priceSession;
        if (this._owner_.executionTimeEvent != null) {
            ExecutionTimeEvenUtil.eventStop(this._owner_.executionTimeEvent);
            this._owner_.executionTimeEvent = null;
        }
        this._owner_.pdasPriceTerminalStatusManager.onLoginSuccess();
        this.callback.onSuccess(PriceTerminalData.create(this.priceTerminal, priceSession));
        if (this._owner_.messageRouter != null) {
            this._owner_.messageRouter.publishNewMessage([MdtConnectedMessage.create(this.priceTerminal.getStreams(), false)]);
        }
    }
}
PdasPriceTerminalLazyInitializer.RunAttempt = class {
    _owner_;
    constructor(_owner_) {
        this._owner_ = _owner_;
    }
    invoke() {
        this._owner_.attemptsScheduler.stop();
        if (this._owner_.messageRouter != null) {
            this._owner_.messageRouter.publishNewMessage([MessageBuilder.createLockedMessage(NamedTriggerMessage.create(this._owner_.priceTerminal.getName()))]);
        }
        else {
            this._owner_.loginToDASPriceTerminal(this._owner_.priceTerminalCallbacksContainer);
        }
    }
}
PdasPriceTerminalLazyInitializer.ReceiveNewMessageListener = class {
    _owner_;
    constructor(_owner_) {
        this._owner_ = _owner_;
    }
    onNewMessageReceive(message) {
        let namedTriggerMessage;
        if (message.getType() == MessageType.NamedTrigger) {
            namedTriggerMessage = message;
            if (namedTriggerMessage.getName() == this._owner_.priceTerminal.getName()) {
                this._owner_.loginToDASPriceTerminal(this._owner_.priceTerminalCallbacksContainer);
            }
        }
    }
}
