'use strict';
let APdasBatchRequestMessage = require('./APdasBatchRequestMessage.js');
let PdasMessageFieldFactory = require('./PdasMessageFieldFactory.js');
let PdasMessageSerializer = require('./PdasMessageSerializer.js');
let PdasMessageFieldTag = require('./PdasMessageFieldTag.js');
let APdasRequestMessage = require('./APdasRequestMessage.js');
let PdasMessageValue = require('./PdasMessageValue.js');
let MessageBuilder = require('./MessageBuilder.js');
let PdasConstants = require('./PdasConstants.js');
let PdasTransportMessage = require('./PdasTransportMessage.js');
class APdasBatchByAcctAndOffersRequestMessage extends APdasBatchRequestMessage {
    buildWithCommand(tradingSession, acctIds, offerIds, requestNumberGenerator, transactTime, command, transportMessageType) {
        let pdasMessageSerializer, factory, pdasMessage, requestId, pdasMessageList, innerList, group, innerGroup, result, terminalUrl, i;
        factory = new PdasMessageFieldFactory();
        pdasMessageSerializer = new PdasMessageSerializer();
        terminalUrl = tradingSession.getTradingTerminal().getUrls()[0];
        requestId = tradingSession.getSessionId() + "-" + (requestNumberGenerator.getNextRequestNumber()).toString();
        pdasMessage = APdasBatchRequestMessage.createBatchMessage(0, factory, tradingSession, transactTime, requestId);
        pdasMessage.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_COMMAND_ID, command));
        pdasMessageList = factory.createList(PdasMessageFieldTag.FXCM_EMB_MSG);
        for (i = 0; i <= acctIds.length - 1; i += 1) {
            requestId = tradingSession.getSessionId() + "-" + (requestNumberGenerator.getNextRequestNumber()).toString();
            group = factory.createGroup();
            APdasRequestMessage.fillPdasMessageItem(group, factory, tradingSession, null, requestId);
            innerList = factory.createList(PdasMessageFieldTag.FXCM_NO_PARAM);
            innerGroup = factory.createGroup();
            innerGroup.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_NAME, PdasMessageValue.CLIENT_ACCT_ID));
            innerGroup.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_VALUE, acctIds[i]));
            innerList.addChild(innerGroup);
            innerList.addChild(MessageBuilder.getOfferIdsGroup(factory, offerIds));
            innerGroup = factory.createGroup();
            innerGroup.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_NAME, PdasMessageValue.CLIENT_QID));
            innerGroup.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_VALUE, requestId));
            innerList.addChild(innerGroup);
            group.addChild(innerList);
            group.addChild(factory.createIntField(PdasMessageFieldTag.FXCM_CONTINUOUS_FLAG, i + 1));
            group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_COMMAND_ID, command));
            group.addChild(factory.createStringField(PdasConstants.SID, tradingSession.getSessionId()));
            pdasMessageList.addChild(group);
        }
        pdasMessage.addChild(pdasMessageList);
        pdasMessage.addChild(factory.createIntField(PdasMessageFieldTag.BATCH_RESPONSE, 1));
        pdasMessage.addChild(factory.createStringField(PdasConstants.SID, tradingSession.getSessionId()));
        result = PdasTransportMessage.create(transportMessageType, this.createRequestUrl(terminalUrl), pdasMessageSerializer.serialize(pdasMessage));
        return result;
    }
}
module.exports = APdasBatchByAcctAndOffersRequestMessage
