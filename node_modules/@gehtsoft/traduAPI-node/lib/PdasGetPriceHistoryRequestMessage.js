'use strict';
let APdasRequestMessage = require('./APdasRequestMessage.js');
let PdasMessageFieldFactory = require('./PdasMessageFieldFactory.js');
let PdasMessageSerializer = require('./PdasMessageSerializer.js');
let PdasMessageType = require('./PdasMessageType.js');
let PdasMessageFieldTag = require('./PdasMessageFieldTag.js');
let PdasMessageValue = require('./PdasMessageValue.js');
let TimeStamp = require('./TimeStamp.js');
let Timeframe = require('./Timeframe.js');
let TimeframeUnit = require('./TimeframeUnit.js');
let PdasConstants = require('./PdasConstants.js');
let PdasTransportMessage = require('./PdasTransportMessage.js');
let TransportMessageType = require('./TransportMessageType.js');
let stdlib = require('@gehtsoft/LuaxStdlib-node').stdlib;
let PdasMdEntryTypes = require('./PdasMdEntryTypes.js');
class PdasGetPriceHistoryRequestMessage extends APdasRequestMessage {
    build(priceTerminalData, priceHistoryRequest, requestNumber, transactTime) {
        let pdasMessageSerializer, factory, pdasMessage, requestId, pdasMessageList, group, result, timeStamp, terminalUrl, interval;
        factory = new PdasMessageFieldFactory();
        pdasMessageSerializer = new PdasMessageSerializer();
        terminalUrl = priceTerminalData.getPriceTerminal().getUrls()[0];
        requestId = priceTerminalData.getPriceSession().getSessionId() + "-" + (requestNumber).toString();
        pdasMessage = factory.createMessage(PdasMessageType.PRICE_HISTORY_MESSAGE);
        pdasMessageList = factory.createList(PdasMessageFieldTag.NO_RELATED_SYM);
        group = factory.createGroup();
        group.addChild(factory.createStringField(PdasMessageFieldTag.SYMBOL, priceHistoryRequest.getInstrument()));
        pdasMessageList.addChild(group);
        pdasMessage.addChild(pdasMessageList);
        pdasMessage.addChild(factory.createStringField(PdasMessageFieldTag.MD_REQ_ID, requestId));
        pdasMessage.addChild(factory.createStringField(PdasMessageFieldTag.SUBSCRIPTION_REQUEST_TYPE, "0"));
        if (priceHistoryRequest.getQuotesCount() > 0) {
            pdasMessage.addChild(factory.createLongField(PdasMessageFieldTag.MARKET_DEPTH, priceHistoryRequest.getQuotesCount()));
        }
        pdasMessage.addChild(pdasMessageList);
        pdasMessageList = factory.createList(PdasMessageFieldTag.NO_MD_ENTRY_TYPES);
        this.addMdTypes(pdasMessageList, factory);
        pdasMessage.addChild(pdasMessageList);
        pdasMessage.addChild(factory.createStringField(PdasMessageFieldTag.TRADING_SESSION_ID, priceTerminalData.getPriceTerminal().getId()));
        pdasMessage.addChild(factory.createStringField(PdasMessageFieldTag.MSG_TYPE, PdasMessageType.PRICE_HISTORY_MESSAGE));
        pdasMessageList = factory.createList(PdasMessageFieldTag.NO_TRADING_SESSIONS);
        group = factory.createGroup();
        group.addChild(factory.createStringField(PdasMessageFieldTag.TRADING_SESSION_ID, priceTerminalData.getPriceTerminal().getId()));
        group.addChild(factory.createStringField(PdasMessageFieldTag.TRADING_SESSION_SUB_ID, PdasMessageValue.CLIENT_PRICE_SERVER));
        pdasMessageList.addChild(group);
        pdasMessage.addChild(pdasMessageList);
        timeStamp = TimeStamp.create(transactTime);
        pdasMessage.addChild(factory.createStringField(PdasMessageFieldTag.TRANSACT_TIME, timeStamp.getTimeStampString()));
        pdasMessage.addChild(factory.createStringField(PdasMessageFieldTag.TRADING_SESSION_SUB_ID, priceTerminalData.getPriceTerminal().getSubId()));
        interval = this.ToFXCMInterval(priceHistoryRequest.getTimeframe());
        if (interval == -1) {
            pdasMessage.addChild(factory.createLongField(PdasMessageFieldTag.FXCM_TIMING_INTERVAL, this.ToFXCMInterval(Timeframe.create(priceHistoryRequest.getTimeframe().getUnit(), 1))));
            pdasMessage.addChild(factory.createStringField(PdasMessageFieldTag.TIMEFRAME, TimeframeUnit.toString(priceHistoryRequest.getTimeframe().getUnit()) + (priceHistoryRequest.getTimeframe().getSize()).toString()));
        }
        else {
            pdasMessage.addChild(factory.createLongField(PdasMessageFieldTag.FXCM_TIMING_INTERVAL, interval));
        }
        pdasMessage.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_START_DATE, this.createDate(priceHistoryRequest.getFrom())));
        pdasMessage.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_START_TIME, this.createTime(priceHistoryRequest.getFrom())));
        pdasMessage.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_END_DATE, this.createDate(priceHistoryRequest.getTo())));
        pdasMessage.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_END_TIME, this.createTime(priceHistoryRequest.getTo())));
        if (priceHistoryRequest.getQuotesCount() > 0) {
            pdasMessage.addChild(factory.createLongField(PdasMessageFieldTag.FXCM_NO_SNAPSHOT, priceHistoryRequest.getQuotesCount()));
        }
        pdasMessage.addChild(factory.createStringField(PdasMessageFieldTag.RESPONSE_FORMAT, PdasMessageType.FXCM_RESPONSE));
        pdasMessage.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_INCLUDE_WEEKENDS, "false"));
        pdasMessage.addChild(factory.createLongField(PdasMessageFieldTag.FXCM_CANDLE_OPEN_PRICE_TYPE, 0));
        pdasMessage.addChild(factory.createStringField(PdasConstants.SID, priceTerminalData.getPriceSession().getSessionId()));
        result = PdasTransportMessage.create(TransportMessageType.GetPriceHistory, this.createRequestUrl(terminalUrl), pdasMessageSerializer.serialize(pdasMessage));
        return result;
    }
    createDate(date) {
        let year;
        year = (stdlib.year(date)).toString();
        return year + this.twoDigits(stdlib.month(date)) + this.twoDigits(stdlib.day(date));
    }
    createTime(date) {
        return this.twoDigits(stdlib.hour(date)) + ":" + this.twoDigits(stdlib.minute(date)) + ":" + this.twoDigits(stdlib.second(date));
    }
    twoDigits(number) {
        let result;
        result = (number).toString();
        if (stdlib.len(result) < 2) {
            result = "0" + result;
        }
        return result;
    }
    addMdTypes(pdasMessageList, factory) {
        let group, types, i;
        types = [PdasMdEntryTypes.BIDOPEN, PdasMdEntryTypes.BIDCLOSE, PdasMdEntryTypes.BIDHIGH, PdasMdEntryTypes.BIDLOW, PdasMdEntryTypes.ASKOPEN, PdasMdEntryTypes.ASKCLOSE, PdasMdEntryTypes.ASKHIGH, PdasMdEntryTypes.ASKLOW, PdasMdEntryTypes.TICKVOLUME];
        for (i = 0; i <= types.length - 1; i += 1) {
            group = factory.createGroup();
            group.addChild(factory.createStringField(PdasMessageFieldTag.MD_ENTRY_TYPE, types[i]));
            pdasMessageList.addChild(group);
        }
    }
    ToFXCMInterval(timeframe) {
        let tframes, tmstr, i, result;
        result = -1;
        if (timeframe != null) {
            tframes = ["1t", "1m", "5m", "15m", "30m", "1h", "1d", "1w", "1M", "1Y"];
            tmstr = timeframe.toString();
            for (i = 0; i <= tframes.length - 1; i += 1) {
                if (tframes[i] == tmstr) {
                    result = i;
                    break;
                }
            }
        }
        return result;
    }
}
module.exports = PdasGetPriceHistoryRequestMessage
