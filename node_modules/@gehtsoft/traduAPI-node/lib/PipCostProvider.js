'use strict';
let LogManager = require('./LogManager.js');
let exception = require('@gehtsoft/LuaxStdlib-node').exception;
let FXConnectLiteErrorCodes = require('./FXConnectLiteErrorCodes.js');
let stdlib = require('@gehtsoft/LuaxStdlib-node').stdlib;
let PipCostBuilder = require('./PipCostBuilder.js');
let Instrument = require('./Instrument.js');
class PipCostProvider {
    internalOffersProvider;
    unitCostCalculator;
    logger;
    static create(internalOffersProvider, unitCostCalculator) {
        let instance;
        instance = new PipCostProvider();
        instance.internalOffersProvider = internalOffersProvider;
        instance.unitCostCalculator = unitCostCalculator;
        instance.logger = LogManager.getLogger();
        return instance;
    }
    getPipCost(instrument, account) {
        let bidAsk, offer, averageRate, errorMessage, unitCost, amount, value;
        if (instrument == null) {
            errorMessage = "PipCostProvider.getPipCost(): instrument is not set";
            this.logger.error(errorMessage);
            throw exception.create(FXConnectLiteErrorCodes.CODE_REQUIRED_PARAMETER_NOT_SET, errorMessage);
        }
        if (account == null) {
            errorMessage = "PipCostProvider.getPipCost(): account is not set";
            this.logger.error(errorMessage);
            throw exception.create(FXConnectLiteErrorCodes.CODE_REQUIRED_PARAMETER_NOT_SET, errorMessage);
        }
        offer = this.internalOffersProvider.getInternalOfferById(instrument.getOfferId());
        if (offer != null) {
            bidAsk = this.internalOffersProvider.calculateBidAsk(offer);
            averageRate = stdlib.roundInl((bidAsk.getAsk() + bidAsk.getBid()) / 2, instrument.getDigits());
            unitCost = this.unitCostCalculator.calculate(account.getAccountId(), account.getLeverageProfileId(), instrument.getOfferId(), averageRate);
            amount = this.getPipCostAmount(instrument, account);
            value = instrument.getPointSize() * amount * this.getContractMultiplier(instrument) * unitCost;
        }
        else {
            amount = 0;
            value = 0.0;
            this.logger.info("PipCostProvider.getPipCost(): Offer not found, offerId='" + instrument.getOfferId() + "'");
        }
        return new PipCostBuilder().setQuantity(amount).setValue(value).build();
    }
    getPipCostAmount(instrument, account) {
        let commonBaseUnitSize, instrumentBaseUnitSize;
        instrumentBaseUnitSize = instrument.getBaseUnitSize();
        if (instrument.getInstrumentType() == Instrument.TYPE_FOREX) {
            commonBaseUnitSize = account.getBaseUnitSize();
            if (commonBaseUnitSize > instrumentBaseUnitSize) {
                return commonBaseUnitSize;
            }
        }
        return instrumentBaseUnitSize;
    }
    getContractMultiplier(instrument) {
        if (instrument.getInstrumentType() == Instrument.TYPE_FOREX) {
            return 1;
        }
        return instrument.getContractMultiplier();
    }
}
module.exports = PipCostProvider
