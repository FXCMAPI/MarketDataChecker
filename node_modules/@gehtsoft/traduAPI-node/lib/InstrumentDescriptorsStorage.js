'use strict';
let string_map = require('@gehtsoft/LuaxStdlib-node').string_map;
let list = require('@gehtsoft/LuaxStdlib-node').list;
let InternalInstrumentDescriptor = require('./InternalInstrumentDescriptor.js');
let StringValueObject = require('./StringValueObject.js');
let stdlib = require('@gehtsoft/LuaxStdlib-node').stdlib;
//@@DocBrief("class provides access to a collection of instrument information")
class InstrumentDescriptorsStorage {
    storageDescriptors;
    descriptorsBySymbol;
    dxFeedSymbolBySymbol;
    descriptorsByDxFeedSymbol;
    streamsWithSubscription;
    constructor() {
        this.storageDescriptors = new string_map();
        this.descriptorsBySymbol = new string_map();
        this.dxFeedSymbolBySymbol = new string_map();
        this.descriptorsByDxFeedSymbol = new string_map();
        this.streamsWithSubscription = new list();
    }
    getAllInstrumentDescriptors() {
        let length, i, keys, instrumentDescriptor, instrumentDescriptors;
        keys = this.storageDescriptors.keys();
        length = keys.length;
        instrumentDescriptors = new Array(length);
        for (i = 0; i <= length - 1; i += 1) {
            instrumentDescriptor = this.storageDescriptors.get(keys[i]);
            instrumentDescriptors[i] = instrumentDescriptor;
        }
        return instrumentDescriptors;
    }
    isPriceStreamHasSubscribedInstruments(streamId) {
        let i;
        for (i = 0; i <= this.streamsWithSubscription.length() - 1; i += 1) {
            if (this.streamsWithSubscription.get(i).get() == streamId) {
                return true;
            }
        }
        return false;
    }
    addInstrumentDescriptor(instrumentDescriptorFromCommand) {
        let symbol, dxFeedSymbol, instrumentDescriptor;
        instrumentDescriptor = InternalInstrumentDescriptor.createInstrumentDescriptor(instrumentDescriptorFromCommand);
        if (instrumentDescriptor.getSubscriptionStatus() == "T") {
            this.addStreamInSubscriptionsList(instrumentDescriptor.getPriceStreamId());
        }
        this.storageDescriptors.set(instrumentDescriptor.getOfferId(), instrumentDescriptor);
        symbol = instrumentDescriptor.getSymbol();
        this.descriptorsBySymbol.set(symbol, instrumentDescriptor);
        dxFeedSymbol = instrumentDescriptorFromCommand.getDxFeedSymbol();
        if (dxFeedSymbol != null && stdlib.len(dxFeedSymbol) > 0) {
            this.descriptorsByDxFeedSymbol.set(dxFeedSymbol, instrumentDescriptor);
            this.dxFeedSymbolBySymbol.set(symbol, StringValueObject.create(dxFeedSymbol));
        }
    }
    getInstrumentDescriptorBySymbol(symbol) {
        if (!this.descriptorsBySymbol.contains(symbol)) {
            return null;
        }
        return this.descriptorsBySymbol.get(symbol);
    }
    getInstrumentDescriptorByDxfeedSymbol(symbol) {
        if (!this.descriptorsByDxFeedSymbol.contains(symbol)) {
            return null;
        }
        return this.descriptorsByDxFeedSymbol.get(symbol);
    }
    getDxfeedSymbolBySymbol(symbol) {
        if (!this.dxFeedSymbolBySymbol.contains(symbol)) {
            return null;
        }
        return this.dxFeedSymbolBySymbol.get(symbol).get();
    }
    getInstrumentDescriptorByOfferId(instrumentId) {
        if (!this.storageDescriptors.contains(instrumentId)) {
            return null;
        }
        return this.storageDescriptors.get(instrumentId);
    }
    clear() {
        this.storageDescriptors.clear();
        this.descriptorsBySymbol.clear();
        this.streamsWithSubscription.clear();
    }
    addStreamInSubscriptionsList(streamId) {
        let i;
        for (i = 0; i <= this.streamsWithSubscription.length() - 1; i += 1) {
            if (this.streamsWithSubscription.get(i).get() == streamId) {
                return;
            }
        }
        this.streamsWithSubscription.add(StringValueObject.create(streamId));
    }
}
module.exports = InstrumentDescriptorsStorage
