'use strict';
let AGetPersistentSessionFxmsgReader = require('./AGetPersistentSessionFxmsgReader.js');
let GetEmptyTradingSessionMessageBuilder = require('./GetEmptyPriceSessionMessageBuilder.js');
let GetTradingSessionMessageBuilder = require('./GetTradingSessionMessageBuilder.js');
let csvParser = require('@gehtsoft/LuaxStdlib-node').csvParser;
let stdlib = require('@gehtsoft/LuaxStdlib-node').stdlib;
class GetTradingSessionFxmsgReader extends AGetPersistentSessionFxmsgReader {
    processStatus(status, statusText, requestId) {
        let statusTextSplit, data, dataSplit, csvParserInstance, responseMessage, emptyResponseMessage, message;
        message = null;
        if ("0" == status) {
            emptyResponseMessage = new GetEmptyTradingSessionMessageBuilder();
            emptyResponseMessage.setRequestId(requestId);
            message = this.toIMessage(emptyResponseMessage.build());
        } else if ("2" == status) {
            responseMessage = new GetTradingSessionMessageBuilder();
            responseMessage.setError(statusText);
            responseMessage.setRequestId(requestId);
            message = this.toIMessage(responseMessage.build());
        } else if ("1" == status && statusText != null && stdlib.len(statusText) > 0) {
            csvParserInstance = new csvParser();
            csvParserInstance.valueSeparator = "\n";
            statusTextSplit = csvParserInstance.splitLine(statusText);
            if (statusTextSplit.length > 1) {
                data = statusTextSplit[1];
                csvParserInstance.valueSeparator = ";";
                dataSplit = csvParserInstance.splitLine(data);
                if (dataSplit.length > 2) {
                    responseMessage = new GetTradingSessionMessageBuilder();
                    responseMessage.setPersistentSession(stdlib.trim(dataSplit[0]));
                    responseMessage.setUserKind(stdlib.trim(dataSplit[1]));
                    responseMessage.setUserId(stdlib.trim(dataSplit[2]));
                    responseMessage.setOptions(this.options);
                    responseMessage.setRequestId(requestId);
                    message = this.toIMessage(responseMessage.build());
                }
            }
        }
        return message;
    }
    toIMessage(mess) {
        return mess;
    }
}
module.exports = GetTradingSessionFxmsgReader
