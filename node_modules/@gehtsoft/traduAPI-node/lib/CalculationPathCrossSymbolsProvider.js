'use strict';
let LogManager = require('./LogManager.js');
let exception = require('@gehtsoft/LuaxStdlib-node').exception;
let FXConnectLiteErrorCodes = require('./FXConnectLiteErrorCodes.js');
let list = require('@gehtsoft/LuaxStdlib-node').list;
let CollectionUtils = require('./CollectionUtils.js');
class CalculationPathCrossSymbolsProvider {
    leverageProfilesProvider;
    instrumentsProvider;
    rawAccountsProvider;
    logger;
    static create(leverageProfilesProvider, instrumentsProvider, rawAccountsProvider) {
        let instance;
        instance = new CalculationPathCrossSymbolsProvider();
        instance.leverageProfilesProvider = leverageProfilesProvider;
        instance.instrumentsProvider = instrumentsProvider;
        instance.rawAccountsProvider = rawAccountsProvider;
        instance.logger = LogManager.getLogger();
        return instance;
    }
    getInstrumentDescriptor(symbol) {
        let instrumentDescriptor, errorText;
        if (symbol == null) {
            errorText = "CalculationPathCrossSymbolsProvider.findCrossSymbols(): 'symbol' parameter is not set";
            this.logger.error(errorText);
            throw exception.create(FXConnectLiteErrorCodes.CODE_REQUIRED_PARAMETER_NOT_SET, errorText);
        }
        instrumentDescriptor = this.instrumentsProvider.getInstrumentDescriptorBySymbol(symbol);
        if (instrumentDescriptor == null) {
            errorText = "CalculationPathCrossSymbolsProvider.findCrossSymbols(): Instrumet descriptor for symbol '" + symbol + "' is not found";
            this.logger.error(errorText);
            throw exception.create(FXConnectLiteErrorCodes.CODE_INSTRUMENT_IS_NOT_FOUND, errorText);
        }
        return instrumentDescriptor;
    }
    findCrossSymbols(symbol, strongCrossesCheck) {
        let instrumentDescriptor, accounts, k, symbolsList;
        instrumentDescriptor = this.getInstrumentDescriptor(symbol);
        accounts = this.rawAccountsProvider.getAllAccounts();
        symbolsList = new list();
        for (k = 0; k <= accounts.length - 1; k += 1) {
            this.findCrossSymbolsInner(accounts[k], symbolsList, instrumentDescriptor, strongCrossesCheck);
        }
        return CollectionUtils.stringListToArray(symbolsList);
    }
    findCrossSymbolsByAccount(symbol, account, strongCrossesCheck) {
        let instrumentDescriptor, symbolsList;
        instrumentDescriptor = this.getInstrumentDescriptor(symbol);
        symbolsList = new list();
        this.findCrossSymbolsInner(account, symbolsList, instrumentDescriptor, strongCrossesCheck);
        return CollectionUtils.stringListToArray(symbolsList);
    }
    findCrossSymbolsInner(account, symbolsList, instrumentDescriptor, strongCrossesCheck) {
        let pnlCalculationPath, errorText, i, items, itemInstrumentDescriptor;
        pnlCalculationPath = this.leverageProfilesProvider.getPLCalculationPath(account.getAccountId(), account.getLeverageProfileId(), instrumentDescriptor.getOfferId());
        if (pnlCalculationPath == null) {
            errorText = "CalculationPathCrossSymbolsProvider.findCrossSymbols(): Not found PLCalculationPath (accountId='" + account.getAccountId() + "', offerId='" + instrumentDescriptor.getOfferId() + "')";
            this.logger.error(errorText);
            return;
        }
        items = pnlCalculationPath.getItems();
        for (i = 0; i <= items.length - 1; i += 1) {
            itemInstrumentDescriptor = this.instrumentsProvider.getInstrumentDescriptorByOfferId(items[i].getOfferId());
            if (itemInstrumentDescriptor == null) {
                errorText = "CalculationPathCrossSymbolsProvider.findCrossSymbols(): Instrumet descriptor for offerId '" + items[i].getOfferId() + "' is not found";
                this.logger.error(errorText);
                if (strongCrossesCheck) {
                    throw exception.create(FXConnectLiteErrorCodes.CODE_INSTRUMENT_IS_NOT_FOUND, errorText);
                }
                else {
                    continue;
                }
            }
            CollectionUtils.addStringToList(symbolsList, itemInstrumentDescriptor.getSymbol());
        }
    }
}
module.exports = CalculationPathCrossSymbolsProvider
