'use strict';
let LogManager = require('./LogManager.js');
let list = require('@gehtsoft/LuaxStdlib-node').list;
let PdasPriceTerminalLazyInitializer = require('./PdasPriceTerminalLazyInitializer.js');
let DXFeedPriceTerminalLazyInitializer = require('./DXFeedPriceTerminalLazyInitializer.js');
class LoginInMultiPriceTerminalsCommand {
    ssoTokenController;
    sessionStorage;
    commandEnvironment;
    commandFactory;
    callback;
    connectionStatusManager;
    login;
    ssoToken;
    logger;
    connectingTerminal;
    allPriceTerminals;
    aliveControllerFactory;
    rakeOutControllerFactory;
    instrumentsProvider;
    dxfeedConnectionFactory;
    systemSettingsProvider;
    dxfeedPriceHistoryMediatorFactory;
    tradingTerminal;
    dxFeedNamesProvider;
    messageRouter;
    totalRequests;
    configFlags;
    rawOffersStorage;
    testRequestControllerFactory;
    constructor() {
        this.logger = LogManager.getLogger();
        this.connectingTerminal = null;
        this.aliveControllerFactory = null;
        this.rakeOutControllerFactory = null;
        this.configFlags = [];
        this.rawOffersStorage = null;
    }
    static create(commandFactory, commandEnvironment, sessionStorage, ssoTokenController, connectionStatusManager, login, ssoToken, aliveControllerFactory, rakeOutControllerFactory, instrumentsProvider, dxfeedConnectionFactory, callback, systemSettingsProvider, dxfeedPriceHistoryMediatorFactory, tradingTerminal, dxFeedNamesProvider, messageRouter, testRequestControllerFactory) {
        let result;
        result = new LoginInMultiPriceTerminalsCommand();
        result.commandFactory = commandFactory;
        result.commandEnvironment = commandEnvironment;
        result.sessionStorage = sessionStorage;
        result.ssoTokenController = ssoTokenController;
        result.login = login;
        result.ssoToken = ssoToken;
        result.callback = callback;
        result.connectionStatusManager = connectionStatusManager;
        result.aliveControllerFactory = aliveControllerFactory;
        result.rakeOutControllerFactory = rakeOutControllerFactory;
        result.rakeOutControllerFactory = rakeOutControllerFactory;
        result.instrumentsProvider = instrumentsProvider;
        result.dxfeedConnectionFactory = dxfeedConnectionFactory;
        result.systemSettingsProvider = systemSettingsProvider;
        result.dxfeedPriceHistoryMediatorFactory = dxfeedPriceHistoryMediatorFactory;
        result.tradingTerminal = tradingTerminal;
        result.messageRouter = messageRouter;
        result.dxFeedNamesProvider = dxFeedNamesProvider;
        result.testRequestControllerFactory = testRequestControllerFactory;
        return result;
    }
    setConfigFlags(configFlags) {
        this.configFlags = configFlags;
    }
    setRawOffersStorage(rawOffersStorage) {
        this.rawOffersStorage = rawOffersStorage;
    }
    execute() {
        let priceTerminals, i, toInit, cur;
        this.logger.debug("LoginInMultiPriceTerminalsCommand. start multi login process");
        this.allPriceTerminals = new list();
        priceTerminals = this.tradingTerminal.getPriceTerminals();
        toInit = false;
        this.totalRequests = 0;
        for (i = 0; i <= priceTerminals.length - 1; i += 1) {
            cur = this.processterminal(priceTerminals[i]);
            toInit = toInit || cur;
        }
        if (!toInit) {
            this.callback.onSuccess();
        }
    }
    processterminal(terminal) {
        let priceTerminalControllerCallback, initializer, protocol, streams, urls, y, retval;
        retval = false;
        priceTerminalControllerCallback = new LoginInMultiPriceTerminalsCommand.GetInitializedPriceTerminalCallback(this);
        streams = terminal.getStreams();
        urls = terminal.getUrls();
        for (y = 0; y <= urls.length - 1; y += 1) {
            protocol = urls[y].getTerminalProtocol();
            initializer = null;
            if (protocol == "pdas") {
                initializer = PdasPriceTerminalLazyInitializer.create(this.commandFactory, this.commandEnvironment, this.sessionStorage, this.ssoTokenController, this.connectionStatusManager, this.login, this.ssoToken, this.aliveControllerFactory, this.rakeOutControllerFactory, this.testRequestControllerFactory, terminal);
            } else if (protocol == "dxfeed-cometd") {
                initializer = DXFeedPriceTerminalLazyInitializer.create(this.commandFactory, this.sessionStorage, this.ssoTokenController, this.connectionStatusManager, this.dxfeedConnectionFactory, this.instrumentsProvider, terminal, this.systemSettingsProvider, this.dxfeedPriceHistoryMediatorFactory, this.dxFeedNamesProvider, this.messageRouter);
                initializer.setConfigFlags(this.configFlags);
                initializer.setRawOffersStorage(this.rawOffersStorage);
            }
            if (initializer != null) {
                this.sessionStorage.addPriceTerminalInitializer(streams, initializer, this.areStreamsActual(streams));
                this.allPriceTerminals.add(initializer);
                if (this.isRequireToInitializeNow(streams)) {
                    retval = true;
                    this.totalRequests = this.totalRequests + 1;
                    initializer.getInitializedPriceTerminal(priceTerminalControllerCallback);
                }
            }
        }
        return retval;
    }
    areStreamsActual(streams) {
        let i, j, instrumentDescriptors;
        instrumentDescriptors = this.instrumentsProvider.getAllInstrumentDescriptors();
        for (i = 0; i <= instrumentDescriptors.length - 1; i += 1) {
            for (j = 0; j <= streams.length - 1; j += 1) {
                if (streams[j] == instrumentDescriptors[i].getPriceStreamId()) {
                    return true;
                }
            }
        }
        return false;
    }
    isRequireToInitializeNow(streams) {
        let i;
        if (streams == null || streams.length == 0) {
            return true;
        }
        for (i = 0; i <= streams.length - 1; i += 1) {
            if (this.instrumentsProvider.isPriceStreamHasSubscribedInstruments(streams[i])) {
                return true;
            }
        }
        return false;
    }
    stop() {
        let i;
        if (this.connectingTerminal != null) {
            this.connectingTerminal.stop();
            this.connectingTerminal = null;
        }
        for (i = 0; i <= this.allPriceTerminals.length() - 1; i += 1) {
            this.allPriceTerminals.get(i).stop();
        }
    }
    subscribeStatusChange(callback) {
        return void(0);
    }
    unsubscribeStatusChange(callback) {
        return void(0);
    }
}
module.exports = LoginInMultiPriceTerminalsCommand
LoginInMultiPriceTerminalsCommand.GetInitializedPriceTerminalCallback = class {
    _owner_;
    constructor(_owner_) {
        this._owner_ = _owner_;
    }
    onError(error) {
        this.commonCheck();
    }
    onSuccess(result) {
        this.commonCheck();
    }
    commonCheck() {
        this._owner_.totalRequests = this._owner_.totalRequests - 1;
        if (this._owner_.totalRequests <= 0) {
            this._owner_.callback.onSuccess();
        }
    }
}
