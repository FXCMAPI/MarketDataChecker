'use strict';
let LogManager = require('./LogManager.js');
let exception = require('@gehtsoft/LuaxStdlib-node').exception;
let FXConnectLiteErrorCodes = require('./FXConnectLiteErrorCodes.js');
let SubscriptionInstrumentCommandFactory = require('./SubscriptionInstrumentCommandFactory.js');
let TradingSessionProvider = require('./TradingSessionProvider.js');
let UnsubscriptionInstrumentCommandFactory = require('./UnsubscriptionInstrumentCommandFactory.js');
let SubscriptionStatusTracker = require('./SubscriptionStatusTracker.js');
let queue = require('@gehtsoft/LuaxStdlib-node').queue;
let SubscribeInstrumentAction = require('./SubscribeInstrumentAction.js');
let StringUtil = require('./StringUtil.js');
let SubscribeInstrumentsInQueueCallback = require('./SubscribeInstrumentsInQueueCallback.js');
let UnsubscribeInstrumentAction = require('./UnsubscribeInstrumentAction.js');
let CollectionUtils = require('./CollectionUtils.js');
class QueuedInstrumentsSubscriptionManager {
    subscriptionInstrumentCommandFactory;
    unsubscriptionInstrumentCommandFactory;
    requestNumberGenerator;
    descriptorsStorage;
    subscriptionStatusTracker;
    storage;
    sessionStorage;
    instrumentDescriptorsSeparator;
    messageExecutor;
    clientCrossSymbolsProvider;
    sessionProvider;
    messageFactory;
    commandFactory;
    messageRouter;
    requestsQueue;
    manageOffersProvider;
    instrumentUpdatesStorage;
    logger;
    leverageProfilesUpdater;
    static create(commandFactory, messageRouter, messageExecutor, sessionStorage, messageFactory, requestNumberGenerator, descriptorsStorage, storage, instrumentDescriptorsSeparator, manageOffersProvider, instrumentUpdatesStorage) {
        let result;
        if (commandFactory == null) {
            LogManager.getLogger().error("QueuedInstrumentsSubscriptionManager.create(): commandFactory is not set");
            throw exception.create(FXConnectLiteErrorCodes.CODE_REQUIRED_PARAMETER_NOT_SET, "commandFactory is not set");
        }
        if (messageRouter == null) {
            LogManager.getLogger().error("QueuedInstrumentsSubscriptionManager.create(): messageRouter is not set");
            throw exception.create(FXConnectLiteErrorCodes.CODE_REQUIRED_PARAMETER_NOT_SET, "messageRouter is not set");
        }
        if (messageExecutor == null) {
            LogManager.getLogger().error("QueuedInstrumentsSubscriptionManager.create(): messageExecutor is not set");
            throw exception.create(FXConnectLiteErrorCodes.CODE_REQUIRED_PARAMETER_NOT_SET, "messageExecutor is not set");
        }
        if (sessionStorage == null) {
            LogManager.getLogger().error("QueuedInstrumentsSubscriptionManager.create(): sessionStorage is not set");
            throw exception.create(FXConnectLiteErrorCodes.CODE_REQUIRED_PARAMETER_NOT_SET, "sessionStorage is not set");
        }
        if (messageFactory == null) {
            LogManager.getLogger().error("QueuedInstrumentsSubscriptionManager.create(): messageFactory is not set");
            throw exception.create(FXConnectLiteErrorCodes.CODE_REQUIRED_PARAMETER_NOT_SET, "messageFactory is not set");
        }
        if (requestNumberGenerator == null) {
            LogManager.getLogger().error("QueuedInstrumentsSubscriptionManager.create(): requestNumberGenerator is not set");
            throw exception.create(FXConnectLiteErrorCodes.CODE_REQUIRED_PARAMETER_NOT_SET, "requestNumberGenerator is not set");
        }
        if (descriptorsStorage == null) {
            LogManager.getLogger().error("QueuedInstrumentsSubscriptionManager.create(): descriptorsStorage is not set");
            throw exception.create(FXConnectLiteErrorCodes.CODE_REQUIRED_PARAMETER_NOT_SET, "descriptorsStorage is not set");
        }
        if (storage == null) {
            LogManager.getLogger().error("QueuedInstrumentsSubscriptionManager.create(): storage is not set");
            throw exception.create(FXConnectLiteErrorCodes.CODE_REQUIRED_PARAMETER_NOT_SET, "storage is not set");
        }
        if (instrumentDescriptorsSeparator == null) {
            LogManager.getLogger().error("QueuedInstrumentsSubscriptionManager.create(): instrumentDescriptorsSeparator is not set");
            throw exception.create(FXConnectLiteErrorCodes.CODE_REQUIRED_PARAMETER_NOT_SET, "instrumentDescriptorsSeparator is not set");
        }
        if (manageOffersProvider == null) {
            LogManager.getLogger().error("QueuedInstrumentsSubscriptionManager.create(): manageOffersProvider is not set");
            throw exception.create(FXConnectLiteErrorCodes.CODE_REQUIRED_PARAMETER_NOT_SET, "manageOffersProvider is not set");
        }
        if (instrumentUpdatesStorage == null) {
            LogManager.getLogger().error("QueuedInstrumentsSubscriptionManager.create(): instrumentUpdatesStorage is not set");
            throw exception.create(FXConnectLiteErrorCodes.CODE_REQUIRED_PARAMETER_NOT_SET, "instrumentUpdatesStorage is not set");
        }
        result = new QueuedInstrumentsSubscriptionManager();
        result.subscriptionInstrumentCommandFactory = SubscriptionInstrumentCommandFactory.create(commandFactory, messageExecutor, messageFactory, TradingSessionProvider.create(sessionStorage), descriptorsStorage);
        result.unsubscriptionInstrumentCommandFactory = UnsubscriptionInstrumentCommandFactory.create(commandFactory, messageExecutor, messageFactory, TradingSessionProvider.create(sessionStorage), descriptorsStorage);
        result.requestNumberGenerator = requestNumberGenerator;
        result.descriptorsStorage = descriptorsStorage;
        result.storage = storage;
        result.instrumentUpdatesStorage = instrumentUpdatesStorage;
        result.manageOffersProvider = manageOffersProvider;
        result.sessionStorage = sessionStorage;
        result.instrumentDescriptorsSeparator = instrumentDescriptorsSeparator;
        result.messageExecutor = messageExecutor;
        result.commandFactory = commandFactory;
        result.messageFactory = messageFactory;
        result.messageRouter = messageRouter;
        result.sessionProvider = TradingSessionProvider.create(sessionStorage);
        result.subscriptionStatusTracker = SubscriptionStatusTracker.create(messageRouter);
        result.requestsQueue = new queue();
        result.logger = LogManager.getLogger();
        result.leverageProfilesUpdater = null;
        return result;
    }
    setLeverageProfilesUpdater(leverageProfilesUpdater) {
        this.leverageProfilesUpdater = leverageProfilesUpdater;
    }
    setClientCrossSymbolsProvider(clientCrossSymbolsProvider) {
        if (clientCrossSymbolsProvider == null) {
            this.logger.error("QueuedInstrumentsSubscriptionManager.setClientCrossSymbolsProvider(): clientCrossSymbolsProvider is not set");
            throw exception.create(FXConnectLiteErrorCodes.CODE_REQUIRED_PARAMETER_NOT_SET, "clientCrossSymbolsProvider is not set");
        }
        this.clientCrossSymbolsProvider = clientCrossSymbolsProvider;
    }
    subscribeInstruments(symbols, callback, sendInCW) {
        let act;
        if (symbols == null || symbols.length == 0) {
            this.logger.error("QueuedInstrumentsSubscriptionManager.subscribeInstruments(): symbols are not set");
            throw exception.create(FXConnectLiteErrorCodes.CODE_REQUIRED_PARAMETER_NOT_SET, "symbols are not set");
        }
        if (callback == null) {
            this.logger.error("QueuedInstrumentsSubscriptionManager.subscribeInstruments(): callback is not set");
            throw exception.create(FXConnectLiteErrorCodes.CODE_REQUIRED_PARAMETER_NOT_SET, "callback is not set");
        }
        act = SubscribeInstrumentAction.create(this.commandFactory, this.messageRouter, this.messageExecutor, this.sessionStorage, this.messageFactory, this.requestNumberGenerator, this.descriptorsStorage, this.storage, this.instrumentDescriptorsSeparator, this.clientCrossSymbolsProvider, this.subscriptionInstrumentCommandFactory, this.subscriptionStatusTracker, this.instrumentUpdatesStorage, sendInCW, this.leverageProfilesUpdater);
        this.logger.info("QueuedInstrumentsSubscriptionManager.subscribeInstruments(" + StringUtil.arrayToString(symbols) + ")");
        this.executeCommAction(act, symbols, callback);
    }
    executeCommAction(act, symbols, callback) {
        let inQueueCallback;
        act.setSymbols(symbols);
        inQueueCallback = SubscribeInstrumentsInQueueCallback.create(callback, this.requestsQueue, this.logger, new QueuedInstrumentsSubscriptionManager.NextAction(this));
        act.setCallback(inQueueCallback);
        this.requestsQueue.enqueue(act);
        this.checkIfNextActionAndExecute();
    }
    checkAndLoadCrossCources(symbols, callback) {
        let act;
        if (symbols == null || symbols.length == 0) {
            this.logger.error("QueuedInstrumentsSubscriptionManager.checkAndLoadCrossCources(): symbols are not set");
            throw exception.create(FXConnectLiteErrorCodes.CODE_REQUIRED_PARAMETER_NOT_SET, "symbols are not set");
        }
        if (callback == null) {
            this.logger.error("QueuedInstrumentsSubscriptionManager.checkAndLoadCrossCources(): callback is not set");
            throw exception.create(FXConnectLiteErrorCodes.CODE_REQUIRED_PARAMETER_NOT_SET, "callback is not set");
        }
        act = SubscribeInstrumentAction.create(this.commandFactory, this.messageRouter, this.messageExecutor, this.sessionStorage, this.messageFactory, this.requestNumberGenerator, this.descriptorsStorage, this.storage, this.instrumentDescriptorsSeparator, this.clientCrossSymbolsProvider, this.subscriptionInstrumentCommandFactory, this.subscriptionStatusTracker, this.instrumentUpdatesStorage, false, this.leverageProfilesUpdater);
        act.setCheckCrosses();
        this.executeCommAction(act, symbols, callback);
    }
    unsubscribeInstruments(symbols, callback, sendInCW) {
        let act;
        if (symbols == null || symbols.length == 0) {
            this.logger.error("PriceHistoryManager.unsubscribeInstruments(): symbols are not set");
            throw exception.create(FXConnectLiteErrorCodes.CODE_REQUIRED_PARAMETER_NOT_SET, "symbols are not set");
        }
        if (callback == null) {
            this.logger.error("PriceHistoryManager.unsubscribeInstruments(): callback is not set");
            throw exception.create(FXConnectLiteErrorCodes.CODE_REQUIRED_PARAMETER_NOT_SET, "callback is not set");
        }
        act = UnsubscribeInstrumentAction.create(this.commandFactory, this.messageRouter, this.messageExecutor, this.sessionStorage, this.messageFactory, this.requestNumberGenerator, this.descriptorsStorage, this.storage, this.instrumentDescriptorsSeparator, this.clientCrossSymbolsProvider, this.unsubscriptionInstrumentCommandFactory, this.subscriptionStatusTracker, this.manageOffersProvider, this.instrumentUpdatesStorage, sendInCW);
        this.logger.info("QueuedInstrumentsSubscriptionManager.unsubscribeInstruments(" + StringUtil.arrayToString(symbols) + ")");
        this.executeCommAction(act, symbols, callback);
    }
    stop() {
        let i, requestAction;
        for (i = 0; i <= this.requestsQueue.length() - 1; i += 1) {
            requestAction = this.requestsQueue.peek();
            requestAction.stop();
        }
        CollectionUtils.clearQueue(this.requestsQueue);
    }
    checkIfNextActionAndExecute() {
        if (this.requestsQueue.length() == 1) {
            this.executeNext();
        }
    }
    executeNext() {
        let requestAction;
        if (this.requestsQueue.length() > 0) {
            requestAction = this.requestsQueue.peek();
            this.logger.info("QueuedInstrumentsSubscriptionManager.executeNext()");
            requestAction.invoke();
        }
    }
}
module.exports = QueuedInstrumentsSubscriptionManager
QueuedInstrumentsSubscriptionManager.NextAction = class {
    _owner_;
    constructor(_owner_) {
        this._owner_ = _owner_;
    }
    invoke() {
        this._owner_.executeNext();
    }
}
