'use strict';
let TrailingType = require('./TrailingType.js');
let stdlib = require('@gehtsoft/LuaxStdlib-node').stdlib;
class TrailingTypeInitializer {
    systemPropertiesController;
    static create(systemPropertiesController) {
        let result;
        result = new TrailingTypeInitializer();
        result.systemPropertiesController = systemPropertiesController;
        return result;
    }
    getTrailingType() {
        let trailingType, trailOrder;
        trailingType = new TrailingType();
        trailingType.setTrailingType(TrailingType.TrailingDenied);
        trailOrder = this.checkFluctuate(trailingType);
        trailOrder = this.checkDynamic(trailingType) || trailOrder;
        if (trailingType.isTrailingDenied() && !trailOrder) {
            this.checkStop(trailingType);
        }
        return trailingType;
    }
    checkFluctuate(trailingType) {
        let propFluctuate;
        propFluctuate = this.systemPropertiesController.getPropertyByName("TRAILING_FLUCTUATE");
        if (propFluctuate != null && stdlib.len(propFluctuate) != 0) {
            if (propFluctuate == "Y") {
                trailingType.setTrailingType(TrailingType.TrailingFluctuate);
            }
            return true;
        }
        return false;
    }
    checkDynamic(trailingType) {
        let propDynamic;
        propDynamic = this.systemPropertiesController.getPropertyByName("TRAILING_DYMANIC");
        if (propDynamic == null || stdlib.len(propDynamic) == 0) {
            propDynamic = this.systemPropertiesController.getPropertyByName("TRAILING_DYNAMIC");
        }
        if (propDynamic != null && stdlib.len(propDynamic) != 0) {
            if (propDynamic == "Y") {
                if (trailingType.isTrailingDenied()) {
                    trailingType.setTrailingType(TrailingType.TrailingDynamic);
                }
                else {
                    trailingType.setTrailingType(TrailingType.TrailingDynamicAndFluctuate);
                }
            }
            return true;
        }
        return false;
    }
    checkStop(trailingType) {
        let propStop, propStopDynamic;
        propStop = this.systemPropertiesController.getPropertyByName("TRAILING_STOP_USED");
        if (propStop != null && stdlib.len(propStop) != 0) {
            if (propStop == "Y") {
                trailingType.setTrailingType(TrailingType.TrailingStopFluctuate);
                propStopDynamic = this.systemPropertiesController.getPropertyByName("TRAILING_STOP_DYNAMIC");
                if (propStopDynamic != null && stdlib.len(propStopDynamic) != 0) {
                    if (propStopDynamic == "Y") {
                        trailingType.setTrailingType(TrailingType.TrailingStopDynamic);
                    }
                }
            }
        }
    }
}
module.exports = TrailingTypeInitializer
