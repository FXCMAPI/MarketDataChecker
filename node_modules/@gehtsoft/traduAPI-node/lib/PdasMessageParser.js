'use strict';
let string_map = require('@gehtsoft/LuaxStdlib-node').string_map;
let xmlParser = require('@gehtsoft/LuaxStdlib-node').xmlParser;
let LogManager = require('./LogManager.js');
let exception = require('@gehtsoft/LuaxStdlib-node').exception;
let list = require('@gehtsoft/LuaxStdlib-node').list;
let stdlib = require('@gehtsoft/LuaxStdlib-node').stdlib;
//@@DocBrief("Parser of a message from pdas")
class PdasMessageParser {
    readers;
    xmlParser;
    pdasResponseMessageCommonParser;
    logger;
    constructor() {
        this.readers = new string_map();
        this.xmlParser = new xmlParser();
        this.logger = LogManager.getLogger();
    }
    setPdasResponseMessageCommonParser(pdasResponseMessageCommonParser) {
        this.pdasResponseMessageCommonParser = pdasResponseMessageCommonParser;
    }
    registerReader(requestType, reader) {
        let readersList, isAlreadyReg;
        if (requestType == null || reader == null) {
            throw exception.create(0, "requestType or reader is not defined");
        }
        if (this.readers.contains(requestType)) {
            readersList = this.readers.get(requestType);
        }
        else {
            readersList = new list();
            this.readers.set(requestType, readersList);
        }
        isAlreadyReg = this.isAlreadyRegistered(readersList, reader);
        if (!isAlreadyReg) {
            readersList.add(reader);
        }
    }
    parse(requestType, xmlSource) {
        let xmlRootNode, readersList, response, messages;
        response = new list();
        if (xmlSource != null && stdlib.len(xmlSource) > 0) {
            xmlRootNode = this.xmlParser.parse(xmlSource);
            messages = this.pdasResponseMessageCommonParser.parse(xmlRootNode);
            if (this.readers.contains(requestType)) {
                readersList = this.readers.get(requestType);
                this.executeReaders(response, readersList, xmlRootNode, messages);
            }
        }
        return this.convertToArray(response);
    }
    executeReaders(responseList, readersList, xmlRootNode, messages) {
        let i, y, reader, messagesTemp;
        messagesTemp = new Array(1);
        for (i = 0; i <= messages.length - 1; i += 1) {
            messagesTemp[0] = messages[i];
            for (y = 0; y <= readersList.length() - 1; y += 1) {
                reader = readersList.get(y);
                reader.read(responseList, xmlRootNode, messagesTemp);
            }
        }
    }
    convertToArray(responseList) {
        let i, resopnseArray;
        resopnseArray = new Array(responseList.length());
        for (i = 0; i <= responseList.length() - 1; i += 1) {
            resopnseArray[i] = responseList.get(i);
        }
        return resopnseArray;
    }
    isAlreadyRegistered(readersList, reader) {
        let currentReader, i;
        for (i = 0; i <= readersList.length() - 1; i += 1) {
            currentReader = readersList.get(i);
            if (reader == currentReader) {
                return true;
            }
        }
        return false;
    }
}
module.exports = PdasMessageParser
