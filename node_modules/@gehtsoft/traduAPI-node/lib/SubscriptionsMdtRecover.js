'use strict';
let LogManager = require('./LogManager.js');
let StringUtil = require('./StringUtil.js');
let buffer = require('@gehtsoft/LuaxStdlib-node').buffer;
let io = require('@gehtsoft/LuaxStdlib-node').io;
let cryptography = require('@gehtsoft/LuaxStdlib-node').cryptography;
let stdlib = require('@gehtsoft/LuaxStdlib-node').stdlib;
let MdtConnectedMessage = require('./MdtConnectedMessage.js');
let list = require('@gehtsoft/LuaxStdlib-node').list;
let StringValueObject = require('./StringValueObject.js');
class SubscriptionsMdtRecover {
    logger;
    internalOffersProvider;
    instrumentsProvider;
    messageRouter;
    constructor() {
        this.logger = LogManager.getLogger();
    }
    static create(internalOffersProvider, instrumentsProvider, messageRouter) {
        let instance;
        instance = new SubscriptionsMdtRecover();
        instance.internalOffersProvider = internalOffersProvider;
        instance.instrumentsProvider = instrumentsProvider;
        instance.messageRouter = messageRouter;
        return instance;
    }
    checkAndRecover(subscribedSymbolsCheckSum, numberOfSubscribedSymbols, streams, terminalId) {
        let offerIds, calculatedCheckSum, length, b;
        if (this.internalOffersProvider.getState().isLoaded()) {
            offerIds = this.getIdsOfSubscribedOffers(streams);
            if (numberOfSubscribedSymbols != offerIds.length) {
                this.logger.warning("Test request for '" + terminalId + "' returns " + (numberOfSubscribedSymbols).toString() + " subscribed symbols, but expected " + (offerIds.length).toString() + ". Re-subscription will be done.");
                this.publishResubscriptionMessage(streams);
                return false;
            }
            calculatedCheckSum = SubscriptionsMdtRecover.arrayToString(StringUtil.sortAsIntegersAsc(offerIds));
            if (stdlib.len(calculatedCheckSum) > 0) {
                length = buffer.getEncodedStringLength(calculatedCheckSum, io.CP_ANSI);
                b = buffer.create(length);
                b.setEncodedString(0, calculatedCheckSum, io.CP_ANSI);
                calculatedCheckSum = cryptography.MD5(b).toBase64();
            }
            if (subscribedSymbolsCheckSum != calculatedCheckSum) {
                this.logger.warning("Test request for '" + terminalId + "' returns '" + subscribedSymbolsCheckSum + "' check-sum, but expected '" + calculatedCheckSum + "'. Re-subscription will be done.");
                this.publishResubscriptionMessage(streams);
                return false;
            }
        }
        return true;
    }
    publishResubscriptionMessage(streams) {
        this.messageRouter.publishNewMessage([MdtConnectedMessage.create(streams, true)]);
    }
    getIdsOfSubscribedOffers(streams) {
        let instrumentDescriptors, instrumentDescriptor, offerIds, offerIdsList, i, j;
        offerIdsList = new list();
        instrumentDescriptors = this.instrumentsProvider.getAllInstrumentDescriptors();
        for (i = 0; i <= instrumentDescriptors.length - 1; i += 1) {
            instrumentDescriptor = instrumentDescriptors[i];
            for (j = 0; j <= streams.length - 1; j += 1) {
                if (instrumentDescriptor.getPriceStreamId() == streams[j]) {
                    if (instrumentDescriptor.getSubscriptionStatus() == "T" || instrumentDescriptor.getSubscriptionStatus() == "V") {
                        offerIdsList.add(StringValueObject.create(instrumentDescriptor.getOfferId()));
                    }
                    break;
                }
            }
        }
        offerIds = new Array(offerIdsList.length());
        for (i = 0; i <= offerIdsList.length() - 1; i += 1) {
            offerIds[i] = offerIdsList.get(i).get();
        }
        return offerIds;
    }
    static arrayToString(strArray) {
        let i, stringList;
        stringList = "";
        for (i = 0; i <= strArray.length - 1; i += 1) {
            if (i != 0) {
                stringList = stringList + ",";
            }
            stringList = stringList + strArray[i];
        }
        return stringList;
    }
}
module.exports = SubscriptionsMdtRecover
