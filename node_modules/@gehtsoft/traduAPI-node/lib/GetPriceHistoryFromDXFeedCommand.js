'use strict';
let LogManager = require('./LogManager.js');
let DXFeedTimeSeriesToPriceHistoryResponseConvertor = require('./DXFeedTimeSeriesToPriceHistoryResponseConvertor.js');
class GetPriceHistoryFromDXFeedCommand {
    request;
    callback;
    priceHistoryMediator;
    logger;
    dxFeedNamesProvider;
    identity;
    constructor() {
        this.request = null;
        this.callback = null;
        this.priceHistoryMediator = null;
        this.identity = null;
        this.logger = LogManager.getLogger();
    }
    stop() {
        if (this.priceHistoryMediator != null && this.identity != null) {
            this.priceHistoryMediator.stopCommand(this.identity);
        }
    }
    execute() {
        let dXFeedPriceHistoryMediatorCallback, dxFeedSymbol;
        dXFeedPriceHistoryMediatorCallback = new GetPriceHistoryFromDXFeedCommand.DXFeedPriceHistoryMediatorCallback(this);
        dxFeedSymbol = this.dxFeedNamesProvider.getSymbolForDxFeed(this.request.getInstrument());
        this.identity = this.priceHistoryMediator.getPrices(dxFeedSymbol, this.request.getTimeframe(), this.request.getFrom(), this.request.getTo(), this.request.getQuotesCount(), dXFeedPriceHistoryMediatorCallback);
    }
    subscribeStatusChange(callback) {
        return void(0);
    }
    unsubscribeStatusChange(callback) {
        return void(0);
    }
}
module.exports = GetPriceHistoryFromDXFeedCommand
GetPriceHistoryFromDXFeedCommand.DXFeedPriceHistoryMediatorCallback = class {
    convertor;
    _owner_;
    constructor(_owner_) {
        this._owner_ = _owner_;
        this.convertor = new DXFeedTimeSeriesToPriceHistoryResponseConvertor();
    }
    onSuccess(symbol, series) {
        let priceHistoryResponseBuilder;
        priceHistoryResponseBuilder = this.convertor.convert(series, this._owner_.request.getBidAdjustment(), this._owner_.request.getAskAdjustment());
        priceHistoryResponseBuilder.setInstrument(this._owner_.request.getInstrument());
        priceHistoryResponseBuilder.setTimeframe(this._owner_.request.getTimeframe());
        this._owner_.callback.onSuccess(priceHistoryResponseBuilder.build());
    }
    onError(symbol, error) {
        this._owner_.callback.onError(error);
    }
    onAllComplete() {
        return void(0);
    }
}
