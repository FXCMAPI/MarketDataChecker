'use strict';
let stdlib = require('@gehtsoft/LuaxStdlib-node').stdlib;
let MarginRequirementsBuilder = require('./MarginRequirementsBuilder.js');
let Instrument = require('./Instrument.js');
//@@DocBrief("The class for getting margin requirements data.")
class MarginProvider {
    static get DOUBLE_EPSILON() { return 1E-11; }
    leverageProfilesManager;
    constructor() {
        this.leverageProfilesManager = null;
    }
    static create(leverageProfilesManager) {
        let marginProvider;
        marginProvider = new MarginProvider();
        marginProvider.leverageProfilesManager = leverageProfilesManager;
        return marginProvider;
    }
    subscribeStateChange(listener) {
        this.leverageProfilesManager.subscribeStateChange(listener);
    }
    unsubscribeStateChange(listener) {
        this.leverageProfilesManager.subscribeStateChange(listener);
    }
    getState() {
        return this.leverageProfilesManager.getState();
    }
    isThreeTier(account) {
        let result, descriptors, i, marginAware, marginEntry, usedMargin, usedMarginProvider, marginDescriptor;
        result = false;
        if (account == null) {
            return result;
        }
        usedMarginProvider = this.leverageProfilesManager.getUsedMarginProvider();
        descriptors = usedMarginProvider.find(account.getAccountId(), account.getLeverageProfileId());
        if (descriptors == null) {
            return result;
        }
        if (descriptors.length == 0) {
            return result;
        }
        for (i = 0; i <= descriptors.length - 1; i += 1) {
            marginDescriptor = descriptors[i];
            marginAware = marginDescriptor.getUsedMarginAware();
            marginEntry = marginDescriptor.getUsedMarginEntry();
            usedMargin = marginDescriptor.getUsedMargin();
            if (marginDescriptor.getMarginType() == "P") {
                marginAware = marginDescriptor.getMarginAwareCoeff();
                marginEntry = marginDescriptor.getMarginEntryCoeff();
                usedMargin = marginDescriptor.getMarginCoeff();
            }
            if (!(stdlib.abs(marginAware - marginEntry) < MarginProvider.DOUBLE_EPSILON && stdlib.abs(marginEntry - usedMargin) < MarginProvider.DOUBLE_EPSILON)) {
                result = true;
                break;
            }
        }
        return result;
    }
    getMargins(instrument, account) {
        let mmr, lmr, emr, marginDescriptor, marginRequirements, accountBaseUnitSize, baseUnitSize, marginAware, marginEntry, usedMargin, instrumentMmr;
        marginRequirements = new MarginRequirementsBuilder();
        if (instrument == null || account == null) {
            return null;
        }
        marginDescriptor = this.leverageProfilesManager.getUsedMarginProvider().get(account.getAccountId(), account.getLeverageProfileId(), instrument.getOfferId());
        if (marginDescriptor == null) {
            return null;
        }
        accountBaseUnitSize = account.getBaseUnitSize();
        baseUnitSize = instrument.getBaseUnitSize();
        if (instrument.getInstrumentType() == Instrument.TYPE_FOREX) {
            if (accountBaseUnitSize > baseUnitSize) {
                baseUnitSize = accountBaseUnitSize;
            }
        }
        marginAware = marginDescriptor.getUsedMarginAware();
        marginEntry = marginDescriptor.getUsedMarginEntry();
        usedMargin = marginDescriptor.getUsedMargin();
        if (marginDescriptor.getMarginType() == "P") {
            instrumentMmr = instrument.getMMRByCurrency(account.getBaseCurrency());
            marginAware = instrumentMmr * marginDescriptor.getMarginAwareCoeff();
            marginEntry = instrumentMmr * marginDescriptor.getMarginEntryCoeff();
            usedMargin = instrumentMmr * marginDescriptor.getMarginCoeff();
        }
        if (stdlib.abs(marginAware - marginEntry) < MarginProvider.DOUBLE_EPSILON && stdlib.abs(marginEntry - usedMargin) < MarginProvider.DOUBLE_EPSILON) {
            mmr = usedMargin * baseUnitSize;
            emr = mmr;
            lmr = mmr;
        }
        else {
            mmr = marginAware * baseUnitSize;
            emr = marginEntry * baseUnitSize;
            lmr = usedMargin * baseUnitSize;
        }
        marginRequirements.setMMR(mmr);
        marginRequirements.setLMR(lmr);
        marginRequirements.setEMR(emr);
        return marginRequirements.build();
    }
    getMMR(instrument, account) {
        let marginDescriptor;
        if (instrument == null || account == null) {
            return -1;
        }
        marginDescriptor = this.leverageProfilesManager.getUsedMarginProvider().get(account.getAccountId(), account.getLeverageProfileId(), instrument.getOfferId());
        if (marginDescriptor == null) {
            return -1;
        }
        return this.calculateMMR(marginDescriptor, instrument, account);
    }
    calculateMMR(marginDescriptor, instrument, account) {
        let unitMMR, accountBaseUnitSize, baseUnitSize, instrumentMmr;
        if (this.isThreeTier(account)) {
            if (marginDescriptor.getMarginType() == "P") {
                instrumentMmr = instrument.getMMRByCurrency(account.getBaseCurrency());
                unitMMR = instrumentMmr * marginDescriptor.getMarginEntryCoeff();
            }
            else {
                unitMMR = marginDescriptor.getUsedMarginEntry();
            }
        }
        else {
            if (marginDescriptor.getMarginType() == "P") {
                instrumentMmr = instrument.getMMRByCurrency(account.getBaseCurrency());
                unitMMR = instrumentMmr * marginDescriptor.getMarginCoeff();
            }
            else {
                unitMMR = marginDescriptor.getUsedMargin();
            }
        }
        accountBaseUnitSize = account.getBaseUnitSize();
        baseUnitSize = instrument.getBaseUnitSize();
        if (instrument.getInstrumentType() == Instrument.TYPE_FOREX) {
            if (accountBaseUnitSize > baseUnitSize) {
                baseUnitSize = accountBaseUnitSize;
            }
        }
        return unitMMR * baseUnitSize;
    }
}
module.exports = MarginProvider
