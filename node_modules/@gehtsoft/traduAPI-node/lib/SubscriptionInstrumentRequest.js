'use strict';
let CollectionUtils = require('./CollectionUtils.js');
let list = require('@gehtsoft/LuaxStdlib-node').list;
let StringValueObject = require('./StringValueObject.js');
class SubscriptionInstrumentRequest {
    requestNumber;
    messageType;
    offerIds;
    offerIdsWaiting;
    priceFeedCommandCallback;
    setProcessed(offerId) {
        let found, i, value;
        found = -1;
        for (i = 0; i <= this.offerIdsWaiting.length() - 1; i += 1) {
            value = this.offerIdsWaiting.get(i).get();
            if (value == offerId) {
                found = i;
                break;
            }
        }
        if (found >= 0) {
            this.offerIdsWaiting.remove(found);
        }
    }
    clearWaiting() {
        this.offerIdsWaiting.clear();
    }
    getMessageType() {
        return this.messageType;
    }
    getOfferIds() {
        return this.offerIds;
    }
    getOfferIdsWaiting() {
        return CollectionUtils.stringListToArray(this.offerIdsWaiting);
    }
    getRequestNumber() {
        return this.requestNumber;
    }
    isCompleted() {
        return this.offerIdsWaiting.length() == 0;
    }
    getPriceFeedCommandCallback() {
        return this.priceFeedCommandCallback;
    }
    static createPriceFeed(requestNumber, messageType, offerIds, priceFeedCommandCallback) {
        let result;
        result = SubscriptionInstrumentRequest.create(requestNumber, messageType, offerIds);
        result.priceFeedCommandCallback = priceFeedCommandCallback;
        return result;
    }
    static create(requestNumber, messageType, offerIds) {
        let result, i;
        result = new SubscriptionInstrumentRequest();
        result.requestNumber = requestNumber;
        result.messageType = messageType;
        result.offerIds = offerIds;
        result.offerIdsWaiting = new list();
        for (i = 0; i <= result.offerIds.length - 1; i += 1) {
            result.offerIdsWaiting.add(StringValueObject.create(result.offerIds[i]));
        }
        return result;
    }
}
module.exports = SubscriptionInstrumentRequest
