'use strict';
let LogManager = require('./LogManager.js');
let exception = require('@gehtsoft/LuaxStdlib-node').exception;
let FXConnectLiteErrorCodes = require('./FXConnectLiteErrorCodes.js');
let OpenPositionCalculatedFieldsBuilder = require('./OpenPositionCalculatedFieldsBuilder.js');
let stdlib = require('@gehtsoft/LuaxStdlib-node').stdlib;
class OpenPositionCalculator {
    internalOffersProvider;
    instrumentsProvider;
    openPositionMarginCalculator;
    ordersProvider;
    commissionsProvider;
    unitCostCalculator;
    rawAccountsProvider;
    static create(instrumentsProvider, internalOffersProvider, openPositionMarginCalculator, ordersProvider, commissionsProvider, unitCostCalculator, rawAccountsProvider) {
        let result;
        if (instrumentsProvider == null) {
            LogManager.getLogger().error("OpenPositionCalculator.create(): instrumentsProvider is not set");
            throw exception.create(FXConnectLiteErrorCodes.CODE_REQUIRED_PARAMETER_NOT_SET, "instrumentsProvider is not set");
        }
        if (internalOffersProvider == null) {
            LogManager.getLogger().error("OpenPositionCalculator.create(): internalOffersProvider is not set");
            throw exception.create(FXConnectLiteErrorCodes.CODE_REQUIRED_PARAMETER_NOT_SET, "internalOffersProvider is not set");
        }
        if (openPositionMarginCalculator == null) {
            LogManager.getLogger().error("OpenPositionCalculator.create(): openPositionMarginCalculator is not set");
            throw exception.create(FXConnectLiteErrorCodes.CODE_REQUIRED_PARAMETER_NOT_SET, "openPositionMarginCalculator is not set");
        }
        if (ordersProvider == null) {
            LogManager.getLogger().error("OpenPositionCalculator.create(): ordersProvider is not set");
            throw exception.create(FXConnectLiteErrorCodes.CODE_REQUIRED_PARAMETER_NOT_SET, "ordersProvider is not set");
        }
        if (commissionsProvider == null) {
            LogManager.getLogger().error("OpenPositionCalculator.create(): commissionsProvider is not set");
            throw exception.create(FXConnectLiteErrorCodes.CODE_REQUIRED_PARAMETER_NOT_SET, "commissionsProvider is not set");
        }
        if (unitCostCalculator == null) {
            LogManager.getLogger().error("OpenPositionCalculator.create(): unitCostCalculator is not set");
            throw exception.create(FXConnectLiteErrorCodes.CODE_REQUIRED_PARAMETER_NOT_SET, "unitCostCalculator is not set");
        }
        if (rawAccountsProvider == null) {
            LogManager.getLogger().error("OpenPositionCalculator.create(): rawAccountsProvider is not set");
            throw exception.create(FXConnectLiteErrorCodes.CODE_REQUIRED_PARAMETER_NOT_SET, "rawAccountsProvider is not set");
        }
        result = new OpenPositionCalculator();
        result.instrumentsProvider = instrumentsProvider;
        result.internalOffersProvider = internalOffersProvider;
        result.openPositionMarginCalculator = openPositionMarginCalculator;
        result.ordersProvider = ordersProvider;
        result.commissionsProvider = commissionsProvider;
        result.unitCostCalculator = unitCostCalculator;
        result.rawAccountsProvider = rawAccountsProvider;
        return result;
    }
    calculatePublicFields(openPosition) {
        let builder, offersBidAskCalculated, offer, bid, ask, instrument, pointSize, orders, order, i;
        if (openPosition == null) {
            LogManager.getLogger().error("OpenPositionCalculator.calculatePublicFields(): openPosition is not set");
            throw exception.create(FXConnectLiteErrorCodes.CODE_REQUIRED_PARAMETER_NOT_SET, "openPosition is not set");
        }
        pointSize = 0.0;
        builder = new OpenPositionCalculatedFieldsBuilder();
        offer = this.internalOffersProvider.getInternalOfferById(openPosition.getOfferId());
        offersBidAskCalculated = this.internalOffersProvider.calculateBidAsk(offer);
        bid = offersBidAskCalculated.getBid();
        ask = offersBidAskCalculated.getAsk();
        if (openPosition.getBuySell() == "B") {
            builder.setCloseRate(offersBidAskCalculated.getBid());
        }
        else {
            builder.setCloseRate(offersBidAskCalculated.getAsk());
        }
        instrument = this.instrumentsProvider.getInstrumentByOfferId(openPosition.getOfferId());
        if (instrument != null) {
            pointSize = instrument.getPointSize();
        }
        builder.setPLPips(this.calculatePLPips(openPosition, bid, ask, pointSize));
        builder.setPL(this.calculatePL(openPosition, bid, ask, pointSize));
        builder.setGrossPL(this.calculateGrossPL(openPosition, instrument, offer, builder.getCloseRate()));
        builder.setNetPL(this.calculateNetPL(openPosition, builder.getGrossPL()));
        orders = this.ordersProvider.getRawOrdersForTrade(openPosition.getTradeID());
        for (i = 0; i <= orders.length - 1; i += 1) {
            order = orders[i];
            if ("L" == order.getType()) {
                builder.setLimitOrderId(order.getOrderId());
                builder.setLimitRate(order.getRate());
            }
            if ("S" == order.getType()) {
                builder.setStopOrderId(order.getOrderId());
                builder.setStopRate(order.getRate());
            }
            if ("ST" == order.getType()) {
                order = this.ordersProvider.getCalculatedOrderById(order.getOrderId());
                builder.setStopOrderId(order.getOrderId());
                builder.setStopRate(order.getRate());
                builder.setStopMove(order.getStopMove());
            }
        }
        return builder.build();
    }
    calculateNetPL(openPosition, grossPL) {
        if (openPosition == null) {
            LogManager.getLogger().error("OpenPositionCalculator.calculateNetPL(): openPosition is not set");
            throw exception.create(FXConnectLiteErrorCodes.CODE_REQUIRED_PARAMETER_NOT_SET, "openPosition is not set");
        }
        return grossPL + openPosition.getDividends() - (openPosition.getCommission() + this.commissionsProvider.getCloseCommission(openPosition)) + openPosition.getRolloverInterest();
    }
    calculateMarginFields(openPosition) {
        if (openPosition == null) {
            LogManager.getLogger().error("OpenPositionCalculator.calculateMarginFields(): openPosition is not set");
            throw exception.create(FXConnectLiteErrorCodes.CODE_REQUIRED_PARAMETER_NOT_SET, "openPosition is not set");
        }
        return this.openPositionMarginCalculator.calculate(openPosition);
    }
    calculateMarginFieldsForAll(openPositions) {
        if (openPositions == null) {
            LogManager.getLogger().error("OpenPositionCalculator.calculateMarginFieldsForAll(): openPositions are not set");
            throw exception.create(FXConnectLiteErrorCodes.CODE_REQUIRED_PARAMETER_NOT_SET, "openPositions are not set");
        }
        return this.openPositionMarginCalculator.calculateAll(openPositions);
    }
    calculatePLPips(openPosition, bid, ask, pointSize) {
        let plPips;
        if (openPosition.getBuySell() == "B") {
            if (pointSize != 0.0) {
                plPips = (bid - openPosition.getOpenRate()) / pointSize;
            }
            else {
                plPips = 0.0;
            }
        }
        else {
            if (pointSize != 0.0) {
                plPips = (openPosition.getOpenRate() - ask) / pointSize;
            }
            else {
                plPips = 0.0;
            }
        }
        return plPips;
    }
    calculatePL(openPosition, bid, ask, pointSize) {
        let pl;
        if (openPosition.getBuySell() == "B") {
            if (pointSize != 0.0) {
                pl = bid - openPosition.getOpenRate();
            }
            else {
                pl = 0.0;
            }
        }
        else {
            if (pointSize != 0.0) {
                pl = openPosition.getOpenRate() - ask;
            }
            else {
                pl = 0.0;
            }
        }
        return pl;
    }
    calculateGrossPL(openPosition, instrument, offer, closeRate) {
        let account, diffCost, diff;
        if (offer == null || instrument == null) {
            return 0.0;
        }
        account = this.rawAccountsProvider.getAccountById(openPosition.getAccountId());
        if (openPosition.getBuySell() == "B") {
            diff = closeRate - openPosition.getOpenRate();
        }
        else {
            diff = openPosition.getOpenRate() - closeRate;
        }
        diffCost = diff * this.unitCostCalculator.calculate(account.getAccountId(), account.getLeverageProfileId(), openPosition.getOfferId(), closeRate);
        return stdlib.roundInl(diffCost * openPosition.getAmount() * instrument.getContractMultiplier(), account.getBaseCurrencyPrecision());
    }
}
module.exports = OpenPositionCalculator
