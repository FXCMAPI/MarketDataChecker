'use strict';
let AFxmsgReader = require('./AFxmsgReader.js');
let csvParser = require('@gehtsoft/LuaxStdlib-node').csvParser;
let OpenPositionCsvParser = require('./OpenPositionCsvParser.js');
let PdasMessageFieldTag = require('./PdasMessageFieldTag.js');
let GetOpenPositionsMessageBuilder = require('./GetOpenPositionsMessageBuilder.js');
let PdasMessageType = require('./PdasMessageType.js');
let PdasRequestCommand = require('./PdasRequestCommand.js');
let OpenPositionsList = require('./OpenPositionsList.js');
class GetOpenPositionsFxmsgReader extends AFxmsgReader {
    linesParser;
    openPositionCsvParser;
    constructor() {
        super();
        this.linesParser = new csvParser();
        this.linesParser.valueSeparator = "\n";
        this.openPositionCsvParser = new OpenPositionCsvParser();
    }
    read(responseList, xmlRootNode, messages) {
        let data, acctID, i, getOpenPositionsMessageBuilder;
        if (messages == null || messages.length == 0) {
            return;
        }
        for (i = 0; i <= messages.length - 1; i += 1) {
            if (messages[i].getType() == PdasMessageType.FXCM_RESPONSE && messages[i].getFieldValue(PdasMessageFieldTag.FXCM_COMMAND_ID) == PdasRequestCommand.GET_OPEN_POSITIONS) {
                data = messages[i].getList(PdasMessageFieldTag.FXCM_NO_PARAM).getGroupParamValueByParamName("DAS");
                acctID = messages[i].getList(PdasMessageFieldTag.FXCM_NO_PARAM).getGroupParamValueByParamName("AcctID");
                if (data != null && acctID != null) {
                    getOpenPositionsMessageBuilder = new GetOpenPositionsMessageBuilder();
                    getOpenPositionsMessageBuilder.addOpenPositions(this.parseOpenPositions(data));
                    getOpenPositionsMessageBuilder.setAccountId(acctID);
                    responseList.add(this.createLockedMessage(getOpenPositionsMessageBuilder.build()));
                }
            }
        }
    }
    parseOpenPositions(data) {
        let lines, i, openPositionsList, openPosition;
        openPositionsList = new OpenPositionsList();
        lines = this.linesParser.splitLine(data);
        for (i = 0; i <= lines.length - 1; i += 1) {
            openPosition = this.openPositionCsvParser.parse(lines[i]);
            if (openPosition != null) {
                openPositionsList.add(openPosition);
            }
        }
        return openPositionsList;
    }
}
module.exports = GetOpenPositionsFxmsgReader
