'use strict';
let CommandEnvironmentBuilder = require('./CommandEnvironmentBuilder.js');
let GetTradingTerminalsCommandBuilder = require('./GetTradingTerminalsCommandBuilder.js');
let GetTemporarySessionCommandBuilder = require('./GetTemporarySessionCommandBuilder.js');
let GetTradingSessionCommandBuilder = require('./GetTradingSessionCommandBuilder.js');
let GetAccountsCommandBuilder = require('./GetAccountsCommandBuilder.js');
let GetSystemPropertiesCommandBuilder = require('./GetSystemPropertiesCommandBuilder.js');
let GetInstrumentDescriptorsCommandBuilder = require('./GetInstrumentDescriptorsCommandBuilder.js');
let GetAllInstrumentsCommandBuilder = require('./GetAllInstrumentsCommandBuilder.js');
let GetAllOffersCommandBuilder = require('./GetAllOffersCommandBuilder.js');
let LogoutCommandBuilder = require('./LogoutCommandBuilder.js');
let KeepAliveCommandBuilder = require('./KeepAliveCommandBuilder.js');
let KeepAlivePriceSessionCommandBuilder = require('./KeepAlivePriceSessionCommandBuilder.js');
let RakeOutCommandBuilder = require('./RakeOutCommandBuilder.js');
let GetTemporaryPriceSessionCommandBuilder = require('./GetTemporaryPriceSessionCommandBuilder.js');
let GetTemporaryPriceSessionBySsoTokenCommandBuilder = require('./GetTemporaryPriceSessionBySsoTokenCommandBuilder.js');
let GetTemporarySessionBySsoTokenCommandBuilder = require('./GetTemporarySessionBySsoTokenCommandBuilder.js');
let GetPriceSessionCommandBuilder = require('./GetPriceSessionCommandBuilder.js');
let RakeOutPricesCommandBuilder = require('./RakeOutPricesCommandBuilder.js');
let InstrumentSubscribingCommandBuilder = require('./InstrumentSubscribingCommandBuilder.js');
let GetOpenPositionsByAcctCommandBuilder = require('./GetOpenPositionsByAcctCommandBuilder.js');
let GetLeverageProfileByAcctCommandBuilder = require('./GetLeverageProfileByAcctCommandBuilder.js');
let GetClosedPositionsCommandBuilder = require('./GetClosedPositionsCommandBuilder.js');
let SendTrueMarketOrderCommandBuilder = require('./SendTrueMarketOrderCommandBuilder.js');
let GetPriceHistoryCommandBuilder = require('./GetPriceHistoryCommandBuilder.js');
let SendCloseMarketOrderCommandBuilder = require('./SendCloseMarketOrderCommandBuilder.js');
let SendEntryOrderCommandBuilder = require('./SendEntryOrderCommandBuilder.js');
let SendOcoOrderCommandBuilder = require('./SendOcoOrderCommandBuilder.js');
let GetAccountRolloverProfilesCommandBuilder = require('./GetAccountRolloverProfilesCommandBuilder.js');
let GetAccountCommissionsCommandBuilder = require('./GetAccountCommissionsCommandBuilder.js');
let GetOrdersCommandBuilder = require('./GetOrdersCommandBuilder.js');
let RemoveOrderCommandBuilder = require('./RemoveOrderCommandBuilder.js');
let ChangeOrderCommandBuilder = require('./ChangeOrderCommandBuilder.js');
let SendStopOrderForTradeCommandBuilder = require('./SendStopOrderForTradeCommandBuilder.js');
let SendLimitOrderForTradeCommandBuilder = require('./SendLimitOrderForTradeCommandBuilder.js');
let SendStopOrderForOrderCommandBuilder = require('./SendStopOrderForOrderCommandBuilder.js');
let SendLimitOrderForOrderCommandBuilder = require('./SendLimitOrderForOrderCommandBuilder.js');
let GetSsoTokenCommandBuilder = require('./GetSsoTokenCommandBuilder.js');
let DxFeedConnectCommandBuilder = require('./DxFeedConnectCommandBuilder.js');
let LoginInMultiPriceTerminalsCommand = require('./LoginInMultiPriceTerminalsCommand.js');
let PriceFeedCommandBuilder = require('./PriceFeedCommandBuilder.js');
let PriceFeedBatchCommandBuilder = require('./PriceFeedBatchCommandBuilder.js');
let OfferSnapshotCommandBuilder = require('./OfferSnapshotCommandBuilder.js');
let GetPriceHistoryCommonCommand = require('./GetPriceHistoryCommonCommand.js');
let GetPriceHistoryFromPdasCommand = require('./GetPriceHistoryFromPdasCommand.js');
let GetPriceHistoryFromDXFeedCommandBuilder = require('./GetPriceHistoryFromDXFeedCommandBuilder.js');
let LoginByJWTCommand = require('./LoginByJWTCommand.js');
let GetTerminalsBySpecifiedCW = require('./GetTerminalsBySpecifiedCW.js');
let LoginByJWTUsingSSOCommand = require('./LoginByJWTUsingSSOCommand.js');
let SendCloseAllPositionsCommandBuilder = require('./SendCloseAllPositionsCommandBuilder.js');
let GetSsoTokenProcessor = require('./GetSsoTokenProcessor.js');
let TradingSessionProvider = require('./TradingSessionProvider.js');
let SendClientMessageCommandBuilder = require('./SendClientMessageCommandBuilder.js');
let TestRequestMdtCommandBuilder = require('./TestRequestMdtCommandBuilder.js');
let TestRequestPdsCommandBuilder = require('./TestRequestPdsCommandBuilder.js');
//@@DocBrief("The factory for generating commands")
class CommandFactory {
    messageRouter;
    requestNumberGenerator;
    connectionParameters;
    sessionStorage;
    pdasMessageExecutor;
    httpCommunicator;
    pdasMessageFactory;
    timeController;
    dxfeedPriceHistoryMediatorFactory;
    commandEnvironment;
    dxFeedNamesProvider;
    systemSettingsProvider;
    static create(messageRouter, requestNumberGenerator, connectionParameters, sessionStorage, pdasMessageExecutor, pdasMessageFactory, timeController, dxfeedPriceHistoryMediatorFactory, dxFeedNamesProvider) {
        let result;
        result = new CommandFactory();
        result.messageRouter = messageRouter;
        result.requestNumberGenerator = requestNumberGenerator;
        result.connectionParameters = connectionParameters;
        result.sessionStorage = sessionStorage;
        result.pdasMessageExecutor = pdasMessageExecutor;
        result.pdasMessageFactory = pdasMessageFactory;
        result.timeController = timeController;
        result.dxfeedPriceHistoryMediatorFactory = dxfeedPriceHistoryMediatorFactory;
        result.dxFeedNamesProvider = dxFeedNamesProvider;
        result.systemSettingsProvider = null;
        result.commandEnvironment = new CommandEnvironmentBuilder();
        result.commandEnvironment.setMessageRouter(messageRouter);
        result.commandEnvironment.setMessageExecutor(pdasMessageExecutor);
        result.commandEnvironment.setConnectionParameters(connectionParameters);
        result.commandEnvironment.setMessageFactory(pdasMessageFactory);
        result.commandEnvironment.setRequestNumberGenerator(requestNumberGenerator);
        return result;
    }
    setSystemSettingsProvider(systemSettingsProvider) {
        this.systemSettingsProvider = systemSettingsProvider;
    }
    setHttpCommunicator(httpCommunicator) {
        this.httpCommunicator = httpCommunicator;
    }
    createGetTradingTerminalsCommand(loginCurrent, tradingSystemUrl, connection, hostsReceiver, ssoToken, ssoTokenProvider) {
        let builder;
        builder = new GetTradingTerminalsCommandBuilder();
        builder.setLogin(loginCurrent);
        builder.setUrl(tradingSystemUrl);
        builder.setConnection(connection);
        builder.setHostsReceiver(hostsReceiver);
        builder.setSsoToken(ssoToken);
        builder.setSsoTokenProvider(ssoTokenProvider);
        return builder.build();
    }
    createGetTemporarySessionCommand(commandEnvironment, saltedPassword, loginCurrent) {
        let builder;
        builder = new GetTemporarySessionCommandBuilder();
        builder.setMessageRouter(commandEnvironment.getMessageRouter());
        builder.setMessageExecutor(commandEnvironment.getMessageExecutor());
        builder.setApplicationName(commandEnvironment.getConnectionParameters().getApplicationName());
        builder.setAgent(commandEnvironment.getConnectionParameters().getAgent());
        builder.setMessageFactory(commandEnvironment.getMessageFactory());
        builder.setTerminal(commandEnvironment.getTradingTerminal());
        builder.setRequestNumberGenerator(commandEnvironment.getRequestNumberGenerator());
        builder.setConfigFlags(commandEnvironment.getConfigFlags());
        builder.setSaltedPassword(saltedPassword);
        builder.setLogin(loginCurrent);
        return builder.build();
    }
    createGetTradingSessionCommand(commandEnvironment, login, temporarySession, periodInMilliseconds, timeoutInSeconds) {
        let builder;
        builder = new GetTradingSessionCommandBuilder();
        builder.setPeriodInMilliseconds(periodInMilliseconds);
        builder.setTimeoutInSeconds(timeoutInSeconds);
        builder.setMessageRouter(commandEnvironment.getMessageRouter());
        builder.setMessageExecutor(commandEnvironment.getMessageExecutor());
        builder.setApplicationName(commandEnvironment.getConnectionParameters().getApplicationName());
        builder.setMessageFactory(commandEnvironment.getMessageFactory());
        builder.setTerminal(commandEnvironment.getTradingTerminal());
        builder.setRequestNumberGenerator(commandEnvironment.getRequestNumberGenerator());
        builder.setTemporarySession(temporarySession);
        builder.setLogin(login);
        return builder.build();
    }
    createGetAccountsCommand(messageExecutor, tradingSession, messageFactory, requestNumberGenerator) {
        let builder;
        builder = new GetAccountsCommandBuilder();
        builder.setMessageExecutor(messageExecutor);
        builder.setMessageFactory(messageFactory);
        builder.setRequestNumberGenerator(requestNumberGenerator);
        builder.setTradingSession(tradingSession);
        return builder.build();
    }
    createGetSystemPropertiesCommand(messageExecutor, tradingSession, messageFactory, requestNumberGenerator) {
        let builder;
        builder = new GetSystemPropertiesCommandBuilder();
        builder.setMessageExecutor(messageExecutor);
        builder.setMessageFactory(messageFactory);
        builder.setRequestNumberGenerator(requestNumberGenerator);
        builder.setTradingSession(tradingSession);
        return builder.build();
    }
    createGetInstrumentDescriptorsCommand(messageExecutor, tradingSession, messageFactory, requestNumberGenerator) {
        let builder;
        builder = new GetInstrumentDescriptorsCommandBuilder();
        builder.setMessageExecutor(messageExecutor);
        builder.setMessageFactory(messageFactory);
        builder.setRequestNumberGenerator(requestNumberGenerator);
        builder.setTradingSession(tradingSession);
        return builder.build();
    }
    createGetAllInstrumentsCommand(offerIds, messageExecutor, tradingSession, messageFactory, requestNumber) {
        let builder;
        builder = new GetAllInstrumentsCommandBuilder();
        builder.setOfferIds(offerIds);
        builder.setMessageExecutor(messageExecutor);
        builder.setMessageFactory(messageFactory);
        builder.setRequestNumber(requestNumber);
        builder.setTradingSession(tradingSession);
        return builder.build();
    }
    createGetAllOffersCommand(offerIds, messageExecutor, tradingSession, messageFactory, requestNumber) {
        let builder;
        builder = new GetAllOffersCommandBuilder();
        builder.setOfferIds(offerIds);
        builder.setMessageExecutor(messageExecutor);
        builder.setTradingSession(tradingSession);
        builder.setMessageFactory(messageFactory);
        builder.setRequestNumber(requestNumber);
        return builder.build();
    }
    createLogoutCommand(tradingSession, messageExecutor, messageFactory, requestNumberGenerator) {
        let builder;
        builder = new LogoutCommandBuilder();
        builder.setMessageFactory(messageFactory);
        builder.setRequestNumberGenerator(requestNumberGenerator);
        builder.setMessageExecutor(messageExecutor);
        builder.setTradingSession(tradingSession);
        return builder.build();
    }
    createKeepAliveCommand(periodInMilliseconds, connectionParameters, messageRouter, messageExecutor, messageFactory, requestNumberGenerator) {
        let builder;
        builder = new KeepAliveCommandBuilder();
        builder.setPeriodInMilliseconds(periodInMilliseconds);
        builder.setMessageFactory(messageFactory);
        builder.setRequestNumberGenerator(requestNumberGenerator);
        builder.setMessageExecutor(messageExecutor);
        builder.setMessageRouter(messageRouter);
        builder.setConnectionParameters(connectionParameters);
        return builder.build();
    }
    createKeepAlivePricesCommand(periodInMilliseconds, connectionParameters, messageRouter, messageExecutor, messageFactory, requestNumberGenerator, priceTerminal) {
        let builder;
        builder = new KeepAlivePriceSessionCommandBuilder();
        builder.setPeriodInMilliseconds(periodInMilliseconds);
        builder.setMessageFactory(messageFactory);
        builder.setRequestNumberGenerator(requestNumberGenerator);
        builder.setMessageExecutor(messageExecutor);
        builder.setMessageRouter(messageRouter);
        builder.setConnectionParameters(connectionParameters);
        builder.setPriceTerminal(priceTerminal);
        return builder.build();
    }
    createRakeOutCommand(periodInMilliseconds, connectionParameters, messageRouter, messageExecutor, messageFactory, requestNumberGenerator) {
        let builder;
        builder = new RakeOutCommandBuilder();
        builder.setPeriodInMilliseconds(periodInMilliseconds);
        builder.setMessageExecutor(messageExecutor);
        builder.setMessageFactory(messageFactory);
        builder.setRequestNumberGenerator(requestNumberGenerator);
        builder.setMessageRouter(messageRouter);
        builder.setConnectionParameters(connectionParameters);
        return builder.build();
    }
    createGetTemporaryPriceSessionCommand(commandEnvironment, tradingSession, saltedPassword, loginCurrent) {
        let builder;
        builder = new GetTemporaryPriceSessionCommandBuilder();
        builder.setMessageRouter(commandEnvironment.getMessageRouter());
        builder.setMessageExecutor(commandEnvironment.getMessageExecutor());
        builder.setApplicationName(commandEnvironment.getConnectionParameters().getApplicationName());
        builder.setAgent(commandEnvironment.getConnectionParameters().getAgent());
        builder.setMessageFactory(commandEnvironment.getMessageFactory());
        builder.setTerminal(commandEnvironment.getTradingTerminal());
        builder.setRequestNumberGenerator(commandEnvironment.getRequestNumberGenerator());
        builder.setTradingSession(tradingSession.getSessionId());
        builder.setSaltedPassword(saltedPassword);
        builder.setLogin(loginCurrent);
        return builder.build();
    }
    createGetTemporaryPriceSessionBySsoTokenCommand(commandEnvironment, tradingSession, priceTerminal, ssoToken, loginCurrent) {
        let builder;
        builder = new GetTemporaryPriceSessionBySsoTokenCommandBuilder();
        builder.setMessageRouter(commandEnvironment.getMessageRouter());
        builder.setMessageExecutor(commandEnvironment.getMessageExecutor());
        builder.setApplicationName(commandEnvironment.getConnectionParameters().getApplicationName());
        builder.setAgent(commandEnvironment.getConnectionParameters().getAgent());
        builder.setMessageFactory(commandEnvironment.getMessageFactory());
        builder.setTerminal(commandEnvironment.getTradingTerminal());
        builder.setRequestNumberGenerator(commandEnvironment.getRequestNumberGenerator());
        builder.setTradingSession(tradingSession.getSessionId());
        builder.setPriceTerminal(priceTerminal);
        builder.setSsoToken(ssoToken);
        builder.setLogin(loginCurrent);
        return builder.build();
    }
    createGetTemporarySessionBySsoTokenCommand(commandEnvironment, ssoToken, loginCurrent) {
        let builder;
        builder = this.createGetTemporarySessionBySsoTokenCommandBuilder(commandEnvironment, ssoToken);
        builder.setLogin(loginCurrent);
        builder.setSsoTokenProvider("");
        return builder.build();
    }
    createGetTemporarySessionByExternalSsoTokenCommand(commandEnvironment, ssoToken, ssoTokenProvider) {
        let builder;
        builder = this.createGetTemporarySessionBySsoTokenCommandBuilder(commandEnvironment, ssoToken);
        builder.setSsoTokenProvider(ssoTokenProvider);
        builder.setLogin("");
        return builder.build();
    }
    createGetTemporarySessionBySsoTokenCommandBuilder(commandEnvironment, ssoToken) {
        let builder;
        builder = new GetTemporarySessionBySsoTokenCommandBuilder();
        builder.setMessageRouter(commandEnvironment.getMessageRouter());
        builder.setMessageExecutor(commandEnvironment.getMessageExecutor());
        builder.setApplicationName(commandEnvironment.getConnectionParameters().getApplicationName());
        builder.setAgent(commandEnvironment.getConnectionParameters().getAgent());
        builder.setMessageFactory(commandEnvironment.getMessageFactory());
        builder.setTerminal(commandEnvironment.getTradingTerminal());
        builder.setRequestNumberGenerator(commandEnvironment.getRequestNumberGenerator());
        builder.setSsoToken(ssoToken);
        builder.setConfigFlags(commandEnvironment.getConfigFlags());
        return builder;
    }
    createGetPriceSessionCommand(commandEnvironment, login, temporarySession, periodInMilliseconds, timeoutInSeconds, priceTerminal) {
        let builder;
        builder = new GetPriceSessionCommandBuilder();
        builder.setPeriodInMilliseconds(periodInMilliseconds);
        builder.setTimeoutInSeconds(timeoutInSeconds);
        builder.setMessageRouter(commandEnvironment.getMessageRouter());
        builder.setMessageExecutor(commandEnvironment.getMessageExecutor());
        builder.setApplicationName(commandEnvironment.getConnectionParameters().getApplicationName());
        builder.setMessageFactory(commandEnvironment.getMessageFactory());
        builder.setTerminal(commandEnvironment.getTradingTerminal());
        builder.setPriceTerminal(priceTerminal);
        builder.setRequestNumberGenerator(commandEnvironment.getRequestNumberGenerator());
        builder.setTemporarySession(temporarySession);
        builder.setLogin(login);
        return builder.build();
    }
    createRakeOutPricesCommand(periodInMilliseconds, connectionParameters, messageRouter, messageExecutor, messageFactory, requestNumberGenerator, priceTerminal) {
        let builder;
        builder = new RakeOutPricesCommandBuilder();
        builder.setPeriodInMilliseconds(periodInMilliseconds);
        builder.setMessageExecutor(messageExecutor);
        builder.setMessageFactory(messageFactory);
        builder.setRequestNumberGenerator(requestNumberGenerator);
        builder.setMessageRouter(messageRouter);
        builder.setConnectionParameters(connectionParameters);
        builder.setPriceTerminal(priceTerminal);
        return builder.build();
    }
    createInstrumentSubscribingCommand(messageExecutor, tradingSession, messageFactory, requestNumber, offerIds, toSubscribe) {
        let builder;
        builder = new InstrumentSubscribingCommandBuilder();
        builder.setMessageExecutor(messageExecutor);
        builder.setTradingSession(tradingSession);
        builder.setMessageFactory(messageFactory);
        builder.setRequestNumber(requestNumber);
        builder.setOfferIds(offerIds);
        builder.setToSubscribe(toSubscribe);
        return builder.build();
    }
    createGetOpenPositionsByAcctCommand(acctId, messageExecutor, tradingSession, messageFactory, requestNumberGenerator) {
        let builder;
        builder = new GetOpenPositionsByAcctCommandBuilder();
        builder.setAcctId(acctId);
        builder.setMessageExecutor(messageExecutor);
        builder.setTradingSession(tradingSession);
        builder.setMessageFactory(messageFactory);
        builder.setRequestNumberGenerator(requestNumberGenerator);
        return builder.build();
    }
    createGetLeverageProfileByAcctCommand(acctIds, offerIds, messageExecutor, tradingSession, messageFactory, requestNumberGenerator) {
        let builder;
        builder = new GetLeverageProfileByAcctCommandBuilder();
        builder.setAcctIds(acctIds);
        builder.setOfferIds(offerIds);
        builder.setMessageExecutor(messageExecutor);
        builder.setTradingSession(tradingSession);
        builder.setMessageFactory(messageFactory);
        builder.setRequestNumberGenerator(requestNumberGenerator);
        return builder.build();
    }
    createGetClosedPositionsCommand(messageExecutor, tradingSession, messageFactory, requestNumberGenerator) {
        let builder;
        builder = new GetClosedPositionsCommandBuilder();
        builder.setMessageExecutor(messageExecutor);
        builder.setTradingSession(tradingSession);
        builder.setMessageFactory(messageFactory);
        builder.setRequestNumberGenerator(requestNumberGenerator);
        return builder.build();
    }
    createSendTrueMarketOrderCommand(marketOrderRequest, clientRate, pointSize, messageExecutor, tradingSession, messageFactory, requestNumberGenerator, timeController) {
        let builder;
        builder = new SendTrueMarketOrderCommandBuilder();
        builder.setMarketOrderRequest(marketOrderRequest);
        builder.setClientRate(clientRate);
        builder.setPointSize(pointSize);
        builder.setMessageExecutor(messageExecutor);
        builder.setTradingSession(tradingSession);
        builder.setMessageFactory(messageFactory);
        builder.setRequestNumberGenerator(requestNumberGenerator);
        builder.setTimeController(timeController);
        return builder.build();
    }
    createGetPriceHistoryCommand(priceHistoryRequest, messageExecutor, priceTerminalData, messageFactory, requestNumber) {
        let builder;
        builder = new GetPriceHistoryCommandBuilder();
        builder.setPriceHistoryRequest(priceHistoryRequest);
        builder.setMessageExecutor(messageExecutor);
        builder.setPriceTerminalData(priceTerminalData);
        builder.setMessageFactory(messageFactory);
        builder.setRequestNumber(requestNumber);
        return builder.build();
    }
    createSendCloseMarketOrderCommand(closeMarketOrderRequest, openPosition, clientRate, pointSize, messageExecutor, tradingSession, messageFactory, requestNumberGenerator, timeController) {
        let builder;
        builder = new SendCloseMarketOrderCommandBuilder();
        builder.setCloseMarketOrderRequest(closeMarketOrderRequest);
        builder.setMessageExecutor(messageExecutor);
        builder.setTradingSession(tradingSession);
        builder.setMessageFactory(messageFactory);
        builder.setOpenPosition(openPosition);
        builder.setClientRate(clientRate);
        builder.setPointSize(pointSize);
        builder.setRequestNumberGenerator(requestNumberGenerator);
        builder.setTimeController(timeController);
        return builder.build();
    }
    createSendEntryOrderCommand(entryOrderRequest, side, clientRate, pointSize, messageExecutor, tradingSession, messageFactory, requestNumberGenerator, timeController) {
        let builder;
        builder = new SendEntryOrderCommandBuilder();
        builder.setEntryOrderRequest(entryOrderRequest);
        builder.setSide(side);
        builder.setClientRate(clientRate);
        builder.setPointSize(pointSize);
        builder.setMessageExecutor(messageExecutor);
        builder.setTradingSession(tradingSession);
        builder.setMessageFactory(messageFactory);
        builder.setRequestNumberGenerator(requestNumberGenerator);
        builder.setTimeController(timeController);
        return builder.build();
    }
    createSendOcoOrderCommand(entryOrderRequests, sides, clientRates, pointSizes, messageExecutor, tradingSession, messageFactory, requestNumberGenerator, timeController) {
        let builder;
        builder = new SendOcoOrderCommandBuilder();
        builder.setEntryOrderRequests(entryOrderRequests);
        builder.setSides(sides);
        builder.setClientRates(clientRates);
        builder.setPointSizes(pointSizes);
        builder.setMessageExecutor(messageExecutor);
        builder.setTradingSession(tradingSession);
        builder.setMessageFactory(messageFactory);
        builder.setRequestNumberGenerator(requestNumberGenerator);
        builder.setTimeController(timeController);
        return builder.build();
    }
    createGetAccountRolloverProfilesCommand(acctIds, offerIds, messageExecutor, tradingSession, messageFactory, requestNumberGenerator) {
        let builder;
        builder = new GetAccountRolloverProfilesCommandBuilder();
        builder.setAcctIds(acctIds);
        builder.setOfferIds(offerIds);
        builder.setMessageExecutor(messageExecutor);
        builder.setTradingSession(tradingSession);
        builder.setMessageFactory(messageFactory);
        builder.setRequestNumberGenerator(requestNumberGenerator);
        return builder.build();
    }
    createGetAccountCommissionsCommand(acctIds, offerIds, messageExecutor, tradingSession, messageFactory, requestNumberGenerator) {
        let builder;
        builder = new GetAccountCommissionsCommandBuilder();
        builder.setAcctIds(acctIds);
        builder.setOfferIds(offerIds);
        builder.setMessageExecutor(messageExecutor);
        builder.setTradingSession(tradingSession);
        builder.setMessageFactory(messageFactory);
        builder.setRequestNumberGenerator(requestNumberGenerator);
        return builder.build();
    }
    createGetOrdersCommand(acctId, messageExecutor, tradingSession, messageFactory, requestNumberGenerator) {
        let builder;
        builder = new GetOrdersCommandBuilder();
        builder.setAcctId(acctId);
        builder.setMessageExecutor(messageExecutor);
        builder.setTradingSession(tradingSession);
        builder.setMessageFactory(messageFactory);
        builder.setRequestNumberGenerator(requestNumberGenerator);
        return builder.build();
    }
    createRemoveOrderCommand(acctId, orderId, messageExecutor, tradingSession, messageFactory, requestNumberGenerator) {
        let builder;
        builder = new RemoveOrderCommandBuilder();
        builder.setAccountId(acctId);
        builder.setOrderId(orderId);
        builder.setMessageExecutor(messageExecutor);
        builder.setTradingSession(tradingSession);
        builder.setMessageFactory(messageFactory);
        builder.setRequestNumberGenerator(requestNumberGenerator);
        return builder.build();
    }
    createChangeOrderCommand(acctId, changeOrderRequest, pointSize, orderType, messageExecutor, tradingSession, messageFactory, requestNumberGenerator) {
        let builder;
        builder = new ChangeOrderCommandBuilder();
        builder.setAccountId(acctId);
        builder.setChangeOrderRequest(changeOrderRequest);
        builder.setMessageExecutor(messageExecutor);
        builder.setTradingSession(tradingSession);
        builder.setMessageFactory(messageFactory);
        builder.setPointSize(pointSize);
        builder.setOrderType(orderType);
        builder.setRequestNumberGenerator(requestNumberGenerator);
        return builder.build();
    }
    createStopOrderForTradeCommand(stopOrderRequest, openPosition, messageExecutor, tradingSession, messageFactory, requestNumberGenerator) {
        let builder;
        builder = new SendStopOrderForTradeCommandBuilder();
        builder.setStopOrderRequest(stopOrderRequest);
        builder.setOpenPosition(openPosition);
        builder.setMessageExecutor(messageExecutor);
        builder.setTradingSession(tradingSession);
        builder.setMessageFactory(messageFactory);
        builder.setRequestNumberGenerator(requestNumberGenerator);
        return builder.build();
    }
    createLimitOrderForTradeCommand(limitOrderRequest, openPosition, messageExecutor, tradingSession, messageFactory, requestNumberGenerator) {
        let builder;
        builder = new SendLimitOrderForTradeCommandBuilder();
        builder.setLimitOrderRequest(limitOrderRequest);
        builder.setOpenPosition(openPosition);
        builder.setMessageExecutor(messageExecutor);
        builder.setTradingSession(tradingSession);
        builder.setMessageFactory(messageFactory);
        builder.setRequestNumberGenerator(requestNumberGenerator);
        return builder.build();
    }
    createStopOrderForOrderCommand(stopOrderRequest, order, messageExecutor, tradingSession, messageFactory, requestNumberGenerator) {
        let builder;
        builder = new SendStopOrderForOrderCommandBuilder();
        builder.setStopOrderRequest(stopOrderRequest);
        builder.setOrder(order);
        builder.setMessageExecutor(messageExecutor);
        builder.setTradingSession(tradingSession);
        builder.setMessageFactory(messageFactory);
        builder.setRequestNumberGenerator(requestNumberGenerator);
        return builder.build();
    }
    createLimitOrderForOrderCommand(limitOrderRequest, order, messageExecutor, tradingSession, messageFactory, requestNumberGenerator) {
        let builder;
        builder = new SendLimitOrderForOrderCommandBuilder();
        builder.setLimitOrderRequest(limitOrderRequest);
        builder.setOrder(order);
        builder.setMessageExecutor(messageExecutor);
        builder.setTradingSession(tradingSession);
        builder.setMessageFactory(messageFactory);
        builder.setRequestNumberGenerator(requestNumberGenerator);
        return builder.build();
    }
    createGetSsoTokenCommand(messageExecutor, tradingSession, messageFactory, requestNumber, applicationName, providerName) {
        let builder;
        builder = new GetSsoTokenCommandBuilder();
        builder.setMessageExecutor(messageExecutor);
        builder.setTradingSession(tradingSession);
        builder.setMessageFactory(messageFactory);
        builder.setRequestNumber(requestNumber);
        builder.setApplicationName(applicationName);
        builder.setProviderName(providerName);
        return builder.build();
    }
    createDxFeedConnectCommand(ssoTokenController, dxFeedConnection, url) {
        let builder;
        builder = new DxFeedConnectCommandBuilder();
        builder.setCommandFactory(this);
        builder.setUrl(url);
        builder.setDxFeedConnection(dxFeedConnection);
        builder.setSsoTokenController(ssoTokenController);
        return builder.build();
    }
    createLoginInMultiPriceTerminalsCommand(commandFactory, commandEnvironment, sessionStorage, ssoTokenController, connectionStatusManager, login, ssoToken, aliveControllerFactory, rakeOutControllerFactory, instrumentsProvider, dxfeedConnectionFactory, callback, systemSettingsProvider, tradingTerminal, testRequestControllerFactory) {
        return LoginInMultiPriceTerminalsCommand.create(commandFactory, commandEnvironment, sessionStorage, ssoTokenController, connectionStatusManager, login, ssoToken, aliveControllerFactory, rakeOutControllerFactory, instrumentsProvider, dxfeedConnectionFactory, callback, systemSettingsProvider, this.dxfeedPriceHistoryMediatorFactory, tradingTerminal, this.dxFeedNamesProvider, this.messageRouter, testRequestControllerFactory);
    }
    createPriceFeedCommand(instruments, commandDescriptor, requestNumber, priceFeedCommandCallback) {
        let builder;
        builder = new PriceFeedCommandBuilder();
        builder.setSessionStorage(this.sessionStorage);
        builder.setInstruments(instruments);
        builder.setCommandDescriptor(commandDescriptor);
        builder.setMessageExecutor(this.pdasMessageExecutor);
        builder.setMessageFactory(this.pdasMessageFactory);
        builder.setRequestNumber(requestNumber);
        builder.setMessageRouter(this.messageRouter);
        builder.setDxFeedNamesProvider(this.dxFeedNamesProvider);
        builder.setPriceFeedCommandCallback(priceFeedCommandCallback);
        return builder.build();
    }
    createPriceFeedBatchCommand(commandDescriptors, requestNumberGenerator, priceFeedCommandCallback, forceReset) {
        let builder;
        builder = new PriceFeedBatchCommandBuilder();
        builder.setSessionStorage(this.sessionStorage);
        builder.setCommandDescriptors(commandDescriptors);
        builder.setMessageExecutor(this.pdasMessageExecutor);
        builder.setMessageFactory(this.pdasMessageFactory);
        builder.setRequestNumberGenerator(requestNumberGenerator);
        builder.setPriceFeedCommandCallback(priceFeedCommandCallback);
        builder.setForceReset(forceReset);
        return builder.build();
    }
    createOfferSnapshotCommand(instruments, commandDescriptor, requestNumber, callback) {
        let builder;
        builder = new OfferSnapshotCommandBuilder();
        builder.setSessionStorage(this.sessionStorage);
        builder.setInstruments(instruments);
        builder.setCommandDescriptor(commandDescriptor);
        builder.setMessageExecutor(this.pdasMessageExecutor);
        builder.setMessageFactory(this.pdasMessageFactory);
        builder.setRequestNumber(requestNumber);
        builder.setMessageRouter(this.messageRouter);
        builder.setDxFeedNamesProvider(this.dxFeedNamesProvider);
        builder.setCommandCallback(callback);
        builder.setTimeController(this.timeController);
        return builder.build();
    }
    createGetPriceHistoryCommonCommand(request, callback) {
        return GetPriceHistoryCommonCommand.create(request, callback, this, this.sessionStorage, this.dxfeedPriceHistoryMediatorFactory, this.dxFeedNamesProvider);
    }
    createGetPriceHistoryFromPdasCommand(priceTerminalData, request, callback) {
        return GetPriceHistoryFromPdasCommand.create(request, callback, this.messageRouter, this, priceTerminalData, this.pdasMessageFactory, this.requestNumberGenerator, this.pdasMessageExecutor, this.timeController, this.systemSettingsProvider);
    }
    createGetPriceHistoryFromDxfeedCommand(mediator, request, callback) {
        let builder;
        builder = new GetPriceHistoryFromDXFeedCommandBuilder();
        builder.setRequest(request);
        builder.setCallback(callback);
        builder.setPriceHistoryMediator(mediator);
        builder.setDxFeedNamesProvider(this.dxFeedNamesProvider);
        return builder.build();
    }
    createLoginByJWTCommand(connectionStatusManager, ssoTokenController, aliveControllerFactory, rakeOutControllerFactory, instrumentsProvider, dxfeedConnectionFactory, systemSettingsProvider, jwtStr, tradingSystemUrl, connection, testRequestControllerFactory) {
        return LoginByJWTCommand.create(this.commandEnvironment.build(), this, this.httpCommunicator, connectionStatusManager, this.sessionStorage, ssoTokenController, aliveControllerFactory, rakeOutControllerFactory, instrumentsProvider, dxfeedConnectionFactory, systemSettingsProvider, jwtStr, tradingSystemUrl, connection, testRequestControllerFactory);
    }
    createGetTerminalsBySpecifiedCW(login, tradingSystemUrl, connection, subId, callback) {
        return GetTerminalsBySpecifiedCW.create(this, this.httpCommunicator, this.connectionParameters, login, tradingSystemUrl, connection, subId, callback);
    }
    createLoginByJWTUsingSSOCommand(loginController, connectionStatusManager, jwtStr, tradingSystemUrl, connection) {
        return LoginByJWTUsingSSOCommand.create(loginController, connectionStatusManager, jwtStr, tradingSystemUrl, connection);
    }
    createSendCloseAllPositionsCommand(closeAllPositionsRequest, closePositionDescriptors, messageExecutor, tradingSession, messageFactory, requestNumberGenerator, timeController) {
        let builder;
        builder = new SendCloseAllPositionsCommandBuilder();
        builder.setCloseAllPositionsRequest(closeAllPositionsRequest);
        builder.setMessageExecutor(messageExecutor);
        builder.setTradingSession(tradingSession);
        builder.setMessageFactory(messageFactory);
        builder.setClosePositionDescriptor(closePositionDescriptors);
        builder.setRequestNumberGenerator(requestNumberGenerator);
        builder.setTimeController(timeController);
        return builder.build();
    }
    createGetSsoTokenProcessor(ssoTokenDecoder, provider, callback) {
        return GetSsoTokenProcessor.create(this, this.connectionParameters, TradingSessionProvider.create(this.sessionStorage), this.pdasMessageFactory, this.pdasMessageExecutor, this.messageRouter, this.requestNumberGenerator, ssoTokenDecoder, provider, callback);
    }
    createSendClientMessageCommand(sendClientMessageRequest) {
        let builder;
        builder = new SendClientMessageCommandBuilder();
        builder.setSendClientMessageRequest(sendClientMessageRequest);
        builder.setMessageExecutor(this.pdasMessageExecutor);
        builder.setTradingSession(this.sessionStorage.getTradingSession());
        builder.setMessageFactory(this.pdasMessageFactory);
        builder.setRequestNumberGenerator(this.requestNumberGenerator);
        return builder.build();
    }
    createTestRequestPricesCommand(periodInMilliseconds, connectionParameters, messageRouter, messageExecutor, messageFactory, requestNumberGenerator, priceTerminal) {
        let builder;
        builder = new TestRequestMdtCommandBuilder();
        builder.setPeriodInMilliseconds(periodInMilliseconds);
        builder.setMessageFactory(messageFactory);
        builder.setRequestNumberGenerator(requestNumberGenerator);
        builder.setMessageExecutor(messageExecutor);
        builder.setMessageRouter(messageRouter);
        builder.setConnectionParameters(connectionParameters);
        builder.setPriceTerminal(priceTerminal);
        return builder.build();
    }
    createTestRequestTradingCommand(periodInMilliseconds, connectionParameters, messageRouter, messageExecutor, messageFactory, requestNumberGenerator) {
        let builder;
        builder = new TestRequestPdsCommandBuilder();
        builder.setPeriodInMilliseconds(periodInMilliseconds);
        builder.setMessageFactory(messageFactory);
        builder.setRequestNumberGenerator(requestNumberGenerator);
        builder.setMessageExecutor(messageExecutor);
        builder.setMessageRouter(messageRouter);
        builder.setConnectionParameters(connectionParameters);
        return builder.build();
    }
}
module.exports = CommandFactory
