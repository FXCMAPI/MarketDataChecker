'use strict';
let InstrumentUpdate = require('./InstrumentUpdate.js');
let InstrumentBuilder = require('./InstrumentBuilder.js');
let FieldChangeChecker = require('./FieldChangeChecker.js');
let variantCast = require('@gehtsoft/LuaxStdlib-node').variantCast;
//@@DocBrief("The builder of the InstrumentUpdate class")
class InstrumentUpdateBuilder extends InstrumentUpdate {
    instrumentBuilder;
    constructor() {
        super();
        this.instrumentBuilder = new InstrumentBuilder();
    }
    setOfferId(offerId) {
        this.mIsOfferIdChanged = false;
        if (FieldChangeChecker.isFieldChange(offerId)) {
            this.instrumentBuilder.setOfferId(offerId);
            this.mIsOfferIdChanged = true;
        }
    }
    setSymbol(symbol) {
        this.mIsSymbolChanged = false;
        if (FieldChangeChecker.isFieldChange(symbol)) {
            this.instrumentBuilder.setSymbol(symbol);
            this.mIsSymbolChanged = true;
        }
    }
    setContractCurrency(contractCurrency) {
        this.mIsContractCurrencyChanged = false;
        if (FieldChangeChecker.isFieldChange(contractCurrency)) {
            this.instrumentBuilder.setContractCurrency(contractCurrency);
            this.mIsContractCurrencyChanged = true;
        }
    }
    setDigits(digits) {
        this.mIsDigitsChanged = false;
        if (FieldChangeChecker.isFieldChange(digits)) {
            this.instrumentBuilder.setDigits(variantCast.castToInt(variantCast.fromString(digits)));
            this.mIsDigitsChanged = true;
        }
    }
    setPointSize(pointSize) {
        this.mIsPointSizeChanged = false;
        if (FieldChangeChecker.isFieldChange(pointSize)) {
            this.instrumentBuilder.setPointSize(variantCast.castToReal(variantCast.fromString(pointSize)));
            this.mIsPointSizeChanged = true;
        }
    }
    setInstrumentType(instrumentType) {
        this.mIsInstrumentTypeChanged = false;
        if (FieldChangeChecker.isFieldChange(instrumentType)) {
            this.instrumentBuilder.setInstrumentType(variantCast.castToInt(variantCast.fromString(instrumentType)));
            this.mIsInstrumentTypeChanged = true;
        }
    }
    setTradingStatus(tradingStatus) {
        this.mIsTradingStatusChanged = false;
        if (FieldChangeChecker.isFieldChange(tradingStatus)) {
            this.instrumentBuilder.setTradingStatus(tradingStatus);
            this.mIsTradingStatusChanged = true;
        }
    }
    setContractMultiplier(contractMultiplier) {
        this.mIsContractMultiplierChanged = false;
        if (FieldChangeChecker.isFieldChange(contractMultiplier)) {
            this.instrumentBuilder.setContractMultiplier(variantCast.castToReal(variantCast.fromString(contractMultiplier)));
            this.mIsContractMultiplierChanged = true;
        }
    }
    setSellInterest(sellInterest) {
        this.mIsSellInterestChanged = false;
        if (FieldChangeChecker.isFieldChange(sellInterest)) {
            this.instrumentBuilder.setSellInterest(variantCast.castToReal(variantCast.fromString(sellInterest)));
            this.mIsSellInterestChanged = true;
        }
    }
    setBuyInterest(buyInterest) {
        this.mIsBuyInterestChanged = false;
        if (FieldChangeChecker.isFieldChange(buyInterest)) {
            this.instrumentBuilder.setBuyInterest(variantCast.castToReal(variantCast.fromString(buyInterest)));
            this.mIsBuyInterestChanged = true;
        }
    }
    setSubscriptionStatus(subscriptionStatus) {
        this.mIsSubscriptionStatusChanged = false;
        if (FieldChangeChecker.isFieldChange(subscriptionStatus)) {
            this.instrumentBuilder.setSubscriptionStatus(subscriptionStatus);
            this.mIsSubscriptionStatusChanged = true;
        }
    }
    setBaseUnitSize(baseUnitSize) {
        this.mIsBaseUnitSizeChanged = false;
        if (FieldChangeChecker.isFieldChange(baseUnitSize)) {
            this.instrumentBuilder.setBaseUnitSize(variantCast.castToInt(variantCast.fromString(baseUnitSize)));
            this.mIsBaseUnitSizeChanged = true;
        }
    }
    setAskAdjustment(askAdjustment) {
        this.mIsAskAdjustmentChanged = false;
        if (FieldChangeChecker.isFieldChange(askAdjustment)) {
            this.instrumentBuilder.setAskAdjustment(variantCast.castToReal(variantCast.fromString(askAdjustment)));
            this.mIsAskAdjustmentChanged = true;
        }
    }
    setBidAdjustment(bidAdjustment) {
        this.mIsBidAdjustmentChanged = false;
        if (FieldChangeChecker.isFieldChange(bidAdjustment)) {
            this.instrumentBuilder.setBidAdjustment(variantCast.castToReal(variantCast.fromString(bidAdjustment)));
            this.mIsBidAdjustmentChanged = true;
        }
    }
    setDividendBuy(dividendBuy) {
        this.mIsDividendBuyChanged = false;
        if (FieldChangeChecker.isFieldChange(dividendBuy)) {
            if (dividendBuy != "") {
                this.instrumentBuilder.setHasDividendBuy(true);
                this.instrumentBuilder.setDividendBuy(variantCast.castToReal(variantCast.fromString(dividendBuy)));
            }
            this.mIsDividendBuyChanged = true;
        }
    }
    setDividendSell(dividendSell) {
        this.mIsDividendSellChanged = false;
        if (FieldChangeChecker.isFieldChange(dividendSell)) {
            if (dividendSell != "") {
                this.instrumentBuilder.setHasDividendSell(true);
                this.instrumentBuilder.setDividendSell(variantCast.castToReal(variantCast.fromString(dividendSell)));
            }
            this.mIsDividendSellChanged = true;
        }
    }
    setMinQuantity(minQuantity) {
        this.mIsMinQuantityChanged = false;
        if (FieldChangeChecker.isFieldChange(minQuantity)) {
            this.instrumentBuilder.setMinQuantity(variantCast.castToInt(variantCast.fromString(minQuantity)));
            this.mIsMinQuantityChanged = true;
        }
    }
    setMaxQuantity(maxQuantity) {
        this.mIsMaxQuantityChanged = false;
        if (FieldChangeChecker.isFieldChange(maxQuantity)) {
            this.instrumentBuilder.setMaxQuantity(variantCast.castToInt(variantCast.fromString(maxQuantity)));
            this.mIsMaxQuantityChanged = true;
        }
    }
    setSortOrder(sortOrder) {
        this.mIsSortOrderChanged = false;
        if (FieldChangeChecker.isFieldChange(sortOrder)) {
            this.instrumentBuilder.setSortOrder(variantCast.castToInt(variantCast.fromString(sortOrder)));
            this.mIsSortOrderChanged = true;
        }
    }
    setPriceStreamId(priceStreamId) {
        this.mIsPriceStreamIdChanged = false;
        if (FieldChangeChecker.isFieldChange(priceStreamId)) {
            this.instrumentBuilder.setPriceStreamId(priceStreamId);
            this.mIsPriceStreamIdChanged = true;
        }
    }
    setConditionDistStop(conditionDistStop) {
        this.mIsConditionDistStopChanged = false;
        if (FieldChangeChecker.isFieldChange(conditionDistStop)) {
            if (conditionDistStop != "") {
                this.instrumentBuilder.setConditionDistStop(variantCast.castToReal(variantCast.fromString(conditionDistStop)));
            }
            this.mIsConditionDistStopChanged = true;
        }
    }
    setConditionDistLimit(conditionDistLimit) {
        this.mIsConditionDistLimitChanged = false;
        if (FieldChangeChecker.isFieldChange(conditionDistLimit)) {
            if (conditionDistLimit != "") {
                this.instrumentBuilder.setConditionDistLimit(variantCast.castToReal(variantCast.fromString(conditionDistLimit)));
            }
            this.mIsConditionDistLimitChanged = true;
        }
    }
    setConditionDistEntryStop(conditionDistEntryStop) {
        this.mIsConditionDistEntryStopChanged = false;
        if (FieldChangeChecker.isFieldChange(conditionDistEntryStop)) {
            if (conditionDistEntryStop != "") {
                this.instrumentBuilder.setConditionDistEntryStop(variantCast.castToReal(variantCast.fromString(conditionDistEntryStop)));
            }
            this.mIsConditionDistEntryStopChanged = true;
        }
    }
    setConditionDistEntryLimit(conditionDistEntryLimit) {
        this.mIsConditionDistEntryLimitChanged = false;
        if (FieldChangeChecker.isFieldChange(conditionDistEntryLimit)) {
            if (conditionDistEntryLimit != "") {
                this.instrumentBuilder.setConditionDistEntryLimit(variantCast.castToReal(variantCast.fromString(conditionDistEntryLimit)));
            }
            this.mIsConditionDistEntryLimitChanged = true;
        }
    }
    setMMR(mmr) {
        this.mIsMmrChanged = false;
        if (FieldChangeChecker.isFieldChange(mmr)) {
            if (mmr != "") {
                this.instrumentBuilder.setMMR(variantCast.castToReal(variantCast.fromString(mmr)));
            }
            this.mIsMmrChanged = true;
        }
    }
    setMMRByCurrency(currency, mmr) {
        this.instrumentBuilder.setMMRByCurrency(currency, variantCast.castToReal(variantCast.fromString(mmr)));
        this.mIsMmrByCurrencyChanged = true;
    }
    build() {
        this.instrument = this.instrumentBuilder.build();
        return this;
    }
}
module.exports = InstrumentUpdateBuilder
