'use strict';
let FXConnectLiteSession = require('./FXConnectLiteSession.js');
let LoginControllerFactory = require('./LoginControllerFactory.js');
let AliveControllerFactory = require('./AliveControllerFactory.js');
let RakeOutControllerFactory = require('./RakeOutControllerFactory.js');
let httpCommunicator = require('@gehtsoft/LuaxStdlib-node').httpCommunicator;
let SocketCommunicatorFactory = require('./SocketCommunicatorFactory.js');
let TestRequestControllerFactory = require('./TestRequestControllerFactory.js');
//@@DocInclude
//@@DocBrief("The factory for creating a session of connection to the trading system")
class FXConnectLiteSessionFactory {
    static create(applicationName) {
        let session;
        session = FXConnectLiteSession.create(new LoginControllerFactory(), new AliveControllerFactory(), new RakeOutControllerFactory(), new httpCommunicator(), new SocketCommunicatorFactory(), new TestRequestControllerFactory());
        session.setApplicationName(applicationName);
        return session;
    }
    static createWithCustomParameters(applicationName, connectionParameters) {
        let session;
        session = FXConnectLiteSession.create(new LoginControllerFactory(), new AliveControllerFactory(), new RakeOutControllerFactory(), new httpCommunicator(), new SocketCommunicatorFactory(), new TestRequestControllerFactory());
        session.setApplicationName(applicationName);
        session.setParameters(connectionParameters);
        return session;
    }
    static createWithCustomParametersAndFlags(applicationName, connectionParameters, flags) {
        let session;
        session = FXConnectLiteSession.create(new LoginControllerFactory(), new AliveControllerFactory(), new RakeOutControllerFactory(), new httpCommunicator(), new SocketCommunicatorFactory(), new TestRequestControllerFactory());
        session.setApplicationName(applicationName);
        session.setParameters(connectionParameters);
        session.setFlags(flags);
        return session;
    }
    static createWithFlags(applicationName, flags) {
        let session;
        session = FXConnectLiteSession.create(new LoginControllerFactory(), new AliveControllerFactory(), new RakeOutControllerFactory(), new httpCommunicator(), new SocketCommunicatorFactory(), new TestRequestControllerFactory());
        session.setApplicationName(applicationName);
        session.setFlags(flags);
        return session;
    }
}
module.exports = FXConnectLiteSessionFactory
