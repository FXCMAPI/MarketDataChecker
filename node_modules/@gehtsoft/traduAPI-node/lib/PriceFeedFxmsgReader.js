'use strict';
let AFxmsgReader = require('./AFxmsgReader.js');
let PdasMessageFieldTag = require('./PdasMessageFieldTag.js');
let GetPriceFeedMessageBuilder = require('./GetPriceFeedMessageBuilder.js');
let PdasMessageType = require('./PdasMessageType.js');
let stdlib = require('@gehtsoft/LuaxStdlib-node').stdlib;
let OfferBuilder = require('./OfferBuilder.js');
let DateTimeParser = require('./DateTimeParser.js');
let variantCast = require('@gehtsoft/LuaxStdlib-node').variantCast;
class PriceFeedFxmsgReader extends AFxmsgReader {
    read(responseList, xmlRootNode, messages) {
        let symbol, msgType, i, messageBuilder, requestId, offerId, message, embList, offer;
        if (messages == null || messages.length == 0) {
            return;
        }
        for (i = 0; i <= messages.length - 1; i += 1) {
            message = messages[i];
            if (message.getType() == PdasMessageType.PRICE_FEED_RESPONSE_MESSAGE) {
                symbol = message.getFieldValue(PdasMessageFieldTag.SYMBOL);
                msgType = message.getFieldValue(PdasMessageFieldTag.MSG_TYPE);
                requestId = message.getFieldValue(PdasMessageFieldTag.MD_REQ_ID);
                offerId = message.getFieldValue(PdasMessageFieldTag.FXCM_SYM_ID);
                embList = message.getList(PdasMessageFieldTag.NO_MD_ENTRYS);
                if (embList != null && symbol != null && requestId != null && offerId != null && msgType == PdasMessageType.PRICE_FEED_RESPONSE_MESSAGE) {
                    messageBuilder = new GetPriceFeedMessageBuilder();
                    offer = this.createOffer(offerId, embList, messageBuilder);
                    if (offer != null) {
                        messageBuilder.setOffer(offer);
                    }
                    messageBuilder.setSymbol(symbol);
                    messageBuilder.setRequestId(requestId);
                    messageBuilder.setOfferId(offerId);
                    responseList.add(this.createLockedMessage(messageBuilder.build()));
                }
            } else if (message.getType() == PdasMessageType.MARKET_DATA_REQUEST_REJECT) {
                this.checkReject(message, responseList);
            }
        }
    }
    createOffer(offerId, embList, messageBuilder) {
        let groups, group, j, offerBuilder, bid, ask, high, low, quoteId, bidTradable, askTradable, time, volume;
        quoteId = "";
        bidTradable = "T";
        askTradable = "T";
        bid = 0.0;
        ask = 0.0;
        high = 0.0;
        low = 0.0;
        time = stdlib.mkdate(1900, 1, 1);
        volume = 0;
        groups = embList.getGroups();
        for (j = 0; j <= groups.length() - 1; j += 1) {
            group = groups.get(j);
            if (group.getFieldValue(PdasMessageFieldTag.MD_ENTRY_TYPE) == "1") {
                quoteId = this.getQuoteId(group);
                ask = this.getValue(group);
                askTradable = this.getTradable(group);
                time = this.getTime(group);
            } else if (group.getFieldValue(PdasMessageFieldTag.MD_ENTRY_TYPE) == "0") {
                bid = this.getValue(group);
                bidTradable = this.getTradable(group);
            } else if (group.getFieldValue(PdasMessageFieldTag.MD_ENTRY_TYPE) == "7") {
                high = this.getValue(group);
            } else if (group.getFieldValue(PdasMessageFieldTag.MD_ENTRY_TYPE) == "8") {
                low = this.getValue(group);
            }
        }
        if (bid == 0.0 && ask == 0.0) {
            messageBuilder.setError(quoteId);
            return null;
        }
        offerBuilder = new OfferBuilder();
        offerBuilder.setOfferId(offerId);
        offerBuilder.setQuoteId(quoteId);
        offerBuilder.setBidTradable(bidTradable);
        offerBuilder.setAskTradable(askTradable);
        offerBuilder.setVolume(volume);
        offerBuilder.setHigh(high);
        offerBuilder.setLow(low);
        offerBuilder.setBid(bid);
        offerBuilder.setAsk(ask);
        offerBuilder.setTime(time);
        return offerBuilder.build();
    }
    getTime(group) {
        if (group.getFieldValue(PdasMessageFieldTag.MD_ENTRY_DATE) != null && group.getFieldValue(PdasMessageFieldTag.MD_ENTRY_TIME) != null) {
            return DateTimeParser.parseDateTimeFromLongString(group.getFieldValue(PdasMessageFieldTag.MD_ENTRY_DATE) + "-" + group.getFieldValue(PdasMessageFieldTag.MD_ENTRY_TIME));
        }
        else {
            return stdlib.mkdate(1900, 1, 1);
        }
    }
    getTradable(group) {
        if (group.getFieldValue(PdasMessageFieldTag.QUOTE_TYPE) == "0") {
            return "I";
        }
        else {
            return "T";
        }
    }
    getValue(group) {
        if (group.getFieldValue(PdasMessageFieldTag.MD_ENTRY_PX) != null) {
            return variantCast.fromString(group.getFieldValue(PdasMessageFieldTag.MD_ENTRY_PX)).asReal();
        }
        else {
            return 0.0;
        }
    }
    getQuoteId(group) {
        if (group.getFieldValue(PdasMessageFieldTag.MD_QUOTEENTRYID) != null) {
            return group.getFieldValue(PdasMessageFieldTag.MD_QUOTEENTRYID);
        }
        else {
            return "";
        }
    }
    checkReject(message, responseList) {
        let symbol, msgType, messageBuilder, requestId, offerId, errorTxt;
        messageBuilder = new GetPriceFeedMessageBuilder();
        symbol = message.getFieldValue(PdasMessageFieldTag.SYMBOL);
        msgType = message.getFieldValue(PdasMessageFieldTag.MSG_TYPE);
        requestId = message.getFieldValue(PdasMessageFieldTag.MD_REQ_ID);
        offerId = message.getFieldValue(PdasMessageFieldTag.FXCM_SYM_ID);
        errorTxt = message.getFieldValue(PdasMessageFieldTag.FLD_TEXT);
        if (symbol == null || stdlib.len(symbol) == 0) {
            symbol = "*";
        }
        if (offerId == null || stdlib.len(offerId) == 0) {
            offerId = "*";
        }
        if (errorTxt == null || stdlib.len(errorTxt) == 0) {
            errorTxt = "unknown MDT error";
        }
        if (requestId != null && msgType == PdasMessageType.MARKET_DATA_REQUEST_REJECT) {
            messageBuilder.setSymbol(symbol);
            messageBuilder.setRequestId(requestId);
            messageBuilder.setOfferId(offerId);
            messageBuilder.setError(errorTxt);
            responseList.add(this.createLockedMessage(messageBuilder.build()));
        }
    }
}
module.exports = PriceFeedFxmsgReader
