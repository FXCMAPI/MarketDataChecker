'use strict';
let APdasRequestMessage = require('./APdasRequestMessage.js');
let PdasMessageFieldFactory = require('./PdasMessageFieldFactory.js');
let PdasMessageSerializer = require('./PdasMessageSerializer.js');
let PdasMessageType = require('./PdasMessageType.js');
let PdasMessageFieldTag = require('./PdasMessageFieldTag.js');
let TimeStamp = require('./TimeStamp.js');
let PdasMessageValue = require('./PdasMessageValue.js');
let PdasConstants = require('./PdasConstants.js');
let PdasTransportMessage = require('./PdasTransportMessage.js');
let TransportMessageType = require('./TransportMessageType.js');
class PdasGetSsoTokenRequestMessage extends APdasRequestMessage {
    build(tradingSession, applicationName, providerName, requestNumber, transactTime) {
        let pdasMessageSerializer, factory, pdasMessage, requestId, timeStamp, pdasMessageList, group, terminal, result, terminalUrl;
        terminal = tradingSession.getTradingTerminal();
        factory = new PdasMessageFieldFactory();
        pdasMessageSerializer = new PdasMessageSerializer();
        terminalUrl = tradingSession.getTradingTerminal().getUrls()[0];
        requestId = tradingSession.getSessionId() + "-" + (requestNumber).toString();
        pdasMessage = factory.createMessage(PdasMessageType.USER_REQUEST);
        pdasMessage.addChild(factory.createStringField(PdasMessageFieldTag.TRADING_SESSION_ID, terminal.getId()));
        pdasMessage.addChild(factory.createStringField(PdasMessageFieldTag.MSG_TYPE, PdasMessageType.USER_REQUEST));
        pdasMessage.addChild(factory.createStringField(PdasMessageFieldTag.USER_NAME, ""));
        pdasMessage.addChild(factory.createStringField(PdasMessageFieldTag.PASSWORD, ""));
        timeStamp = TimeStamp.create(transactTime);
        pdasMessage.addChild(factory.createStringField(PdasMessageFieldTag.TRANSACT_TIME, timeStamp.getTimeStampString()));
        pdasMessage.addChild(factory.createStringField(PdasMessageFieldTag.TRADING_SESSION_SUB_ID, terminal.getSubId()));
        pdasMessageList = factory.createList(PdasMessageFieldTag.FXCM_NO_PARAM);
        group = factory.createGroup();
        group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_NAME, PdasMessageValue.CLIENT_REMOTE_APP_CODE));
        group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_VALUE, applicationName));
        pdasMessageList.addChild(group);
        if (providerName != "") {
            group = factory.createGroup();
            group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_NAME, PdasMessageValue.CLIENT_PROVIDER));
            group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_VALUE, providerName));
            pdasMessageList.addChild(group);
        }
        pdasMessage.addChild(pdasMessageList);
        pdasMessage.addChild(factory.createStringField(PdasMessageFieldTag.USER_REQUEST_ID, requestId));
        pdasMessage.addChild(factory.createIntField(PdasMessageFieldTag.USER_REQUEST_TYPE, 9));
        pdasMessage.addChild(factory.createStringField(PdasConstants.SID, tradingSession.getSessionId()));
        result = PdasTransportMessage.create(TransportMessageType.GetSsoToken, this.createRequestUrl(terminalUrl), pdasMessageSerializer.serialize(pdasMessage));
        return result;
    }
}
module.exports = PdasGetSsoTokenRequestMessage
