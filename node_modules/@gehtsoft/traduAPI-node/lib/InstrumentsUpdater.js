'use strict';
class InstrumentsUpdater {
    static processSubscriptionStatus(updInstrument, oldInstrumentBuilder) {
        if (updInstrument.isSubscriptionStatusChanged()) {
            oldInstrumentBuilder.setSubscriptionStatus(updInstrument.getInstrument().getSubscriptionStatus());
            return true;
        }
        return false;
    }
    static processMainPropertiesUpdate(updInstrument, oldInstrumentBuilder) {
        let changed;
        changed = false;
        if (updInstrument.isContractCurrencyChanged()) {
            oldInstrumentBuilder.setContractCurrency(updInstrument.getInstrument().getContractCurrency());
            changed = true;
        }
        if (updInstrument.isDigitsChanged()) {
            oldInstrumentBuilder.setDigits(updInstrument.getInstrument().getDigits());
            changed = true;
        }
        if (updInstrument.isPointSizeChanged()) {
            oldInstrumentBuilder.setPointSize(updInstrument.getInstrument().getPointSize());
            changed = true;
        }
        if (updInstrument.isInstrumentTypeChanged()) {
            oldInstrumentBuilder.setInstrumentType(updInstrument.getInstrument().getInstrumentType());
            changed = true;
        }
        if (updInstrument.isTradingStatusChanged()) {
            oldInstrumentBuilder.setTradingStatus(updInstrument.getInstrument().getTradingStatus());
            changed = true;
        }
        if (updInstrument.isContractMultiplierChanged()) {
            oldInstrumentBuilder.setContractMultiplier(updInstrument.getInstrument().getContractMultiplier());
            changed = true;
        }
        if (updInstrument.isSellInterestChanged()) {
            oldInstrumentBuilder.setSellInterest(updInstrument.getInstrument().getSellInterest());
            changed = true;
        }
        if (updInstrument.isBuyInterestChanged()) {
            oldInstrumentBuilder.setBuyInterest(updInstrument.getInstrument().getBuyInterest());
            changed = true;
        }
        if (updInstrument.isBaseUnitSizeChanged()) {
            oldInstrumentBuilder.setBaseUnitSize(updInstrument.getInstrument().getBaseUnitSize());
            changed = true;
        }
        if (updInstrument.isAskAdjustmentChanged()) {
            oldInstrumentBuilder.setAskAdjustment(updInstrument.getInstrument().getAskAdjustment());
            changed = true;
        }
        if (updInstrument.isBidAdjustmentChanged()) {
            oldInstrumentBuilder.setBidAdjustment(updInstrument.getInstrument().getBidAdjustment());
            changed = true;
        }
        if (updInstrument.isDividendBuyChanged()) {
            oldInstrumentBuilder.setHasDividendBuy(updInstrument.getInstrument().hasDividendBuy());
            oldInstrumentBuilder.setDividendBuy(updInstrument.getInstrument().getDividendBuy());
            changed = true;
        }
        if (updInstrument.isDividendSellChanged()) {
            oldInstrumentBuilder.setHasDividendSell(updInstrument.getInstrument().hasDividendSell());
            oldInstrumentBuilder.setDividendSell(updInstrument.getInstrument().getDividendSell());
            changed = true;
        }
        return changed || InstrumentsUpdater.processMainPropertiesUpdateRest(updInstrument, oldInstrumentBuilder);
    }
    static processMainPropertiesUpdateRest(updInstrument, oldInstrumentBuilder) {
        let changed;
        changed = false;
        if (updInstrument.isMinQuantityChanged()) {
            oldInstrumentBuilder.setMinQuantity(updInstrument.getInstrument().getMinQuantity());
            changed = true;
        }
        if (updInstrument.isMaxQuantityChanged()) {
            oldInstrumentBuilder.setMaxQuantity(updInstrument.getInstrument().getMaxQuantity());
            changed = true;
        }
        if (updInstrument.isSortOrderChanged()) {
            oldInstrumentBuilder.setSortOrder(updInstrument.getInstrument().getSortOrder());
            changed = true;
        }
        if (updInstrument.isPriceStreamIdChanged()) {
            oldInstrumentBuilder.setPriceStreamId(updInstrument.getInstrument().getPriceStreamId());
            changed = true;
        }
        if (updInstrument.isConditionDistStopChanged()) {
            oldInstrumentBuilder.setConditionDistStop(updInstrument.getInstrument().getConditionDistStop());
            changed = true;
        }
        if (updInstrument.isConditionDistLimitChanged()) {
            oldInstrumentBuilder.setConditionDistLimit(updInstrument.getInstrument().getConditionDistLimit());
            changed = true;
        }
        if (updInstrument.isConditionDistEntryStopChanged()) {
            oldInstrumentBuilder.setConditionDistEntryStop(updInstrument.getInstrument().getConditionDistEntryStop());
            changed = true;
        }
        if (updInstrument.isConditionDistEntryLimitChanged()) {
            oldInstrumentBuilder.setConditionDistEntryLimit(updInstrument.getInstrument().getConditionDistEntryLimit());
            changed = true;
        }
        return changed;
    }
}
module.exports = InstrumentsUpdater
