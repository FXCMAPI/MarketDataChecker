'use strict';
let SubscriptionStatusTracker = require('./SubscriptionStatusTracker.js');
let list = require('@gehtsoft/LuaxStdlib-node').list;
let LogManager = require('./LogManager.js');
let MessageType = require('./MessageType.js');
let StringUtil = require('./StringUtil.js');
let stdlib = require('@gehtsoft/LuaxStdlib-node').stdlib;
class OffersSnapshotsSubscriptionStatusTracker extends SubscriptionStatusTracker {
    resultList;
    static createInstance(messageRouter) {
        let result;
        result = new OffersSnapshotsSubscriptionStatusTracker();
        result.messageRouter = messageRouter;
        result.subscribedMessages = new list();
        result.items = new list();
        result.timeOutScheduler = null;
        result.timeoutInSeconds = 30;
        result.setReceiveNewMessageListener();
        result.logger = LogManager.getLogger();
        return result;
    }
    setReceiveNewMessageListener() {
        this.receiveNewMessageListener = new OffersSnapshotsSubscriptionStatusTracker.OffersSnapshotsReceiveNewMessageListener(this);
    }
    setResultList(resultList) {
        this.resultList = resultList;
    }
    processMessage(message) {
        let getPriceFeedMessage;
        if (message.getType() == MessageType.PriceFeed) {
            getPriceFeedMessage = message;
            this.processPriceFeedResponse(getPriceFeedMessage);
        }
    }
    processPriceFeedResponse(getPriceFeedMessage) {
        let offerIds, i, instrumentRequest, requestNumber, error;
        requestNumber = StringUtil.getRequestNumber(getPriceFeedMessage.getRequestId());
        error = getPriceFeedMessage.getError();
        if (error != null && stdlib.len(error) > 0 && getPriceFeedMessage.getOfferId() == "*") {
            instrumentRequest = this.checkResponse(requestNumber);
            if (instrumentRequest != null) {
                offerIds = instrumentRequest.getOfferIdsWaiting();
                for (i = 0; i <= offerIds.length - 1; i += 1) {
                    this.processResponse(requestNumber, offerIds[i], error);
                }
            }
        }
        else {
            if (this.checkResponse(requestNumber) != null) {
                if (!(error != null && stdlib.len(error) > 0)) {
                    this.resultList.add(getPriceFeedMessage.getOffer());
                }
                this.processResponse(requestNumber, getPriceFeedMessage.getOfferId(), error);
            }
        }
    }
}
module.exports = OffersSnapshotsSubscriptionStatusTracker
OffersSnapshotsSubscriptionStatusTracker.OffersSnapshotsReceiveNewMessageListener = class {
    _owner_;
    constructor(_owner_) {
        this._owner_ = _owner_;
    }
    onNewMessageReceive(message) {
        this._owner_.processMessage(message);
    }
}
