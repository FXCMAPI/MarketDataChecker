'use strict';
let ABothFxmsgReader = require('./ABothFxmsgReader.js');
let csvParser = require('@gehtsoft/LuaxStdlib-node').csvParser;
let InstrumentDescriptorCsvParser = require('./InstrumentDescriptorCsvParser.js');
let PdasRequestCommand = require('./PdasRequestCommand.js');
let xmlNode = require('@gehtsoft/LuaxStdlib-node').xmlNode;
let XmlReaderUtil = require('./XmlReaderUtil.js');
let PdasMessageFieldTag = require('./PdasMessageFieldTag.js');
let GetInstrumentDescriptorsMessageBuilder = require('./GetInstrumentDescriptorsMessageBuilder.js');
let InstrumentDescriptorsList = require('./InstrumentDescriptorsList.js');
class GetInstrumentDescriptorsFxmsgReader extends ABothFxmsgReader {
    linesParser;
    instrumentCsvParser;
    constructor() {
        super();
        this.linesParser = new csvParser();
        this.linesParser.valueSeparator = "\n";
        this.instrumentCsvParser = new InstrumentDescriptorCsvParser();
    }
    getCommand() {
        return PdasRequestCommand.GET_INSTRUMENT_DESCRIPTORS;
    }
    processData(responseList, data) {
        responseList.add(this.createLockedMessage(this.processFoundData(data).build()));
    }
    processMessage(responseList, messageNode) {
        let i, child, responseMessage;
        responseMessage = null;
        for (i = 0; i <= messageNode.getChildrenCount() - 1; i += 1) {
            child = messageNode.getChild(i);
            if (child.getType() == xmlNode.ELEMENT) {
                responseMessage = this.processList(child);
            }
            if (responseMessage != null) {
                break;
            }
        }
        if (responseMessage != null) {
            responseList.add(responseMessage.build());
        }
    }
    processList(l) {
        let responseMessage, j;
        responseMessage = null;
        if (XmlReaderUtil.isAttrEqualTo(l, "n", PdasMessageFieldTag.FXCM_NO_PARAM)) {
            for (j = 0; j <= l.getChildrenCount() - 1; j += 1) {
                responseMessage = this.processGroup(l.getChild(j));
                if (responseMessage != null) {
                    break;
                }
            }
        }
        return responseMessage;
    }
    processGroup(g) {
        let fieldText;
        fieldText = this.getTextFromGroup(g, "EXTRA.166");
        if (fieldText != null) {
            return this.processFoundData(fieldText);
        }
        return null;
    }
    processFoundData(fieldText) {
        let instrumentDescriptorsList, responseMessage;
        instrumentDescriptorsList = this.parseInstrumentDescriptors(fieldText);
        responseMessage = new GetInstrumentDescriptorsMessageBuilder();
        responseMessage.addInstrumentDescriptors(instrumentDescriptorsList);
        return responseMessage;
    }
    parseInstrumentDescriptors(data) {
        let lines, i, instrumentsList, instrumentDescriptor;
        instrumentsList = new InstrumentDescriptorsList();
        lines = this.linesParser.splitLine(data);
        for (i = 0; i <= lines.length - 1; i += 1) {
            instrumentDescriptor = this.instrumentCsvParser.parse(lines[i]);
            if (instrumentDescriptor != null) {
                instrumentsList.add(instrumentDescriptor);
            }
        }
        return instrumentsList;
    }
}
module.exports = GetInstrumentDescriptorsFxmsgReader
