'use strict';
let ABatchFxmsgReader = require('./ABatchFxmsgReader.js');
let RolloverProfilesCsvParser = require('./RolloverProfilesCsvParser.js');
let PdasRequestCommand = require('./PdasRequestCommand.js');
let GetRolloverProfilesMessageBuilder = require('./GetRolloverProfilesMessageBuilder.js');
let RolloverProfilesList = require('./RolloverProfilesList.js');
class GetRolloverProfilesFxmsgReader extends ABatchFxmsgReader {
    rolloverProfileCsvParser;
    constructor() {
        super();
        this.rolloverProfileCsvParser = new RolloverProfilesCsvParser();
    }
    getExpectedCommand() {
        return PdasRequestCommand.GET_ACCOUNT_ROLLOVER_PROFILES;
    }
    processData(responseList, data, acctId, offerIds) {
        let getRolloverProfilesMessageBuilder;
        getRolloverProfilesMessageBuilder = new GetRolloverProfilesMessageBuilder();
        getRolloverProfilesMessageBuilder.addRolloverProfiles(this.parseRolloverProfile(data));
        responseList.add(this.createLockedMessage(getRolloverProfilesMessageBuilder.build()));
    }
    parseRolloverProfile(data) {
        let lines, i, rolloverProfilesList, rolloverProfile;
        rolloverProfilesList = new RolloverProfilesList();
        lines = this.linesParser.splitLine(data);
        for (i = 0; i <= lines.length - 1; i += 1) {
            rolloverProfile = this.rolloverProfileCsvParser.parse(lines[i]);
            if (rolloverProfile != null) {
                rolloverProfilesList.add(rolloverProfile);
            }
        }
        return rolloverProfilesList;
    }
}
module.exports = GetRolloverProfilesFxmsgReader
