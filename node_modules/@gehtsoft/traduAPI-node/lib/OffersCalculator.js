'use strict';
let LogManager = require('./LogManager.js');
let exception = require('@gehtsoft/LuaxStdlib-node').exception;
let FXConnectLiteErrorCodes = require('./FXConnectLiteErrorCodes.js');
let OffersBidAskCalculated = require('./OffersBidAskCalculated.js');
let OffersHighLowCalculated = require('./OffersHighLowCalculated.js');
class OffersCalculator {
    instrumentsProvider;
    internalOffersProvider;
    static create(instrumentsProvider) {
        let result;
        if (instrumentsProvider == null) {
            LogManager.getLogger().error("OffersCalculator.create(): instrumentsProvider is not set");
            throw exception.create(FXConnectLiteErrorCodes.CODE_REQUIRED_PARAMETER_NOT_SET, "instrumentsProvider is not set");
        }
        result = new OffersCalculator();
        result.instrumentsProvider = instrumentsProvider;
        return result;
    }
    setInternalOffersProvider(internalOffersProvider) {
        if (internalOffersProvider == null) {
            LogManager.getLogger().error("OffersCalculator.setInternalOffersProvider(): internalOffersProvider is not set");
            throw exception.create(FXConnectLiteErrorCodes.CODE_REQUIRED_PARAMETER_NOT_SET, "internalOffersProvider is not set");
        }
        this.internalOffersProvider = internalOffersProvider;
    }
    calculateBidAsk(offer) {
        let instrument, bid, ask;
        bid = 0;
        ask = 0;
        if (offer != null) {
            bid = offer.getBid();
            ask = offer.getAsk();
            instrument = this.instrumentsProvider.getInstrumentByOfferId(offer.getOfferId());
            if (instrument != null) {
                bid = bid + instrument.getBidAdjustment();
                ask = ask + instrument.getAskAdjustment();
            }
        }
        return OffersBidAskCalculated.create(bid, ask);
    }
    calculateHighLow(offer) {
        let instrument, high, low;
        high = 0;
        low = 0;
        if (offer != null) {
            high = offer.getHigh();
            low = offer.getLow();
            instrument = this.instrumentsProvider.getInstrumentByOfferId(offer.getOfferId());
            if (instrument != null) {
                high = high + instrument.getAskAdjustment();
                low = low + instrument.getBidAdjustment();
            }
        }
        return OffersHighLowCalculated.create(high, low);
    }
}
module.exports = OffersCalculator
