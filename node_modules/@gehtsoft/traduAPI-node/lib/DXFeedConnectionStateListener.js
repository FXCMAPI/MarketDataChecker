'use strict';
let LogManager = require('./LogManager.js');
let ConnectionStatus = require('./ConnectionStatus.js');
let ReconnectingMessageBuilder = require('./ReconnectingMessageBuilder.js');
let MessageType = require('./MessageType.js');
class DXFeedConnectionStateListener {
    connectionStatusManager;
    messageRouter;
    logger;
    receiveNewMessageListener;
    lastConnectionState;
    dxfeedConnection;
    constructor() {
        this.logger = LogManager.getLogger();
        this.receiveNewMessageListener = new DXFeedConnectionStateListener.ReceiveNewMessageListener(this);
    }
    static create(dxfeedConnection, connectionStatusManager, messageRouter) {
        let result;
        result = new DXFeedConnectionStateListener();
        result.connectionStatusManager = connectionStatusManager;
        result.messageRouter = messageRouter;
        result.dxfeedConnection = dxfeedConnection;
        result.subscribeOnRequiredMessages();
        dxfeedConnection.subscribeStateChange(result);
        return result;
    }
    onStateChange(state) {
        let reconnectingMessageBuilder, error;
        if (this.lastConnectionState == MessageType.Connected && state.isDisconnected()) {
            error = "DXFeed connection closed.";
            if (state.hasError()) {
                error = error + " " + state.getError().getMessage();
                this.logger.warning("DXFeed connection closed with error: '" + error + "'. Start reconnecting");
            }
            else {
                this.logger.warning("DXFeed connection closed. Start reconnecting");
            }
            this.connectionStatusManager.changeConnectionStatusWithError(ConnectionStatus.RECONNECTING, error);
            reconnectingMessageBuilder = new ReconnectingMessageBuilder();
            this.messageRouter.publishNewMessage([reconnectingMessageBuilder.build()]);
        }
    }
    stop() {
        this.dxfeedConnection.unsubscribeStateChange(this);
    }
    subscribeOnRequiredMessages() {
        this.messageRouter.subscribeNewMessageReceive(MessageType.Disconnected, this.receiveNewMessageListener);
        this.messageRouter.subscribeNewMessageReceive(MessageType.Connected, this.receiveNewMessageListener);
        this.messageRouter.subscribeNewMessageReceive(MessageType.Reconnecting, this.receiveNewMessageListener);
        if (this.connectionStatusManager.getConnectionStatus().isConnected()) {
            this.lastConnectionState = MessageType.Connected;
        }
    }
}
module.exports = DXFeedConnectionStateListener
DXFeedConnectionStateListener.ReceiveNewMessageListener = class {
    _owner_;
    constructor(_owner_) {
        this._owner_ = _owner_;
    }
    onNewMessageReceive(message) {
        this._owner_.lastConnectionState = message.getType();
    }
}
