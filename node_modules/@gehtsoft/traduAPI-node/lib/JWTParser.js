'use strict';
let LogManager = require('./LogManager.js');
let JWT = require('./JWT.js');
let stdlib = require('@gehtsoft/LuaxStdlib-node').stdlib;
let csvParser = require('@gehtsoft/LuaxStdlib-node').csvParser;
let buffer = require('@gehtsoft/LuaxStdlib-node').buffer;
let io = require('@gehtsoft/LuaxStdlib-node').io;
let jsonParser = require('@gehtsoft/LuaxStdlib-node').jsonParser;
let jsonNode = require('@gehtsoft/LuaxStdlib-node').jsonNode;
class JWTParser {
    logger;
    constructor() {
        this.logger = LogManager.getLogger();
    }
    parse(jwt) {
        let csvParserInstance, parts, text, textBuffer, root, jParser, ex, loggerInstance;
        loggerInstance = LogManager.getLogger();
        if (jwt == null || stdlib.len(jwt) == 0 || jwt == "error") {
            return JWT.create("", "", "", "", "", "", "");
        }
        csvParserInstance = new csvParser();
        csvParserInstance.valueSeparator = ".";
        parts = csvParserInstance.splitLine(jwt);
        if (parts.length != 3) {
            return JWT.create("", "", "", "", "", "", "");
        }
        text = parts[1];
        if (stdlib.len(text) == 0) {
            return JWT.create("", "", "", "", "", "", "");
        }
        try {
            textBuffer = buffer.fromBase64(text);
            text = textBuffer.getEncodedString(0, textBuffer.length(), io.CP_ANSI);
        } catch(exTemp1) {
            ex = stdlib.ensureException(exTemp1);
            loggerInstance.warning("JWTParser.parse() exception: " + ex.getMessage());
            return JWT.create("", "", "", "", "", "", "");
        }
        try {
            jParser = new jsonParser();
            root = jParser.parse(text);
        } catch(exTemp2) {
            ex = stdlib.ensureException(exTemp2);
            loggerInstance.warning("JWTParser.parse() exception: " + ex.getMessage());
            return JWT.create("", "", "", "", "", "", "");
        }
        if (root.getType() != jsonNode.OBJECT) {
            return JWT.create("", "", "", "", "", "", "");
        }
        return this.parseNode(root);
    }
    parseNode(root) {
        let tradingSessionID, tradingSessionSubID, sid, userId, userKind, login, ssoToken, node;
        tradingSessionID = "";
        tradingSessionSubID = "";
        sid = "";
        userId = "";
        userKind = "";
        login = "";
        ssoToken = "";
        node = root.getPropertyByName("TradingSessionID");
        if (node != null && node.getType() == jsonNode.STRING) {
            tradingSessionID = node.getValueAsString();
        }
        node = root.getPropertyByName("TradingSessionSubID");
        if (node != null && node.getType() == jsonNode.STRING) {
            tradingSessionSubID = node.getValueAsString();
        }
        node = root.getPropertyByName("SID");
        if (node != null && node.getType() == jsonNode.STRING) {
            sid = node.getValueAsString();
        }
        node = root.getPropertyByName("UserID");
        if (node != null && node.getType() == jsonNode.STRING) {
            userId = node.getValueAsString();
        }
        node = root.getPropertyByName("UserKind");
        if (node != null && node.getType() == jsonNode.STRING) {
            userKind = node.getValueAsString();
        }
        node = root.getPropertyByName("sub");
        if (node != null && node.getType() == jsonNode.STRING) {
            login = node.getValueAsString();
        }
        node = root.getPropertyByName("SSOToken");
        if (node != null && node.getType() == jsonNode.STRING) {
            ssoToken = node.getValueAsString();
        }
        return JWT.create(tradingSessionID, tradingSessionSubID, sid, userId, userKind, login, ssoToken);
    }
}
module.exports = JWTParser
