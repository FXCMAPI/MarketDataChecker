'use strict';
let APdasRequestMessage = require('./APdasRequestMessage.js');
let PdasMessageFieldFactory = require('./PdasMessageFieldFactory.js');
let PdasMessageSerializer = require('./PdasMessageSerializer.js');
let PdasMessageType = require('./PdasMessageType.js');
let TimeStamp = require('./TimeStamp.js');
let PdasTransportMessage = require('./PdasTransportMessage.js');
let TransportMessageType = require('./TransportMessageType.js');
let PdasMessageFieldTag = require('./PdasMessageFieldTag.js');
let PdasMessageValue = require('./PdasMessageValue.js');
let variantCast = require('@gehtsoft/LuaxStdlib-node').variantCast;
let DateTimeParser = require('./DateTimeParser.js');
let stdlib = require('@gehtsoft/LuaxStdlib-node').stdlib;
let PdasRequestCommand = require('./PdasRequestCommand.js');
let PdasConstants = require('./PdasConstants.js');
let TrailingStopType = require('./TrailingStopType.js');
class PdasCreateEntryOrderRequestMessage extends APdasRequestMessage {
    build(tradingSession, entryOrderRequest, side, clientRate, pointSize, requestNumberGenerator, transactTime, timeController) {
        let pdasMessageSerializer, factory, pdasMessage, result, timeStamp, terminalUrl;
        factory = new PdasMessageFieldFactory();
        pdasMessageSerializer = new PdasMessageSerializer();
        pdasMessage = factory.createMessage(PdasMessageType.FXCM_REQUEST);
        timeStamp = TimeStamp.create(transactTime);
        terminalUrl = tradingSession.getTradingTerminal().getUrls()[0];
        PdasCreateEntryOrderRequestMessage.fillBody(factory, pdasMessage, tradingSession, entryOrderRequest, side, clientRate, pointSize, requestNumberGenerator, timeStamp, 0, timeController);
        result = PdasTransportMessage.create(TransportMessageType.CreateOrder, this.createRequestUrl(terminalUrl), pdasMessageSerializer.serialize(pdasMessage));
        return result;
    }
    static fillBody(factory, target, tradingSession, entryOrderRequest, side, clientRate, pointSize, requestNumberGenerator, timeStamp, continuosFlag, timeController) {
        let requestId, targetList, group;
        requestId = tradingSession.getSessionId() + "-" + (requestNumberGenerator.getNextRequestNumber()).toString();
        APdasRequestMessage.fillPdasMessageItem(target, factory, tradingSession, timeStamp, requestId);
        targetList = factory.createList(PdasMessageFieldTag.FXCM_NO_PARAM);
        group = factory.createGroup();
        group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_NAME, PdasMessageValue.CLIENT_STAGE));
        group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_VALUE, "O"));
        targetList.addChild(group);
        group = factory.createGroup();
        group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_NAME, PdasMessageValue.CLIENT_OFFER_ID));
        group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_VALUE, entryOrderRequest.getOfferId()));
        targetList.addChild(group);
        group = factory.createGroup();
        group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_NAME, PdasMessageValue.CLIENT_ACCT_ID));
        group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_VALUE, entryOrderRequest.getAccountId()));
        targetList.addChild(group);
        group = factory.createGroup();
        group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_NAME, PdasMessageValue.CLIENT_BUY_SELL));
        group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_VALUE, entryOrderRequest.getBuySell()));
        targetList.addChild(group);
        group = factory.createGroup();
        group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_NAME, PdasMessageValue.CLIENT_QUANTITY));
        group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_VALUE, variantCast.castToString(variantCast.fromInt(entryOrderRequest.getAmount()))));
        targetList.addChild(group);
        if (entryOrderRequest.getRateRange() != 0.0) {
            group = factory.createGroup();
            group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_NAME, PdasMessageValue.CLIENT_RATE2));
            group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_VALUE, variantCast.castToString(variantCast.fromReal(entryOrderRequest.getRate()))));
            targetList.addChild(group);
            group = factory.createGroup();
            group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_NAME, PdasMessageValue.CLIENT_RATE3));
            group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_VALUE, variantCast.castToString(variantCast.fromReal(entryOrderRequest.getRate() + entryOrderRequest.getRateRange() * pointSize))));
            targetList.addChild(group);
            group = factory.createGroup();
            group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_NAME, PdasMessageValue.CLIENT_CLIENTRATE));
            group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_VALUE, variantCast.castToString(variantCast.fromReal(clientRate))));
            targetList.addChild(group);
        }
        else {
            group = factory.createGroup();
            group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_NAME, PdasMessageValue.CLIENT_RATE));
            group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_VALUE, variantCast.castToString(variantCast.fromReal(entryOrderRequest.getRate()))));
            targetList.addChild(group);
        }
        group = factory.createGroup();
        group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_NAME, PdasMessageValue.CLIENT_SIDE));
        group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_VALUE, side));
        targetList.addChild(group);
        if (entryOrderRequest.getTimeInForce() != null && stdlib.len(entryOrderRequest.getTimeInForce()) > 0) {
            group = factory.createGroup();
            group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_NAME, PdasMessageValue.CLIENT_TIME_IN_FORCE));
            group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_VALUE, entryOrderRequest.getTimeInForce()));
            targetList.addChild(group);
            if (entryOrderRequest.getTimeInForce() == "GTD") {
                group = factory.createGroup();
                group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_NAME, PdasMessageValue.CLIENT_EXPIRE_DT));
                group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_VALUE, DateTimeParser.toDateTimeString(timeController.toServerTime(entryOrderRequest.getExpirationDate()))));
                targetList.addChild(group);
            }
        }
        if (entryOrderRequest.getCustomId() != null && stdlib.len(entryOrderRequest.getCustomId()) > 0) {
            group = factory.createGroup();
            group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_NAME, PdasMessageValue.CLIENT_QTXT));
            group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_VALUE, entryOrderRequest.getCustomId()));
            targetList.addChild(group);
        }
        PdasCreateEntryOrderRequestMessage.processStopOrderSet(factory, entryOrderRequest, targetList);
        PdasCreateEntryOrderRequestMessage.processLimitOrderSet(factory, entryOrderRequest, targetList);
        group = factory.createGroup();
        group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_NAME, PdasMessageValue.CLIENT_QID));
        group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_VALUE, requestId));
        targetList.addChild(group);
        target.addChild(targetList);
        if (continuosFlag > 0) {
            target.addChild(factory.createIntField(PdasMessageFieldTag.FXCM_CONTINUOUS_FLAG, continuosFlag));
        }
        target.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_COMMAND_ID, PdasRequestCommand.CREATE_ORDER));
        target.addChild(factory.createStringField(PdasConstants.SID, tradingSession.getSessionId()));
    }
    static processStopOrderSet(factory, entryOrderRequest, targetList) {
        let group;
        if (entryOrderRequest.isStopOrderSet()) {
            if (entryOrderRequest.getStopPips() != 0) {
                group = factory.createGroup();
                group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_NAME, PdasMessageValue.CLIENT_STOP_PRICE_OFFSET_PIPS));
                group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_VALUE, variantCast.castToString(variantCast.fromReal(entryOrderRequest.getStopPips()))));
                targetList.addChild(group);
                group = factory.createGroup();
                group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_NAME, PdasMessageValue.CLIENT_STOP_PEG_TYPE));
                group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_VALUE, "1"));
                targetList.addChild(group);
            }
            else {
                group = factory.createGroup();
                group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_NAME, PdasMessageValue.CLIENT_STOP_RATE));
                group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_VALUE, variantCast.castToString(variantCast.fromReal(entryOrderRequest.getStopRate()))));
                targetList.addChild(group);
            }
            if (entryOrderRequest.isEnabledTrailingStop()) {
                group = factory.createGroup();
                group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_NAME, PdasMessageValue.CLIENT_TRAIL_UPDATE_PIPS_S));
                if (entryOrderRequest.getTrailingStopType() == TrailingStopType.Fixed) {
                    group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_VALUE, variantCast.castToString(variantCast.fromInt(entryOrderRequest.getTrailingStopStep()))));
                }
                else {
                    group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_VALUE, "1"));
                }
                targetList.addChild(group);
            }
        }
    }
    static processLimitOrderSet(factory, entryOrderRequest, targetList) {
        let group;
        if (entryOrderRequest.isLimitOrderSet()) {
            if (entryOrderRequest.getLimitPips() != 0) {
                group = factory.createGroup();
                group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_NAME, PdasMessageValue.CLIENT_LIMIT_PRICE_OFFSET_PIPS));
                group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_VALUE, variantCast.castToString(variantCast.fromReal(entryOrderRequest.getLimitPips()))));
                targetList.addChild(group);
                group = factory.createGroup();
                group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_NAME, PdasMessageValue.CLIENT_LIMIT_PEG_TYPE));
                group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_VALUE, "0"));
                targetList.addChild(group);
            }
            else {
                group = factory.createGroup();
                group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_NAME, PdasMessageValue.CLIENT_LIMIT_RATE));
                group.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_PARAM_VALUE, variantCast.castToString(variantCast.fromReal(entryOrderRequest.getLimitRate()))));
                targetList.addChild(group);
            }
        }
    }
}
module.exports = PdasCreateEntryOrderRequestMessage
