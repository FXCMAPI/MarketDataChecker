'use strict';
let string_map = require('@gehtsoft/LuaxStdlib-node').string_map;
let list = require('@gehtsoft/LuaxStdlib-node').list;
//@@DocBrief("class provides access to a collection of open position information")
class OpenPositionsStorage {
    storage;
    constructor() {
        this.storage = new string_map();
    }
    getAllOpenPositions() {
        let length, i, keys, openPosition, openPositions;
        keys = this.storage.keys();
        length = keys.length;
        openPositions = new Array(length);
        for (i = 0; i <= length - 1; i += 1) {
            openPosition = this.getOpenPositionByTradeId(keys[i]);
            openPositions[i] = openPosition;
        }
        return openPositions;
    }
    addOpenPosition(openPosition) {
        this.storage.set(openPosition.getTradeID(), openPosition);
    }
    removeOpenPosition(id) {
        if (this.storage.contains(id)) {
            this.storage.remove(id);
        }
    }
    getOpenPositionByAccountId(accountId) {
        return this.getInternalOpenPositionByAccountIdAndOffer(accountId, null);
    }
    getInternalOpenPositionByAccountIdAndOffer(accountId, offerId) {
        let openPositions, i, openPositionsList;
        openPositionsList = new OpenPositionsStorage.OpenPositionsList(this);
        openPositions = this.getAllOpenPositions();
        for (i = 0; i <= openPositions.length - 1; i += 1) {
            if (openPositions[i].getAccountId() == accountId && (offerId == null || openPositions[i].getOfferId() == offerId)) {
                openPositionsList.add(openPositions[i]);
            }
        }
        return openPositionsList.toArray();
    }
    getOpenPositionByTradeId(tradeId) {
        if (!this.storage.contains(tradeId)) {
            return null;
        }
        return this.storage.get(tradeId);
    }
    clear() {
        this.storage.clear();
    }
    getCount() {
        return this.storage.length();
    }
    getOpenPositionIds() {
        return this.storage.keys();
    }
}
module.exports = OpenPositionsStorage
OpenPositionsStorage.OpenPositionsList = class extends list {
    _owner_;
    constructor(_owner_) {
        super();
        this._owner_ = _owner_;
    }
    add(openPosition) {
        super.add(openPosition);
    }
    toArray() {
        let i, result;
        result = new Array(super.length());
        for (i = 0; i <= super.length() - 1; i += 1) {
            result[i] = super.get(i);
        }
        return result;
    }
}
