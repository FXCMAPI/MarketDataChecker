'use strict';
let LogManager = require('./LogManager.js');
let stdlib = require('@gehtsoft/LuaxStdlib-node').stdlib;
class UnitCostCalculator {
    leverageProfilesProvider;
    logger;
    internalOffersProvider;
    instrumentsProvider;
    static create(leverageProfilesProvider, instrumentsProvider, internalOffersProvider) {
        let instance;
        instance = new UnitCostCalculator();
        instance.leverageProfilesProvider = leverageProfilesProvider;
        instance.instrumentsProvider = instrumentsProvider;
        instance.internalOffersProvider = internalOffersProvider;
        instance.logger = LogManager.getLogger();
        return instance;
    }
    calculate(accountId, leverageProfileId, offerId, price) {
        let pnlCalculationPath, unitCost, i, items, item, offer;
        unitCost = 1;
        pnlCalculationPath = this.leverageProfilesProvider.getPLCalculationPath(accountId, leverageProfileId, offerId);
        if (pnlCalculationPath != null) {
            if (!pnlCalculationPath.isDirect()) {
                unitCost = 1 / price;
            }
            items = pnlCalculationPath.getItems();
            for (i = 0; i <= items.length - 1; i += 1) {
                item = items[i];
                offer = this.internalOffersProvider.getInternalOfferById(item.getOfferId());
                if (offer != null) {
                    unitCost = this.processOffer(offer, unitCost, item.isInverseConversion());
                }
                else {
                    this.logger.info("UnitCostCalculationProvider.calcUnitCost(): Offer not found, offerId='" + offerId + "'");
                }
            }
        }
        else {
            this.logger.info("UnitCostCalculationProvider.calcUnitCost(): PnlCalculationPath is NIL for lpId='" + leverageProfileId + "' and offerId='" + offerId + "'");
        }
        return unitCost;
    }
    processOffer(offer, unitCostSource, isInverseConversion) {
        let unitCost, averageRate, bidAsk, precision, instrument;
        unitCost = unitCostSource;
        instrument = this.instrumentsProvider.getInstrumentByOfferId(offer.getOfferId());
        if (instrument != null) {
            precision = instrument.getDigits();
            bidAsk = this.internalOffersProvider.calculateBidAsk(offer);
            averageRate = stdlib.roundInl((bidAsk.getAsk() + bidAsk.getBid()) / 2, precision);
            if (isInverseConversion) {
                unitCost = unitCost / averageRate;
            }
            else {
                unitCost = unitCost * averageRate;
            }
        }
        else {
            this.logger.info("UnitCostCalculationProvider.calcUnitCost(): Instrument not found, offerId='" + offer.getOfferId() + "'");
        }
        return unitCost;
    }
}
module.exports = UnitCostCalculator
