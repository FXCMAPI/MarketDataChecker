'use strict';
let csvParser = require('@gehtsoft/LuaxStdlib-node').csvParser;
let stdlib = require('@gehtsoft/LuaxStdlib-node').stdlib;
let AccountBuilder = require('./AccountBuilder.js');
let variantCast = require('@gehtsoft/LuaxStdlib-node').variantCast;
let DateTimeParser = require('./DateTimeParser.js');
class AccountCsvParser {
    fieldParser;
    constructor() {
        this.fieldParser = new csvParser();
        this.fieldParser.valueSeparator = ";";
    }
    parse(accountLineOriginal) {
        let parts, builder, accountLine;
        if (accountLineOriginal == null) {
            return null;
        }
        accountLine = stdlib.trim(accountLineOriginal);
        if (accountLine == "0" || stdlib.len(accountLine) == 0) {
            return null;
        }
        parts = this.fieldParser.splitLine(accountLine);
        if (parts.length < 56) {
            return null;
        }
        builder = new AccountBuilder();
        builder.setAccountId(parts[0]);
        builder.setAccountKind(parts[13]);
        builder.setAccountName(parts[7]);
        if ("!=" != parts[37]) {
            builder.setOrderAmountLimit(variantCast.castToInt(variantCast.fromString(parts[37])));
        }
        builder.setATPId(parts[52]);
        if ("!=" != parts[4]) {
            builder.setBalance(variantCast.castToReal(variantCast.fromString(parts[4])));
        }
        if ("!=" != parts[39]) {
            builder.setBaseUnitSize(variantCast.castToInt(variantCast.fromString(parts[39])));
        }
        builder.setLastMarginCallDate(DateTimeParser.parseDateTimeFromString(parts[54]));
        builder.setLeverageProfileId(parts[45]);
        if ("!=" != parts[16]) {
            builder.setM2MEquity(variantCast.castToReal(variantCast.fromString(parts[16])));
        }
        builder.setMaintenanceFlag(parts[40] == "Y");
        builder.setMaintenanceType(parts[34]);
        builder.setManagerAccountId(parts[12]);
        builder.setMarginCallFlag(parts[6]);
        builder.setRefreshProfileFlags(parts[53]);
        if ("!=" != parts[17]) {
            builder.setNonTradeEquity(variantCast.castToReal(variantCast.fromString(parts[17])));
        }
        if ("!=" != parts[35]) {
            builder.setHedgeMarginPCT(variantCast.castToReal(variantCast.fromString(parts[35])));
        }
        if ("!=" != parts[55]) {
            builder.setRolloverProfileId(parts[55]);
        }
        if (parts.length > 56 && parts[56] != "") {
            builder.setBaseCurrency(parts[56]);
            builder.setBaseCurrencyPrecision(2);
        }
        return builder.build();
    }
}
module.exports = AccountCsvParser
