'use strict';
let AFxmsgReader = require('./AFxmsgReader.js');
let csvParser = require('@gehtsoft/LuaxStdlib-node').csvParser;
let OffersCsvParser = require('./OffersCsvParser.js');
let PdasMessageFieldTag = require('./PdasMessageFieldTag.js');
let PdasMessageValue = require('./PdasMessageValue.js');
let GetOffersMessageBuilder = require('./GetOffersMessageBuilder.js');
let PdasMessageType = require('./PdasMessageType.js');
let PdasRequestCommand = require('./PdasRequestCommand.js');
let OffersList = require('./OffersList.js');
class GetOffersFxmsgReader extends AFxmsgReader {
    linesParser;
    offerCsvParser;
    constructor() {
        super();
        this.linesParser = new csvParser();
        this.linesParser.valueSeparator = "\n";
        this.offerCsvParser = new OffersCsvParser();
    }
    read(responseList, xmlRootNode, messages) {
        let data, i, messageBuilder, requestId;
        if (messages == null || messages.length == 0) {
            return;
        }
        for (i = 0; i <= messages.length - 1; i += 1) {
            if (messages[i].getType() == PdasMessageType.FXCM_RESPONSE && messages[i].getFieldValue(PdasMessageFieldTag.FXCM_COMMAND_ID) == PdasRequestCommand.GET_OFFERS) {
                data = messages[i].getList(PdasMessageFieldTag.FXCM_NO_PARAM).getGroupParamValueByParamName("DAS");
                requestId = messages[i].getList(PdasMessageFieldTag.FXCM_NO_PARAM).getGroupParamValueByParamName(PdasMessageValue.CLIENT_QID);
                if (data != null) {
                    messageBuilder = new GetOffersMessageBuilder();
                    messageBuilder.setRequestId(requestId);
                    messageBuilder.addOffers(this.parseOffers(data));
                    responseList.add(this.createLockedMessage(messageBuilder.build()));
                }
            }
        }
    }
    parseOffers(data) {
        let lines, i, offersList, offer;
        offersList = new OffersList();
        lines = this.linesParser.splitLine(data);
        for (i = 0; i <= lines.length - 1; i += 1) {
            offer = this.offerCsvParser.parse(lines[i]);
            if (offer != null) {
                offersList.add(offer);
            }
        }
        return offersList;
    }
}
module.exports = GetOffersFxmsgReader
