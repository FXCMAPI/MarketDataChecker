'use strict';
let string_map = require('@gehtsoft/LuaxStdlib-node').string_map;
let LogManager = require('./LogManager.js');
let exception = require('@gehtsoft/LuaxStdlib-node').exception;
let list = require('@gehtsoft/LuaxStdlib-node').list;
let stdlib = require('@gehtsoft/LuaxStdlib-node').stdlib;
class MessageRouter {
    listeners;
    logger;
    constructor() {
        this.listeners = new string_map();
        this.logger = LogManager.getLogger();
    }
    subscribeNewMessageReceive(messageType, listener) {
        let listenersList, isAlreadySub;
        if (messageType == null || listener == null) {
            throw exception.create(0, "messageType or listener is not defined");
        }
        if (this.listeners.contains(messageType)) {
            listenersList = this.listeners.get(messageType);
        }
        else {
            listenersList = new list();
            this.listeners.set(messageType, listenersList);
        }
        isAlreadySub = this.isAlreadySubscribed(listenersList, listener);
        if (!isAlreadySub) {
            listenersList.add(listener);
        }
    }
    unsubscribeNewMessageReceive(messageType, listener) {
        let listenersList, currentListener, i;
        if (messageType == null) {
            throw exception.create(0, "messageType is not defined");
        }
        if (listener == null) {
            return;
        }
        if (!this.listeners.contains(messageType)) {
            return;
        }
        listenersList = this.listeners.get(messageType);
        for (i = 0; i <= listenersList.length() - 1; i += 1) {
            currentListener = listenersList.get(i);
            if (listener == currentListener) {
                listenersList.remove(i);
                break;
            }
        }
    }
    publishNewMessage(messages) {
        let ex, listenerArray, message, currentListener, i, y;
        if (messages == null) {
            return;
        }
        for (i = 0; i <= messages.length - 1; i += 1) {
            message = messages[i];
            if (!this.listeners.contains(message.getType())) {
                continue;
            }
            listenerArray = this.listeners.get(message.getType()).toArray();
            for (y = 0; y <= listenerArray.length - 1; y += 1) {
                currentListener = listenerArray[y];
                try {
                    currentListener.onNewMessageReceive(message);
                } catch(exTemp1) {
                    ex = stdlib.ensureException(exTemp1);
                    this.logger.error("MessageRouter. 'onNewMessageReceive' for message type '" + message.getType() + "' throws: " + ex.getMessage());
                }
            }
        }
    }
    isAlreadySubscribed(listenersList, listener) {
        let currentListener, i;
        for (i = 0; i <= listenersList.length() - 1; i += 1) {
            currentListener = listenersList.get(i);
            if (listener == currentListener) {
                return true;
            }
        }
        return false;
    }
}
module.exports = MessageRouter
