'use strict';
let AliveController = require('./AliveController.js');
let MessageType = require('./MessageType.js');
//@@DocBrief("The class to keep the pdas price session alive")
class AlivePriceController extends AliveController {
    alivePriceControllerCallback;
    constructor() {
        super();
        this.alivePriceControllerCallback = null;
    }
    static createPriceController(sessionProvider, messageRouter, keepAliveCommand, alivePriceControllerCallback) {
        let aliveController;
        aliveController = new AlivePriceController();
        aliveController.sessionProvider = sessionProvider;
        aliveController.messageRouter = messageRouter;
        aliveController.keepAliveCommand = keepAliveCommand;
        aliveController.alivePriceControllerCallback = alivePriceControllerCallback;
        aliveController.initialize();
        return aliveController;
    }
    getLogger() {
        return this.logger;
    }
    isStarted() {
        return this.isStartedFlag;
    }
    setStartedFlag(isStartedFlag) {
        this.isStartedFlag = isStartedFlag;
    }
    stop() {
        if (this.isStartedFlag) {
            this.isStartedFlag = false;
            this.getLogger().debug("KeepAlive was stopped");
            this.keepAliveCommand.stop();
        }
    }
    createReceiveNewMessageListener() {
        let receiveNewMessageListenerInstance;
        receiveNewMessageListenerInstance = new AlivePriceController.ReceiveNewMessageListener(this);
        receiveNewMessageListenerInstance.initialize(this.sessionProvider, this.keepAliveCommand);
        this.receiveNewMessageListener = receiveNewMessageListenerInstance;
    }
    createKeepAliveCommandListener() {
        let keepAliveCommandListenerInstance;
        keepAliveCommandListenerInstance = new AlivePriceController.KeepAliveCommandListener(this);
        keepAliveCommandListenerInstance.initialize(this.keepAliveCommand, this.alivePriceControllerCallback);
        this.keepAliveCommandListener = keepAliveCommandListenerInstance;
    }
}
module.exports = AlivePriceController
AlivePriceController.KeepAliveCommandListener = class {
    keepAliveCommand;
    alivePriceControllerCallback;
    _owner_;
    constructor(_owner_) {
        this._owner_ = _owner_;
        this.keepAliveCommand = null;
    }
    initialize(keepAliveCommand, alivePriceControllerCallback) {
        this.keepAliveCommand = keepAliveCommand;
        this.alivePriceControllerCallback = alivePriceControllerCallback;
    }
    onSuccess(message) {
        return void(0);
    }
    onError(error) {
        this.keepAliveCommand.stop();
        this._owner_.getLogger().warning("KeepAlive got error: " + error);
        if (this.alivePriceControllerCallback != null) {
            this.alivePriceControllerCallback.onError(error);
        }
    }
}
AlivePriceController.ReceiveNewMessageListener = class {
    sessionProvider;
    keepAliveCommand;
    _owner_;
    constructor(_owner_) {
        this._owner_ = _owner_;
        this.sessionProvider = null;
        this.keepAliveCommand = null;
    }
    onNewMessageReceive(message) {
        let logicErrorMessage;
        this._owner_.getLogger().debug("AlivePriceController. Receive message: " + message.getType());
        if (message.getType() == MessageType.Connected && !this._owner_.isStarted()) {
            this._owner_.getLogger().debug("KeepAlive for " + this.sessionProvider.getSession().getSessionId() + " was executed");
            this._owner_.setStartedFlag(true);
            this.keepAliveCommand.setSession(this.sessionProvider.getSession());
            this.keepAliveCommand.execute();
        } else if (message.getType() == MessageType.Reconnecting) {
            this._owner_.stop();
        } else if (message.getType() == MessageType.Disconnected) {
            this._owner_.stop();
        } else if (message.getType() == MessageType.LogicError) {
            this._owner_.stop();
            logicErrorMessage = message;
            this._owner_.getLogger().error("KeepAlive was stopped due to the error: " + logicErrorMessage.getError());
            if (this._owner_.alivePriceControllerCallback != null) {
                this._owner_.alivePriceControllerCallback.onError(logicErrorMessage.getError());
            }
        }
    }
    initialize(sessionProvider, keepAliveCommand) {
        this.keepAliveCommand = keepAliveCommand;
        this.sessionProvider = sessionProvider;
    }
}
