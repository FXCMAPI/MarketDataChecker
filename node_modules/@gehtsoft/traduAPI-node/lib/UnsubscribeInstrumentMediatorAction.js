'use strict';
let CreateInstrumentChangeNotificationMessage = require('./CreateInstrumentChangeNotificationMessage.js');
class UnsubscribeInstrumentMediatorAction {
    callback;
    instrumentDescriptors;
    instrumentsStorage;
    manageOffersProvider;
    beforeCallback;
    messageRouter;
    sendInCW;
    status;
    onSuccess() {
        let i, builder, instrument, instrumentBuilder, offerId;
        for (i = 0; i <= this.instrumentDescriptors.length - 1; i += 1) {
            builder = this.instrumentDescriptors[i];
            builder.setSubscriptionStatus(this.status);
            offerId = this.instrumentDescriptors[i].getOfferId();
            instrument = this.instrumentsStorage.getInstrumentByOfferId(offerId);
            if (instrument != null) {
                instrumentBuilder = instrument;
                instrumentBuilder.setSubscriptionStatus(this.status);
                this.sendNotification(offerId);
            }
            if (this.status == "D") {
                this.manageOffersProvider.removeOfferById(offerId);
            }
        }
        if (this.callback != null) {
            this.callback.onSuccess();
        }
    }
    sendNotification(offerId) {
        if (this.sendInCW) {
            return;
        }
        this.messageRouter.publishNewMessage([CreateInstrumentChangeNotificationMessage.create(offerId)]);
    }
    onError(error, unsucceededSymbols) {
        this.beforeCallback.invoke();
        this.callback.onError(error, unsucceededSymbols);
    }
    static create(instrumentsStorage, callback, instrumentDescriptors, manageOffersProvider, beforeCallback, messageRouter, sendInCW, status) {
        let instance;
        instance = new UnsubscribeInstrumentMediatorAction();
        instance.sendInCW = sendInCW;
        instance.messageRouter = messageRouter;
        instance.instrumentsStorage = instrumentsStorage;
        instance.manageOffersProvider = manageOffersProvider;
        instance.callback = callback;
        instance.instrumentDescriptors = instrumentDescriptors;
        instance.beforeCallback = beforeCallback;
        instance.status = status;
        return instance;
    }
}
module.exports = UnsubscribeInstrumentMediatorAction
