'use strict';
let LogManager = require('./LogManager.js');
let list = require('@gehtsoft/LuaxStdlib-node').list;
let CollectionUtils = require('./CollectionUtils.js');
let exception = require('@gehtsoft/LuaxStdlib-node').exception;
let FXConnectLiteErrorCodes = require('./FXConnectLiteErrorCodes.js');
class AccountBaseSymbolsProvider {
    instrumentsProvider;
    rawAccountsProvider;
    systemSettingsProvider;
    result;
    accountsCount;
    logger;
    static create(rawAccountsProvider, systemSettingsProvider) {
        let instance;
        instance = new AccountBaseSymbolsProvider();
        instance.rawAccountsProvider = rawAccountsProvider;
        instance.systemSettingsProvider = systemSettingsProvider;
        instance.logger = LogManager.getLogger();
        instance.result = null;
        instance.accountsCount = 0;
        return instance;
    }
    setInstrumentsProvider(instrumentsProvider) {
        this.instrumentsProvider = instrumentsProvider;
    }
    getBaseSymbols() {
        let systemBase, accounts, i, symbolsList;
        accounts = this.rawAccountsProvider.getAllAccounts();
        if (this.result != null && accounts.length == this.accountsCount) {
            return this.result;
        }
        symbolsList = new list();
        systemBase = this.systemSettingsProvider.getBaseCurrency();
        for (i = 0; i <= accounts.length - 1; i += 1) {
            this.findSymbolsForAccount(symbolsList, systemBase, accounts[i]);
        }
        this.accountsCount = accounts.length;
        this.result = CollectionUtils.stringListToArray(symbolsList);
        return this.result;
    }
    findSymbolsForAccount(symbolsList, systemBase, account) {
        let accountBase, symbol;
        accountBase = account.getBaseCurrency();
        if (systemBase == accountBase) {
            return;
        }
        symbol = this.findAvailableCombination(accountBase, systemBase);
        if (symbol != null) {
            CollectionUtils.addStringToList(symbolsList, symbol);
            return;
        }
        this.findPartOfCrossCourses(symbolsList, systemBase, "USD");
        this.findPartOfCrossCourses(symbolsList, accountBase, "USD");
    }
    findPartOfCrossCourses(symbolsList, base, crossCurrency) {
        let symbol, errorText;
        symbol = this.findAvailableCombination(base, crossCurrency);
        if (symbol != null) {
            CollectionUtils.addStringToList(symbolsList, symbol);
        }
        else {
            errorText = "AccountBaseSymbolsProvider.findPartOfCrossCourses(): Instrument not found for currency pair: '" + base + "' and '" + crossCurrency + "'";
            this.logger.error(errorText);
            throw exception.create(FXConnectLiteErrorCodes.CODE_INSTRUMENT_IS_NOT_FOUND, errorText);
        }
    }
    findAvailableCombination(currency1, currency2) {
        let instrumentDescriptor, combinations, i;
        combinations = [currency1 + "/" + currency2, currency2 + "/" + currency1];
        for (i = 0; i <= combinations.length - 1; i += 1) {
            instrumentDescriptor = this.instrumentsProvider.getInstrumentDescriptorBySymbol(combinations[i]);
            if (instrumentDescriptor != null) {
                return instrumentDescriptor.getSymbol();
            }
        }
        return null;
    }
}
module.exports = AccountBaseSymbolsProvider
