'use strict';
let string_map = require('@gehtsoft/LuaxStdlib-node').string_map;
let list = require('@gehtsoft/LuaxStdlib-node').list;
let StringValueObject = require('./StringValueObject.js');
let stdlib = require('@gehtsoft/LuaxStdlib-node').stdlib;
let PdasMessageFieldTag = require('./PdasMessageFieldTag.js');
class PdasMessageItemWithChild {
    children;
    groups;
    fields;
    count;
    childrenKeys;
    constructor() {
        this.children = new string_map();
        this.groups = new list();
        this.fields = new list();
        this.childrenKeys = new list();
        this.count = 0;
    }
    addChild(item) {
        let field, listInstance, group, name;
        this.count = this.count + 1;
        if (item.getElementType() == "f") {
            field = item;
            this.fields.add(field);
            name = "f" + field.getName();
            this.childrenKeys.add(StringValueObject.create(name));
            this.children.set(name, field);
        } else if (item.getElementType() == "l") {
            listInstance = item;
            name = "l" + listInstance.getName();
            this.childrenKeys.add(StringValueObject.create(name));
            this.children.set(name, listInstance);
        } else if (item.getElementType() == "g") {
            group = item;
            this.groups.add(group);
            if (group.getName() == null || stdlib.len(group.getName()) == 0) {
                name = "g#" + (this.count).toString();
                this.childrenKeys.add(StringValueObject.create(name));
                this.children.set(name, group);
            }
            else {
                name = "g" + group.getName();
                this.childrenKeys.add(StringValueObject.create(name));
                this.children.set(name, group);
            }
        }
    }
    getFieldValue(name) {
        if (this.children.contains("f" + name)) {
            return this.children.get("f" + name).getValue();
        }
        return null;
    }
    getList(name) {
        if (this.children.contains("l" + name)) {
            return this.children.get("l" + name);
        }
        return null;
    }
    getGroupParamValueByParamName(name) {
        if (this.children.contains("g" + name)) {
            return this.children.get("g" + name).getFieldValue(PdasMessageFieldTag.FXCM_PARAM_VALUE);
        }
        return null;
    }
    getFields() {
        return this.fields;
    }
    getGroups() {
        return this.groups;
    }
    length() {
        return this.children.length();
    }
    getElementType() {
        return "";
    }
    serialize() {
        let i, item, key, result;
        result = "";
        for (i = 0; i <= this.childrenKeys.length() - 1; i += 1) {
            key = this.childrenKeys.get(i).get();
            item = this.children.get(key);
            result = result + item.serialize();
        }
        return result;
    }
}
module.exports = PdasMessageItemWithChild
