'use strict';
let PdasMessageType = require('./PdasMessageType.js');
let TimeStamp = require('./TimeStamp.js');
let PdasMessageFieldTag = require('./PdasMessageFieldTag.js');
let RequestIDSaltGenerator = require('./RequestIDSaltGenerator.js');
let stdlib = require('@gehtsoft/LuaxStdlib-node').stdlib;
class APdasRequestMessage {
    static createMessage(factory, tradingSession, transactTime, requestId) {
        let pdasMessage, timeStamp;
        pdasMessage = factory.createMessage(PdasMessageType.FXCM_REQUEST);
        timeStamp = TimeStamp.create(transactTime);
        APdasRequestMessage.fillPdasMessageItem(pdasMessage, factory, tradingSession, timeStamp, requestId);
        return pdasMessage;
    }
    static fillPdasMessageItem(target, factory, tradingSession, timeStamp, requestId) {
        target.addChild(factory.createStringField(PdasMessageFieldTag.TEST_REQUEST_ID, requestId));
        target.addChild(factory.createStringField(PdasMessageFieldTag.TRADING_SESSION_ID, tradingSession.getTradingTerminal().getId()));
        APdasRequestMessage.addSaltedRequestIdIfRequired(tradingSession, requestId, target, factory);
        target.addChild(factory.createStringField(PdasMessageFieldTag.MSG_TYPE, PdasMessageType.FXCM_REQUEST));
        if (timeStamp != null) {
            target.addChild(factory.createStringField(PdasMessageFieldTag.TRANSACT_TIME, timeStamp.getTimeStampString()));
        }
        target.addChild(factory.createStringField(PdasMessageFieldTag.TRADING_SESSION_SUB_ID, tradingSession.getTradingTerminal().getSubId()));
    }
    static addSaltedRequestIdIfRequired(tradingSession, requestId, target, factory) {
        let saltGenerator, pdasSessionOptions, optionValue, tokenKey, saltedRequestID;
        if (tradingSession.getOptions() != null) {
            pdasSessionOptions = tradingSession.getOptions();
            optionValue = pdasSessionOptions.getOption("validate-request-signature");
            if (optionValue != null && optionValue == "true") {
                tokenKey = pdasSessionOptions.getOption("TokenKey");
                if (tokenKey != null) {
                    saltGenerator = new RequestIDSaltGenerator();
                    saltedRequestID = saltGenerator.generate(requestId, tokenKey);
                    target.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_MSG_ID_EXT, saltedRequestID));
                }
            }
        }
    }
    createRequestUrl(terminalUrl) {
        let servletPdasParam, servletPdas, terminalUrlStr;
        servletPdasParam = terminalUrl.getParam("http-servlet-path");
        if (servletPdasParam == null || stdlib.len(servletPdasParam) == 0) {
            servletPdas = "/servlet/pdas";
        }
        else {
            servletPdas = servletPdasParam;
        }
        terminalUrlStr = terminalUrl.getUrl();
        if (terminalUrl.isSecure() && stdlib.indexOf(terminalUrlStr, "https", true) == -1) {
            terminalUrlStr = "https" + stdlib.right(terminalUrlStr, stdlib.len(terminalUrlStr) - 4);
        }
        return terminalUrlStr + servletPdas;
    }
}
module.exports = APdasRequestMessage
