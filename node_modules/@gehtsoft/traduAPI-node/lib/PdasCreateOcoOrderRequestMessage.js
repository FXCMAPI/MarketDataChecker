'use strict';
let APdasBatchRequestMessage = require('./APdasBatchRequestMessage.js');
let PdasMessageFieldFactory = require('./PdasMessageFieldFactory.js');
let PdasMessageSerializer = require('./PdasMessageSerializer.js');
let PdasConstants = require('./PdasConstants.js');
let PdasMessageFieldTag = require('./PdasMessageFieldTag.js');
let PdasRequestCommand = require('./PdasRequestCommand.js');
let PdasCreateEntryOrderRequestMessage = require('./PdasCreateEntryOrderRequestMessage.js');
let PdasTransportMessage = require('./PdasTransportMessage.js');
let TransportMessageType = require('./TransportMessageType.js');
class PdasCreateOcoOrderRequestMessage extends APdasBatchRequestMessage {
    build(tradingSession, entryOrderRequest, side, clientRate, pointSize, requestNumberGenerator, transactTime, timeController) {
        let pdasMessageSerializer, factory, pdasMessage, result, requestId, terminalUrl, targetList, group, i;
        factory = new PdasMessageFieldFactory();
        pdasMessageSerializer = new PdasMessageSerializer();
        requestId = tradingSession.getSessionId() + "-" + (requestNumberGenerator.getNextRequestNumber()).toString();
        terminalUrl = tradingSession.getTradingTerminal().getUrls()[0];
        pdasMessage = APdasBatchRequestMessage.createBatchMessage(PdasConstants.CONTINGENCY_TYPE_OCO, factory, tradingSession, transactTime, requestId);
        pdasMessage.addChild(factory.createStringField(PdasMessageFieldTag.FXCM_COMMAND_ID, PdasRequestCommand.CREATE_ORDER));
        targetList = factory.createList(PdasMessageFieldTag.FXCM_EMB_MSG);
        for (i = 0; i <= entryOrderRequest.length - 1; i += 1) {
            group = factory.createGroup();
            PdasCreateEntryOrderRequestMessage.fillBody(factory, group, tradingSession, entryOrderRequest[i], side[i], clientRate[i], pointSize[i], requestNumberGenerator, null, i + 1, timeController);
            targetList.addChild(group);
        }
        pdasMessage.addChild(targetList);
        pdasMessage.addChild(factory.createIntField(PdasMessageFieldTag.BATCH_RESPONSE, 0));
        pdasMessage.addChild(factory.createStringField(PdasConstants.SID, tradingSession.getSessionId()));
        result = PdasTransportMessage.create(TransportMessageType.CreateOrder, this.createRequestUrl(terminalUrl), pdasMessageSerializer.serialize(pdasMessage));
        return result;
    }
}
module.exports = PdasCreateOcoOrderRequestMessage
