'use strict';
let OrderUpdate = require('./OrderUpdate.js');
let OrderBuilder = require('./OrderBuilder.js');
let FieldChangeChecker = require('./FieldChangeChecker.js');
let variantCast = require('@gehtsoft/LuaxStdlib-node').variantCast;
let DateTimeParser = require('./DateTimeParser.js');
class OrderUpdateBuilder extends OrderUpdate {
    orderBuilder;
    constructor() {
        super();
        this.orderBuilder = new OrderBuilder();
    }
    setOrderId(value) {
        this.orderIdChanged = false;
        if (FieldChangeChecker.isFieldChange(value)) {
            this.orderBuilder.setOrderId(value);
            this.orderIdChanged = true;
        }
    }
    setRequestId(value) {
        this.requestIdChanged = false;
        if (FieldChangeChecker.isFieldChange(value)) {
            this.orderBuilder.setRequestId(value);
            this.requestIdChanged = true;
        }
    }
    setRate(value) {
        this.rateChanged = false;
        if (FieldChangeChecker.isFieldChange(value)) {
            if (value == "") {
                this.orderBuilder.setRate(0.0);
            }
            else {
                this.orderBuilder.setRate(variantCast.castToReal(variantCast.fromString(value)));
            }
            this.rateChanged = true;
        }
    }
    setExecutionRate(value) {
        this.executionRateChanged = false;
        if (FieldChangeChecker.isFieldChange(value)) {
            if (value == "") {
                this.orderBuilder.setExecutionRate(0.0);
            }
            else {
                this.orderBuilder.setExecutionRate(variantCast.castToReal(variantCast.fromString(value)));
            }
            this.executionRateChanged = true;
        }
    }
    setRateMin(value) {
        this.rateMinChanged = false;
        if (FieldChangeChecker.isFieldChange(value)) {
            if (value == "") {
                this.orderBuilder.setRateMin(0.0);
            }
            else {
                this.orderBuilder.setRateMin(variantCast.castToReal(variantCast.fromString(value)));
            }
            this.rateMinChanged = true;
        }
    }
    setRateMax(value) {
        this.rateMaxChanged = false;
        if (FieldChangeChecker.isFieldChange(value)) {
            if (value == "") {
                this.orderBuilder.setRateMax(0.0);
            }
            else {
                this.orderBuilder.setRateMax(variantCast.castToReal(variantCast.fromString(value)));
            }
            this.rateMaxChanged = true;
        }
    }
    setTradeId(value) {
        this.tradeIdChanged = false;
        if (FieldChangeChecker.isFieldChange(value)) {
            this.orderBuilder.setTradeId(value);
            this.tradeIdChanged = true;
        }
    }
    setAccountId(value) {
        this.accountIdChanged = false;
        if (FieldChangeChecker.isFieldChange(value)) {
            this.orderBuilder.setAccountId(value);
            this.accountIdChanged = true;
        }
    }
    setAccountName(value) {
        this.accountNameChanged = false;
        if (FieldChangeChecker.isFieldChange(value)) {
            this.orderBuilder.setAccountName(value);
            this.accountNameChanged = true;
        }
    }
    setOfferId(value) {
        this.offerIdChanged = false;
        if (FieldChangeChecker.isFieldChange(value)) {
            this.orderBuilder.setOfferId(value);
            this.offerIdChanged = true;
        }
    }
    setNetQuantity(value) {
        this.netQuantityChanged = false;
        if (FieldChangeChecker.isFieldChange(value)) {
            this.orderBuilder.setNetQuantity("Y" == value);
            this.netQuantityChanged = true;
        }
    }
    setBuySell(value) {
        this.buySellChanged = false;
        if (FieldChangeChecker.isFieldChange(value)) {
            this.orderBuilder.setBuySell(value);
            this.buySellChanged = true;
        }
    }
    setStage(value) {
        this.stageChanged = false;
        if (FieldChangeChecker.isFieldChange(value)) {
            this.orderBuilder.setStage(value);
            this.stageChanged = true;
        }
    }
    setType(value) {
        this.typeChanged = false;
        if (FieldChangeChecker.isFieldChange(value)) {
            this.orderBuilder.setType(value);
            this.typeChanged = true;
        }
    }
    setStatus(value) {
        this.statusChanged = false;
        if (FieldChangeChecker.isFieldChange(value)) {
            this.orderBuilder.setStatus(value);
            this.statusChanged = true;
        }
    }
    setStatusTime(value) {
        this.statusTimeChanged = false;
        if (FieldChangeChecker.isFieldChange(value)) {
            this.orderBuilder.setStatusTime(DateTimeParser.parseDateTimeFromString(value));
            this.statusTimeChanged = true;
        }
    }
    setAmount(value) {
        this.amountChanged = false;
        if (FieldChangeChecker.isFieldChange(value)) {
            if (value == "") {
                this.orderBuilder.setAmount(Math.trunc(0.0));
            }
            else {
                this.orderBuilder.setAmount(variantCast.castToInt(variantCast.fromString(value)));
            }
            this.amountChanged = true;
        }
    }
    setLifetime(value) {
        this.lifetimeChanged = false;
        if (FieldChangeChecker.isFieldChange(value)) {
            if (value == "") {
                this.orderBuilder.setLifetime(0.0);
            }
            else {
                this.orderBuilder.setLifetime(variantCast.castToReal(variantCast.fromString(value)));
            }
            this.lifetimeChanged = true;
        }
    }
    setAtMarket(value) {
        this.atMarketChanged = false;
        if (FieldChangeChecker.isFieldChange(value)) {
            if (value == "") {
                this.orderBuilder.setAtMarket(0.0);
            }
            else {
                this.orderBuilder.setAtMarket(variantCast.castToReal(variantCast.fromString(value)));
            }
            this.atMarketChanged = true;
        }
    }
    setTrailStep(value) {
        this.trailStepChanged = false;
        if (FieldChangeChecker.isFieldChange(value)) {
            if (value == "") {
                this.orderBuilder.setTrailStep(Math.trunc(0.0));
            }
            else {
                this.orderBuilder.setTrailStep(variantCast.castToInt(variantCast.fromString(value)));
            }
            this.trailStepChanged = true;
        }
    }
    setTrailRate(value) {
        this.trailRateChanged = false;
        if (FieldChangeChecker.isFieldChange(value)) {
            if (value == "") {
                this.orderBuilder.setTrailRate(0.0);
            }
            else {
                this.orderBuilder.setTrailRate(variantCast.castToReal(variantCast.fromString(value)));
            }
            this.trailRateChanged = true;
        }
    }
    setTimeInForce(value) {
        this.timeInForceChanged = false;
        if (FieldChangeChecker.isFieldChange(value)) {
            this.orderBuilder.setTimeInForce(value);
            this.timeInForceChanged = true;
        }
    }
    setAccountKind(value) {
        this.accountKindChanged = false;
        if (FieldChangeChecker.isFieldChange(value)) {
            this.orderBuilder.setAccountKind(value);
            this.accountKindChanged = true;
        }
    }
    setRequestTxt(value) {
        this.requestTxtChanged = false;
        if (FieldChangeChecker.isFieldChange(value)) {
            this.orderBuilder.setRequestTxt(value);
            this.requestTxtChanged = true;
        }
    }
    setContingentOrderID(value) {
        this.contingentOrderIDChanged = false;
        if (FieldChangeChecker.isFieldChange(value)) {
            this.orderBuilder.setContingentOrderID(value);
            this.contingentOrderIDChanged = true;
        }
    }
    setContingencyType(value) {
        this.contingencyTypeChanged = false;
        if (FieldChangeChecker.isFieldChange(value)) {
            if (value == "") {
                this.orderBuilder.setContingencyType(Math.trunc(0.0));
            }
            else {
                this.orderBuilder.setContingencyType(variantCast.castToInt(variantCast.fromString(value)));
            }
            this.contingencyTypeChanged = true;
        }
    }
    setPrimaryId(value) {
        this.primaryIdChanged = false;
        if (FieldChangeChecker.isFieldChange(value)) {
            this.orderBuilder.setPrimaryId(value);
            this.primaryIdChanged = true;
        }
    }
    setOriginAmount(value) {
        this.originAmountChanged = false;
        if (FieldChangeChecker.isFieldChange(value)) {
            if (value == "") {
                this.orderBuilder.setOriginAmount(Math.trunc(0.0));
            }
            else {
                this.orderBuilder.setOriginAmount(variantCast.castToInt(variantCast.fromString(value)));
            }
            this.originAmountChanged = true;
        }
    }
    setFilledAmount(value) {
        this.filledAmountChanged = false;
        if (FieldChangeChecker.isFieldChange(value)) {
            if (value == "") {
                this.orderBuilder.setFilledAmount(Math.trunc(0.0));
            }
            else {
                this.orderBuilder.setFilledAmount(variantCast.castToInt(variantCast.fromString(value)));
            }
            this.filledAmountChanged = true;
        }
    }
    setWorkingIndicator(value) {
        this.workingIndicatorChanged = false;
        if (FieldChangeChecker.isFieldChange(value)) {
            this.orderBuilder.setWorkingIndicator("Y" == value);
            this.workingIndicatorChanged = true;
        }
    }
    setPegType(value) {
        this.pegTypeChanged = false;
        if (FieldChangeChecker.isFieldChange(value)) {
            this.orderBuilder.setPegType(value);
            if (value == "0") {
                this.orderBuilder.setPegType("O");
            }
            if (value == "1") {
                this.orderBuilder.setPegType("M");
            }
            this.pegTypeChanged = true;
        }
    }
    setPegOffset(value) {
        this.pegOffsetChanged = false;
        if (FieldChangeChecker.isFieldChange(value)) {
            if (value == "") {
                this.orderBuilder.setPegOffset(0.0);
            }
            else {
                this.orderBuilder.setPegOffset(variantCast.castToReal(variantCast.fromString(value)));
            }
            this.pegOffsetChanged = true;
        }
    }
    setPegOffsetMin(value) {
        this.pegOffsetMinChanged = false;
        if (FieldChangeChecker.isFieldChange(value)) {
            if (value == "") {
                this.orderBuilder.setPegOffsetMin(0.0);
            }
            else {
                this.orderBuilder.setPegOffsetMin(variantCast.castToReal(variantCast.fromString(value)));
            }
            this.pegOffsetMinChanged = true;
        }
    }
    setPegOffsetMax(value) {
        this.pegOffsetMaxChanged = false;
        if (FieldChangeChecker.isFieldChange(value)) {
            if (value == "") {
                this.orderBuilder.setPegOffsetMax(0.0);
            }
            else {
                this.orderBuilder.setPegOffsetMax(variantCast.castToReal(variantCast.fromString(value)));
            }
            this.pegOffsetMaxChanged = true;
        }
    }
    setExpireDate(value) {
        this.expireDateChanged = false;
        if (FieldChangeChecker.isFieldChange(value)) {
            this.orderBuilder.setExpireDate(DateTimeParser.parseDateTimeFromString(value));
            this.expireDateChanged = true;
        }
    }
    setValueDate(value) {
        this.valueDateChanged = false;
        if (FieldChangeChecker.isFieldChange(value)) {
            this.orderBuilder.setValueDate(value);
            this.valueDateChanged = true;
        }
    }
    setParties(value) {
        this.partiesChanged = false;
        if (FieldChangeChecker.isFieldChange(value)) {
            this.orderBuilder.setParties(value);
            this.partiesChanged = true;
        }
    }
    setSide(value) {
        this.sideChanged = false;
        if (FieldChangeChecker.isFieldChange(value)) {
            if (value == "") {
                this.orderBuilder.setSide(Math.trunc(0.0));
            }
            else {
                this.orderBuilder.setSide(variantCast.castToInt(variantCast.fromString(value)));
            }
            this.sideChanged = true;
        }
    }
    setStop(value) {
        this.stopChanged = false;
        if (FieldChangeChecker.isFieldChange(value)) {
            if (value == "") {
                this.orderBuilder.setStop(0.0);
            }
            else {
                this.orderBuilder.setStop(variantCast.castToReal(variantCast.fromString(value)));
            }
            this.stopChanged = true;
        }
    }
    setLimit(value) {
        this.limitChanged = false;
        if (FieldChangeChecker.isFieldChange(value)) {
            if (value == "") {
                this.orderBuilder.setLimit(0.0);
            }
            else {
                this.orderBuilder.setLimit(variantCast.castToReal(variantCast.fromString(value)));
            }
            this.limitChanged = true;
        }
    }
    setStopOrderId(value) {
        this.stopOrderIdChanged = false;
        if (FieldChangeChecker.isFieldChange(value)) {
            this.orderBuilder.setStopOrderId(value);
            this.stopOrderIdChanged = true;
        }
    }
    setLimitOrderId(value) {
        this.limitOrderIdChanged = false;
        if (FieldChangeChecker.isFieldChange(value)) {
            this.orderBuilder.setLimitOrderId(value);
            this.limitOrderIdChanged = true;
        }
    }
    setTypeStop(value) {
        this.typeStopChanged = false;
        if (FieldChangeChecker.isFieldChange(value)) {
            if (value == "") {
                this.orderBuilder.setTypeStop(Math.trunc(0.0));
            }
            else {
                this.orderBuilder.setTypeStop(variantCast.castToInt(variantCast.fromString(value)));
            }
            this.typeStopChanged = true;
        }
    }
    setTypeLimit(value) {
        this.typeLimitChanged = false;
        if (FieldChangeChecker.isFieldChange(value)) {
            if (value == "") {
                this.orderBuilder.setTypeLimit(Math.trunc(0.0));
            }
            else {
                this.orderBuilder.setTypeLimit(variantCast.castToInt(variantCast.fromString(value)));
            }
            this.typeLimitChanged = true;
        }
    }
    setStopTrailStep(value) {
        this.stopTrailStepChanged = false;
        if (FieldChangeChecker.isFieldChange(value)) {
            if (value == "") {
                this.orderBuilder.setStopTrailStep(Math.trunc(0.0));
            }
            else {
                this.orderBuilder.setStopTrailStep(variantCast.castToInt(variantCast.fromString(value)));
            }
            this.stopTrailStepChanged = true;
        }
    }
    setStopTrailRate(value) {
        this.stopTrailRateChanged = false;
        if (FieldChangeChecker.isFieldChange(value)) {
            if (value == "") {
                this.orderBuilder.setStopTrailRate(0.0);
            }
            else {
                this.orderBuilder.setStopTrailRate(variantCast.castToReal(variantCast.fromString(value)));
            }
            this.stopTrailRateChanged = true;
        }
    }
    build() {
        this.order = this.orderBuilder.build();
        return this;
    }
}
module.exports = OrderUpdateBuilder
