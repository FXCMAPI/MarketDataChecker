'use strict';
let logger = require('@gehtsoft/LuaxStdlib-node').logger;
let exception = require('@gehtsoft/LuaxStdlib-node').exception;
let FXConnectLiteErrorCodes = require('./FXConnectLiteErrorCodes.js');
class DividendsProvider {
    toAccountCCYConverter;
    static create(toAccountCCYConverter) {
        let instance;
        instance = new DividendsProvider();
        instance.toAccountCCYConverter = toAccountCCYConverter;
        return instance;
    }
    getDividendBuy(instrument, account) {
        return this.getDividend(instrument, account, true);
    }
    getDividendSell(instrument, account) {
        return this.getDividend(instrument, account, false);
    }
    getDividend(instrument, account, isBuy) {
        let dividend;
        if (instrument == null) {
            logger.error("DividendsProvider.getDividend(): instrument is not set");
            throw exception.create(FXConnectLiteErrorCodes.CODE_REQUIRED_PARAMETER_NOT_SET, "instrument is not set");
        }
        if (account == null) {
            logger.error("DividendsProvider.getDividend(): account is not set");
            throw exception.create(FXConnectLiteErrorCodes.CODE_REQUIRED_PARAMETER_NOT_SET, "account is not set");
        }
        dividend = 0.0;
        if (isBuy) {
            if (instrument.hasDividendBuy()) {
                dividend = instrument.getDividendBuy();
            }
        }
        else {
            if (instrument.hasDividendSell()) {
                dividend = instrument.getDividendSell();
            }
        }
        if (dividend == 0.0) {
            return 0.0;
        }
        return this.toAccountCCYConverter.convert(instrument.getContractCurrency(), dividend, account, "DividendsProvider.getDividend()");
    }
}
module.exports = DividendsProvider
