'use strict';
let csvParser = require('@gehtsoft/LuaxStdlib-node').csvParser;
let list = require('@gehtsoft/LuaxStdlib-node').list;
let stdlib = require('@gehtsoft/LuaxStdlib-node').stdlib;
let AccountCommissionBuilder = require('./AccountCommissionBuilder.js');
class AccountCommissionsCsvParser {
    fieldParserFirst;
    fieldParserSecond;
    fieldParserThird;
    constructor() {
        this.fieldParserFirst = new csvParser();
        this.fieldParserFirst.valueSeparator = ";";
        this.fieldParserSecond = new csvParser();
        this.fieldParserSecond.valueSeparator = "|";
        this.fieldParserThird = new csvParser();
        this.fieldParserThird.valueSeparator = ",";
    }
    parse(line) {
        let parts, i, resultList, result, accountCommissionLine;
        if (line == null) {
            return null;
        }
        resultList = new list();
        accountCommissionLine = stdlib.trim(line);
        if (accountCommissionLine == "0" || stdlib.len(accountCommissionLine) == 0) {
            return null;
        }
        parts = this.fieldParserFirst.splitLine(accountCommissionLine);
        if (this.checkParts(parts)) {
            resultList = this.createResultList(parts);
            result = new Array(resultList.length());
            for (i = 0; i <= resultList.length() - 1; i += 1) {
                result[i] = resultList.get(i);
            }
            return result;
        }
        return new Array(0);
    }
    checkParts(parts) {
        return parts.length > 1 && stdlib.len(parts[0]) > 0 && stdlib.len(parts[1]) > 0;
    }
    createResultList(parts) {
        let resultList, accountCommissionLine, offerId, commissionsParts, i;
        resultList = new list();
        offerId = parts[0];
        accountCommissionLine = parts[1];
        commissionsParts = this.fieldParserSecond.splitLine(accountCommissionLine);
        for (i = 0; i <= commissionsParts.length - 1; i += 1) {
            accountCommissionLine = commissionsParts[i];
            if (stdlib.len(accountCommissionLine) > 0) {
                resultList.add(this.createAccountCommission(offerId, accountCommissionLine));
            }
        }
        return resultList;
    }
    createAccountCommission(offerId, accountCommissionLine) {
        let parts, builder;
        builder = new AccountCommissionBuilder();
        builder.setOfferId(offerId);
        parts = this.fieldParserThird.splitLine(accountCommissionLine);
        if (stdlib.len(parts[0]) > 0) {
            builder.setATPId(parts[0]);
        }
        if (stdlib.len(parts[1]) > 0) {
            builder.setMerchantLinkId(parts[1]);
        }
        if (stdlib.len(parts[2]) > 0) {
            builder.setComStageString(parts[2]);
        }
        if (stdlib.len(parts[3]) > 0) {
            builder.setComTypeString(parts[3]);
        }
        if (stdlib.len(parts[4]) > 0) {
            builder.setRebateAmount(parts[4]);
        }
        if (stdlib.len(parts[5]) > 0) {
            builder.setMinCharge(parts[5]);
        }
        if (stdlib.len(parts[6]) > 0) {
            builder.setLType(parts[6]);
        }
        if (stdlib.len(parts[7]) > 0) {
            builder.setDiscountAmount(parts[7]);
        }
        return builder.build();
    }
}
module.exports = AccountCommissionsCsvParser
