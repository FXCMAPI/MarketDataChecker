'use strict';
let LogManager = require('./LogManager.js');
let csvParser = require('@gehtsoft/LuaxStdlib-node').csvParser;
let string_map = require('@gehtsoft/LuaxStdlib-node').string_map;
let CommonPublisher = require('./CommonPublisher.js');
let UserKind = require('./UserKind.js');
let MessageType = require('./MessageType.js');
let exception = require('@gehtsoft/LuaxStdlib-node').exception;
let FXConnectLiteErrorCodes = require('./FXConnectLiteErrorCodes.js');
let stdlib = require('@gehtsoft/LuaxStdlib-node').stdlib;
let StringValueObject = require('./StringValueObject.js');
let StringUtil = require('./StringUtil.js');
let ReportType = require('./ReportType.js');
//@@DocBrief("The class to get system properties")
class SystemPropertiesController {
    messageRouter;
    receiveNewMessageListener;
    ssoTokenController;
    sessionProvider;
    logger;
    data;
    valueParser;
    refreshPublisher;
    propertyUpdatedPublisher;
    userKind;
    constructor() {
        this.logger = LogManager.getLogger();
        this.valueParser = new csvParser();
        this.data = new string_map();
        this.refreshPublisher = new CommonPublisher();
        this.propertyUpdatedPublisher = new CommonPublisher();
        this.userKind = UserKind.create("");
    }
    static create(messageRouter, ssoTokenController, sessionProvider) {
        let systemPropertiesController;
        systemPropertiesController = new SystemPropertiesController();
        systemPropertiesController.messageRouter = messageRouter;
        systemPropertiesController.ssoTokenController = ssoTokenController;
        systemPropertiesController.sessionProvider = sessionProvider;
        systemPropertiesController.createReceiveNewMessageListener();
        messageRouter.subscribeNewMessageReceive(MessageType.SystemProperties, systemPropertiesController.receiveNewMessageListener);
        messageRouter.subscribeNewMessageReceive(MessageType.SystemPropertyUpdateMessage, systemPropertiesController.receiveNewMessageListener);
        messageRouter.subscribeNewMessageReceive(MessageType.GetTradingSession, systemPropertiesController.receiveNewMessageListener);
        return systemPropertiesController;
    }
    subscribeLoaded(listener) {
        this.refreshPublisher.subscribe(listener);
    }
    unsubscribeLoaded(listener) {
        this.refreshPublisher.unsubscribe(listener);
    }
    subscribeSystemPropertyChange(listener) {
        if (listener == null) {
            this.logger.error("OffersManager.subscribeOfferChange(): listener is not set");
            throw exception.create(FXConnectLiteErrorCodes.CODE_REQUIRED_PARAMETER_NOT_SET, "listener is not set");
        }
        this.propertyUpdatedPublisher.subscribe(listener);
    }
    unsubscribeSystemPropertyChange(listener) {
        if (listener == null) {
            this.logger.error("OffersManager.unsubscribeOfferChange(): listener is not set");
            throw exception.create(FXConnectLiteErrorCodes.CODE_REQUIRED_PARAMETER_NOT_SET, "listener is not set");
        }
        this.propertyUpdatedPublisher.unsubscribe(listener);
    }
    getPropertyByName(name) {
        if (this.data == null) {
            return null;
        }
        if (this.data.contains(name)) {
            return this.data.get(name).get();
        }
        return "";
    }
    getReportUrl(account, from, to, type, format, langID, callback) {
        let successAction;
        successAction = SystemPropertiesController.GetReportUrlAction.createAction(this.getPropertyByName("REPORTS_URL"), this.sessionProvider.getSession().getTradingTerminal().getSubId(), account, from, to, type, format, langID);
        this.ssoTokenController.getSsoToken(SystemPropertiesController.GetTokenCallback.create(successAction, callback));
    }
    getAccountUrl(callback) {
        let successAction;
        successAction = SystemPropertiesController.GetAccountUrlAction.createAction(this.findAccountUrl(), this.sessionProvider.getSession().getTradingTerminal().getSubId());
        this.ssoTokenController.getSsoToken(SystemPropertiesController.GetTokenCallback.create(successAction, callback));
    }
    getPushBindURL() {
        return this.findUrlByGuid("D74616A9-1241-45FC-998D-7032D9EDA498");
    }
    getPush2URL() {
        return this.findUrlByGuid("55AF7054-D867-4713-98EC-21DAE9912255");
    }
    getApplyNowURL() {
        return this.findUrlByGuid("F91D5C83-967E-4580-B45E-D969EE69CB71");
    }
    getUserKind() {
        return this.userKind;
    }
    createReceiveNewMessageListener() {
        this.receiveNewMessageListener = new SystemPropertiesController.ReceiveNewMessageListener(this);
    }
    findAccountUrl() {
        return this.findUrlByGuid("F91D5C83-967E-4580-B45E-D969EE69CB71");
    }
    findUrlByGuid(value) {
        let i, keys, result, items;
        if (this.data != null) {
            keys = this.data.keys();
            for (i = 0; i <= keys.length - 1; i += 1) {
                result = this.getPropertyByName(keys[i]);
                if (result != null) {
                    if (stdlib.indexOf(result, value, false) > -1) {
                        items = this.valueParser.splitLine(result);
                        return items[items.length - 1];
                    }
                }
            }
        }
        return "";
    }
}
module.exports = SystemPropertiesController
SystemPropertiesController.RefreshedAction = class {
    listener;
    _owner_;
    constructor(_owner_) {
        this._owner_ = _owner_;
    }
    setListener(listener) {
        this.listener = listener;
    }
    execute() {
        this.listener.invoke();
    }
}
SystemPropertiesController.ReceiveNewMessageListener = class {
    _owner_;
    constructor(_owner_) {
        this._owner_ = _owner_;
    }
    setUpdatedSystemProperty(updateMessage) {
        let error, propertyName, propertyValue, previousPropertyValue;
        propertyName = updateMessage.getParameterName();
        if (this._owner_.data.contains(propertyName)) {
            propertyValue = updateMessage.getParameterValue();
            previousPropertyValue = this._owner_.data.get(propertyName).get();
            if (propertyValue != previousPropertyValue) {
                this._owner_.data.set(propertyName, StringValueObject.create(propertyValue));
                this._owner_.propertyUpdatedPublisher.notifyAction(SystemPropertiesController.PropertyUpdatedAction.create(propertyName));
            }
        }
        else {
            error = "SystemPropertiesController update error: can't update property'" + propertyName + "', because it is not present in the property list";
            this._owner_.logger.warning(error);
        }
    }
    onNewMessageReceive(message) {
        let systemPropertiesMessage, systemPropertyUpdateMessage, getTradingSessionMessage;
        this._owner_.logger.debug("SystemPropertiesController. Receive message: " + message.getType());
        if (message.getType() == MessageType.SystemProperties) {
            systemPropertiesMessage = message;
            this._owner_.data = systemPropertiesMessage.getProperties();
            this._owner_.refreshPublisher.notifyAction(new SystemPropertiesController.RefreshedAction(this._owner_));
        } else if (message.getType() == MessageType.SystemPropertyUpdateMessage) {
            systemPropertyUpdateMessage = message;
            this.setUpdatedSystemProperty(systemPropertyUpdateMessage);
        } else if (message.getType() == MessageType.GetTradingSession) {
            getTradingSessionMessage = message;
            this._owner_.userKind = UserKind.create(getTradingSessionMessage.getUserKind());
        }
    }
}
SystemPropertiesController.GetUrlAction = class {
    token;
    url;
    db;
    _owner_;
    constructor(_owner_) {
        this._owner_ = _owner_;
    }
    setToken(token) {
        this.token = token;
    }
    getUrl() {
        return null;
    }
}
SystemPropertiesController.GetAccountUrlAction = class extends SystemPropertiesController.GetUrlAction {
    _owner_;
    constructor(_owner_) {
        super();
        this._owner_ = _owner_;
    }
    static createAction(url, db) {
        let result;
        result = new SystemPropertiesController.GetAccountUrlAction(this);
        result.url = url;
        result.db = db;
        return result;
    }
    getUrl() {
        let result;
        result = this.url;
        result = StringUtil.replace(result, "%TOKEN%", this.token);
        result = StringUtil.replace(result, "%DB%", this.db);
        return result;
    }
}
SystemPropertiesController.GetReportUrlAction = class extends SystemPropertiesController.GetUrlAction {
    account;
    from;
    to;
    type;
    format;
    langID;
    _owner_;
    constructor(_owner_) {
        super();
        this._owner_ = _owner_;
    }
    static createAction(url, db, account, from, to, type, format, langID) {
        let result;
        result = new SystemPropertiesController.GetReportUrlAction(this);
        result.url = url;
        result.db = db;
        result.account = account;
        result.from = from;
        result.to = to;
        result.type = type;
        result.format = format;
        result.langID = langID;
        return result;
    }
    getUrl() {
        let result;
        result = this.url;
        if (stdlib.indexOf(result, "?", false) > -1) {
            result = result + "&token=";
        }
        else {
            result = result + "?token=";
        }
        result = result + this.token;
        result = result + "&cn=" + this.db;
        if (ReportType.CUSTOMER_ACCOUNT_STATEMENT == this.type) {
            result = result + "&report_name=REPORT_NAME_CUSTOMER_ACCOUNT_STATEMENT";
        }
        if (this.langID != null && stdlib.len(this.langID) > 0) {
            result = result + "&lc=" + this.langID;
        }
        if (this.format != null && stdlib.len(this.format) > 0) {
            result = result + "&outFormat=" + this.format;
        }
        if (this.account != null) {
            result = result + "&account=" + this.account.getName();
        }
        if (stdlib.year(this.from) > 1970) {
            result = result + "&from=" + (stdlib.month(this.from)).toString() + "/" + (stdlib.day(this.from)).toString() + "/" + (stdlib.year(this.from)).toString();
        }
        if (stdlib.year(this.to) > 1970) {
            result = result + "&till=" + (stdlib.month(this.to)).toString() + "/" + (stdlib.day(this.to)).toString() + "/" + (stdlib.year(this.to)).toString();
        }
        return result;
    }
}
SystemPropertiesController.GetTokenCallback = class {
    successAction;
    callback;
    _owner_;
    constructor(_owner_) {
        this._owner_ = _owner_;
    }
    static create(successAction, callback) {
        let result;
        result = new SystemPropertiesController.GetTokenCallback(this);
        result.successAction = successAction;
        result.callback = callback;
        return result;
    }
    onError(error) {
        this.callback.onError(error);
    }
    onSuccess(token) {
        this.successAction.setToken(token);
        this.callback.onSuccess(this.successAction.getUrl());
    }
}
SystemPropertiesController.PropertyUpdatedAction = class {
    listener;
    propertyName;
    _owner_;
    constructor(_owner_) {
        this._owner_ = _owner_;
    }
    static create(propertyName) {
        let result;
        result = new SystemPropertiesController.PropertyUpdatedAction(this);
        result.propertyName = propertyName;
        return result;
    }
    setListener(listener) {
        this.listener = listener;
    }
    execute() {
        this.listener.onChange(this.propertyName);
    }
}
