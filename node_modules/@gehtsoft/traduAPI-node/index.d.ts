/**
* The factory for creating instances of the ConnectionParametersBuilder class
*/
export class ConnectionParametersBuilderFactory {
    /**
    * Creates an instance of the ConnectionParametersBuilder class
    *
    * @return The method returns an instance of the ConnectionParametersBuilder class
    */
    create(): ConnectionParametersBuilder;
}
/**
* Provides access to messages sent from the server to the client
*/
export class ClientMessage {
    /**
    * Gets message ID
    *
    * @return The method returns a string that represents a unique identifier for a message
    */
    getMessageId(): string;
    /**
    * Retrieves and returns a stored date value
    *
    * @return The method returns a datetime value that represents a stored date value
    */
    getDateTime(): Date;
    /**
    * Gets information about the source of the message
    *
    * @return The method returns a string that represents information about the source of the message
    */
    getFrom(): string;
    /**
    * Gets the message type
    *
    * @return The method returns a string that represents the message type
    */
    getMessageType(): string;
    /**
    * Gets the type of the message content
    *
    * @return The method returns a string that represents the type of the message content
    */
    getFeature(): string;
    /**
    * Gets the text of the message
    *
    * @return The method returns a string that represents the text of the message
    */
    getText(): string;
    /**
    * Gets the subject of the message
    *
    * @return The method returns a string that represents the subject of the message
    */
    getSubject(): string;
}
/**
* The types of client mesages
*/
export class ClientMessageType {
    /**
    * A mail for popup
    */
    static readonly Popup = "1";
    /**
    * A mail for popup with answer
    */
    static readonly PopupWithAnswer = "2";
    /**
    * A mail for popup with confirmation
    */
    static readonly PopupWithConfirmation = "3";
    /**
    * A mail for popup with confirmation for all
    */
    static readonly PopupWithConfirmationForAll = "4";
    /**
    * A mail confirmation
    */
    static readonly Confirmation = "5";
    /**
    * A general mail
    */
    static readonly General = "0";
}
/**
* The class provides access to instrument information
*/
export class Instrument {
    /**
    * Type: FOREX
    */
    static readonly TYPE_FOREX = 1;
    /**
    * Type: INDICES
    */
    static readonly TYPE_INDICES = 2;
    /**
    * Type: COMMODITY
    */
    static readonly TYPE_COMMODITY = 3;
    /**
    * Type: TREASURY
    */
    static readonly TYPE_TREASURY = 4;
    /**
    * Type: BULLION
    */
    static readonly TYPE_BULLION = 5;
    /**
    * Type: SHARES
    */
    static readonly TYPE_SHARES = 6;
    /**
    * Type: FXINDEX
    */
    static readonly TYPE_FXINDEX = 7;
    /**
    * Type: CFD SHARES
    */
    static readonly TYPE_CFD_SHARES = 8;
    /**
    * Type: CRYPTOCURRENCY
    */
    static readonly TYPE_CRYPTOCURRENCY = 9;
    /**
    * Gets the unique identification number of the instrument offer
    *
    * @return The method returns a string that represents the unique identification number of the instrument offer
    */
    getOfferId(): string;
    /**
    * Gets the symbol of the instrument. For example, EUR/USD
    *
    * @return The method returns a string that represents the symbol of the instrument
    */
    getSymbol(): string;
    /**
    * Gets the contact currency depending on the instrument type: the base currency for a Forex instrument and the counter currency for a CFD instrument. For example, EUR for EUR/USD and GBP for UK100/GBP
    *
    * @return The function returns a string that represents the contact currency depending on the instrument type: the base currency for a Forex instrument and the counter currency for a CFD instrument. For example, EUR for EUR/USD and GBP for UK100/GBP
    */
    getContractCurrency(): string;
    /**
    * Gets the instrument price precision
    *
    * It defines the number of digits after the decimal point in the instrument price quote. For example, it is 5 for EUR/USD and 3 for USD/JPY
    *
    * @return The method returns an integer that represents the instrument price precision
    */
    getDigits(): number;
    /**
    * Gets the size of one pip
    *
    * It defines the smallest move the instrument price can make. In the case of FX instruments, it is expressed in the instrument counter currency. In the case of CFD instruments, it is expressed in the instrument native currency
    *
    * @return The method returns a real value that represents the size of one pip
    */
    getPointSize(): number;
    /**
    * Gets the type of the instrument
    *
    * The possible return values are:
    * 1 - Forex
    * 2 - Indices
    * 3 - Commodity
    * 4 - Treasury
    * 5 - Bullion
    * 6 - Shares
    * 7 - FXIndex
    * 8 - CFD Shares
    * 9 - Cryptocurrency
    *
    * @return The method returns an integer that represents the type of the instrument
    */
    getInstrumentType(): number;
    /**
    * Gets the instrument trading status
    *
    * The possible return values are:
    * O - Open, in other words, the instrument is tradable
    * C - Closed, in other words, the instrument is not tradable
    *
    * @return The method returns a string that represents the instrument trading status
    */
    getTradingStatus(): string;
    /**
    * Gets the contract multiplier (makes sense only for some CFD instruments)
    *
    * It is used for simulation of real-life trading conditions. For example, it is impossible to buy less than 25,000 lbs of copper on the market. Hence, the value of this field for Copper is 25000. In the case of FX instruments, the value of this field is 1.
    *
    * @return The methods returns a real value that represents the contract multiplier - makes sense only for some CFD instruments
    */
    getContractMultiplier(): number;
    /**
    * Gets the interest amount added to the account balance for holding a one lot short (sell) position overnight
    *
    * @return The method returns a real value that represents the interest amount added to the account balance for holding a one lot short (sell) position overnight
    */
    getSellInterest(): number;
    /**
    * Gets the interest amount added to the account balance for holding a one lot long (buy) position overnight
    *
    * @return The method returns a real value that represents the interest amount added to the account balance for holding a one lot long (buy) position overnight
    */
    getBuyInterest(): number;
    /**
    * Gets the instrument subscription status
    *
    * The possible return values are:
    * T - Available for trading
    * D - Disabled
    * V - View only
    *
    * @return The method returns a string that represents the instrument subscription status
    */
    getSubscriptionStatus(): string;
    /**
    * Answers the question of whether dividends have arrived for the instrument when buying
    *
    * @return The method returns a boolean value which should indicate whether dividends have been received for the given instrument at the time of purchase
    */
    hasDividendBuy(): boolean;
    /**
    * Gets the number of dividends when buying for this instrument. (Method deprecated. Use IDividendsProvider.getDividendBuy instead)
    *
    * @return The method returns a real value that represents the number of dividends when buying for this instrument
    */
    getDividendBuy(): number;
    /**
    * Answers the question of whether dividends have arrived for the instrument when selling
    *
    * @return The method returns boolean: 'true' if  dividends have arrived for the instrument when selling, 'false' if they haven't arrived
    */
    hasDividendSell(): boolean;
    /**
    * Gets the number of dividends when selling for this instrument. (Method deprecated. Use IDividendsProvider.getDividendSell instead)
    *
    * @return The method returns a real value that represents the number of dividends when selling for this instrument
    */
    getDividendSell(): number;
    /**
    * Returns the base unit size of the instrument. This value represents the minimum trade size for this instrument
    *
    * @return The method returns an integer that represents the base unit size of the instrument
    */
    getBaseUnitSize(): number;
    /**
    * Gets the minimum allowed amount of an order
    *
    * @return The method returns an integer that represents the minimum allowed amount of an order
    */
    getMinQuantity(): number;
    /**
    * Gets the maximum allowed amount of an order
    *
    * @return The method returns an integer that represents the maximum allowed amount of an order
    */
    getMaxQuantity(): number;
    /**
    * Gets the default sort order position
    *
    * @return The method returns an integer that represents the value of the sortOrder variable, which is of type int
    */
    getSortOrder(): number;
    /**
    * Gets the ID of price stream
    *
    * @return The method returns a string that represents an unique identifier of price stream
    */
    getPriceStreamId(): string;
    /**
    * Returns the distance in points between the current market price and the stop-loss order that has been placed for a trade. The stop-loss order is an order to automatically close a trade if the price of the instrument moves against the trader by a specified amount
    *
    * @return The method returns a real value that represents the distance in points between the current market price and the stop-loss order that has been placed for a trade. The stop-loss order is an order to automatically close a trade if the price of the instrument moves against the trader by a specified amount
    */
    getConditionDistStop(): number;
    /**
    * Returns the distance in points between the current market price and the limit order that has been placed for a trade. The limit order is an order to automatically close a trade when the price of the instrument reaches a certain level of profit
    *
    * @return The method returns a real value that represents the distance in points between the current market price and the limit order that has been placed for a trade. The limit order is an order to automatically close a trade when the price of the instrument reaches a certain level of profit
    */
    getConditionDistLimit(): number;
    /**
    * Returns the distance in points between the current market price and the stop-loss order that has been placed when entering a trade. The stop-loss order is an order to automatically close a trade if the price of the instrument moves against the trader by a specified amount
    *
    * @return The method returns a real value that represents the distance in points between the current market price and the stop-loss order that has been placed when entering a trade. The stop-loss order is an order to automatically close a trade if the price of the instrument moves against the trader by a specified amount
    */
    getConditionDistEntryStop(): number;
    /**
    * Returns the distance in points between the current market price and the limit order that has been placed when entering a trade. The limit order is an order to automatically close a trade when the price of the instrument reaches a certain level of profit
    *
    * @return The method returns a real value that represents the distance in points between the current market price and the limit order that has been placed when entering a trade. The limit order is an order to automatically close a trade when the price of the instrument reaches a certain level of profit
    */
    getConditionDistEntryLimit(): number;
    /**
    * Returns the adjustment applied to the ask price of the instrument. The ask price is the price at which an investor can buy the instrument. The adjustment can be either positive or negative and is applied to account for factors such as market conditions, liquidity, and trading costs
    *
    * @return The method returns a real value that represents the adjustment applied to the ask price of the instrument. The ask price is the price at which an investor can buy the instrument. The adjustment can be either positive or negative and is applied to account for factors such as market conditions, liquidity, and trading costs
    */
    getAskAdjustment(): number;
    /**
    * Returns the adjustment applied to the bid price of the instrument. The bid price is the price at which an investor can sell the instrument. The adjustment can be either positive or negative and is applied to account for factors such as market conditions, liquidity, and trading costs
    *
    * @return The method returns a real value that represents the adjustment applied to the bid price of the instrument. The bid price is the price at which an investor can sell the instrument. The adjustment can be either positive or negative and is applied to account for factors such as market conditions, liquidity, and trading costs
    */
    getBidAdjustment(): number;
    /**
    * Returns the size of a fractional pip for the instrument. The fractional pip size is the smallest fraction of a pip that the instrument can be traded in, and it is expressed in decimals
    *
    * @return The method returns a real value that represents the size of a fractional pip for the instrument
    */
    getFractionalPipSize(): number;
    /**
    * Get the minimum margin requirement denominated in the system's base currency.
    *
    * @return The method returns the minimum margin requirement denominated in the system's base currency.
    */
    getMMR(): number;
    /**
    * Gets the minimum margin requirement denominated in specific currency.
    *
    * @param currency The specific currency. List of supported currencies is limited and can be different between environments and databases.
    * @return The method returns the minimum margin requirement denominated in specific currency.
    */
    getMMRByCurrency(currency: string): number;
}
/**
* The class provides basic information about available instruments
*/
export class InstrumentDescriptor {
    /**
    * Gets the unique identification number of the instrument offer
    *
    * @return The method returns a string that represents the unique identification number of the instrument offer
    */
    getOfferId(): string;
    /**
    * Gets the symbol of the instrument. For example, EUR/USD
    *
    * @return The method returns a string that represents the symbol of the instrument
    */
    getSymbol(): string;
    /**
    * Gets the default sort order position
    *
    * @return The method returns an integer that represents the default sort order position
    */
    getSortOrder(): number;
    /**
    * Gets the ID of price stream
    *
    * @return The method returns a string that represents the unique identifier of price stream
    */
    getPriceStreamId(): string;
    /**
    * Gets the instrument subscription status
    *
    * The possible return values are:
    * T - Available for trading
    * D - Disabled
    * V - View only
    *
    * @return The method returns a string that represents the instrument subscription status
    */
    getSubscriptionStatus(): string;
}
/**
* The login error class
*/
export class LoginError {
    /**
    * Error: not specified
    */
    static readonly CODE_NOT_SPECIFIED = 0;
    /**
    * Error: empty parameter
    */
    static readonly CODE_EMPTY_PARAMETER = 1;
    /**
    * Error: incorrect pin
    */
    static readonly CODE_INCORRECT_PIN = 2;
    /**
    * Error: wrong username or password
    */
    static readonly CODE_WRONG_USERNAME_OR_PASSWORD = 3;
    /**
    * Error: locked user
    */
    static readonly CODE_LOCKED_USER = 4;
    /**
    * Error: server error
    */
    static readonly CODE_SERVER_ERROR = 5;
    /**
    * Error: incorrect trading system url
    */
    static readonly CODE_INCORRECT_TRADING_SYSTEM_URL = 6;
    /**
    * Error: incorrect connection name
    */
    static readonly CODE_INCORRECT_CONNECTION_NAME = 7;
    /**
    * Error: timeout
    */
    static readonly CODE_TIMEOUT = 8;
    /**
    * Error: invalid oreration
    */
    static readonly CODE_INVALID_OPERATION = 9;
    /**
    * Gets the login error message
    *
    * @return The method retuns a string that represents the login error message
    */
    getMessage(): string;
    /**
    * Gets the login error code
    *
    * @return The method retuns an integer that represents the login error code
    */
    getCode(): number;
    /**
    * Creates a new instance of the login error class
    *
    * @param message The login error message
    * @param code The login error code
    * @return The method returns an instance of the LoginError class after setting its attributes code and message
    */
    static create(code: number, message: string): LoginError;
}
/**
* The class provides access to information about an open position
*/
export class OpenPosition  extends RawOpenPosition{
    /**
    * Gets the current profit or loss of one lot of the position in the account currency
    *
    * @return The method returns a real value that represents the current profit or loss of one lot of the position in the account currency
    */
    getPL(): number;
    /**
    * Gets the current profit or loss of one lot of the position in pips
    *
    * @return The method returns a real value that represents the current profit or loss of one lot of the position in pips
    */
    getPLPips(): number;
    /**
    * Gets the current profit or loss of the position in the account currency
    *
    * @return The method returns a real value that represents the current profit or loss of the position in the account currency
    */
    getGrossPL(): number;
    /**
    * Gets the amount of the current position profit/loss including commissions, interest, and dividends
    *
    * @return The method returns a real value that represents the amount of the current position profit/loss including commissions, interest, and dividends
    */
    getNetPL(): number;
    /**
    * Gets the price at which the position can be closed at the moment
    *
    * @return The method returns a real value that represents the price at which the position can be closed at the moment
    */
    getCloseRate(): number;
    /**
    * Gets the price of the associated stop order (loss limit level)
    *
    * If there is no associated stop order, the method returns an empty value
    *
    * @return The method returns a real value that represents the price of the associated stop order
    */
    getStopRate(): number;
    /**
    * Gets the price of the associated limit order (profit limit level)
    *
    * If there is no associated limit order, the method returns an empty value.
    *
    * @return The method returns a real value that represents the price of the associated limit order
    */
    getLimitRate(): number;
    /**
    * Gets the identifier of the associated stop order (loss limit level)
    *
    * If there is no associated stop order, the method returns an empty value
    *
    * @return The method returns a string that represents the identifier of the associated stop order
    */
    getStopOrderID(): string;
    /**
    * Gets the identifier of the associated limit order (profit limit level)
    *
    * If there is no associated limit order, the method returns an empty value.
    *
    * @return The method returns a string that represents the identifier of the associated limit order
    */
    getLimitOrderID(): string;
    /**
    * Gets the amount of funds currently committed to maintain the position, expressed in the account currency
    *
    * @return The method returns a real value that represents the amount of funds currently committed to maintain the position, expressed in the account currency
    */
    getUsedMargin(): number;
    /**
    * Gets the pips left until the stop is moved
    *
    * @return The method returns a real value that represents the pips left until the stop is moved
    */
    getStopMove(): number;
}
/**
* The class provides access to identification information of the open position
*/
export class OpenPositionInfo {
    /**
    * Gets the unique identification number of the open position
    *
    * @return The method returns a string that represents the unique identification number of the open position
    */
    getId(): string;
    /**
    * Gets the unique identification number of the account the position is opened on
    *
    * @return The method returns a string that represents the unique identification number of the account the position is opened on
    */
    getAccountId(): string;
    /**
    * Gets the unique identification number of the instrument traded
    *
    * @return The method returns a string that represents the unique identification number of the instrument traded
    */
    getOfferId(): string;
}
/**
* The class provides access to information about an open position, its received from the trading server without calculated fields.
*/
export class RawOpenPosition {
    /**
    * Gets the unique identification number of the open position
    *
    * @return The method returns a string that represents the unique identification number of the open position
    */
    getTradeID(): string;
    /**
    * Gets the unique identification number of the account the position is opened on
    *
    * @return The method returns a string that represents the unique identification number of the account the position is opened on
    */
    getAccountId(): string;
    /**
    * Gets the unique name of the account the position is opened on
    *
    * @return The method returns a string that represents the unique name of the account the position is opened on
    */
    getAccountName(): string;
    /**
    * Gets the type of the account the position is opened on
    *
    * The possible return values are:
    * 32 - Self-traded account, funds manager account (only LAMM), managed account (only LAMM)
    * 36 - Funds manager account (only PAMM)
    * 38 - Managed account (only PAMM)
    *
    * @return The method returns a string that represents the type of the account the position is opened on
    */
    getAccountKind(): string;
    /**
    * Gets the unique identification number of the instrument traded
    *
    * @return The method returns a string that represents the unique identification number of the instrument traded
    */
    getOfferId(): string;
    /**
    * Gets the amount of the position
    *
    * In the case of FX instruments, it is expressed in the base currency of the instrument.
    * In the case of CFD instruments, it is expressed in contracts.
    *
    * @return The method returns an integer that represents the amount of the position
    */
    getAmount(): number;
    /**
    * Gets the trade operation by which the position was opened
    *
    * The possible return values are:
    * B - Buy
    * S - Sell
    *
    * @return The method returns a string that represents the trade operation by which the position was opened
    */
    getBuySell(): string;
    /**
    * Gets the price at which the position was opened
    *
    * In the case of FX instruments, it is expressed in the instrument counter currency per one unit of base currency.
    * In the case of CFD instruments, it is expressed in the instrument native currency per contract.
    *
    * @return The method returns a real value that represents the price at which the position was opened
    */
    getOpenRate(): number;
    /**
    * Gets the date and time when the position was opened
    *
    * @return The method returns a datetime that represents the date and time when the position was opened
    */
    getOpenTime(): Date;
    /**
    * Gets the unique identifier of the pair of prices (bid and ask) at which the position was opened
    *
    * @return The method returns a string that represents the unique identifier of the pair of prices (bid and ask) at which the position was opened
    */
    getOpenQuoteId(): string;
    /**
    * Gets the unique identification number of the order by which the position was opened
    *
    * @return The method returns a string that represents the unique identification number of the order by which the position was opened
    */
    getOpenOrderId(): string;
    /**
    * Gets the identifier of the order request by which the position was opened
    *
    * @return The method returns a string that represents the identifier of the order request by which the position was opened
    */
    getOpenOrderReqId(): string;
    /**
    * Gets the custom identifier of the order by which the position was opened
    *
    * @return The method returns a string that represents the custom identifier of the order by which the position was opened
    */
    getOpenOrderRequestTXT(): string;
    /**
    * Gets the amount of funds subtracted from the account balance to pay for the brokers service in accordance with the terms and conditions of the account trading agreement
    *
    * Commission is expressed in the account currency. If commission is not charged or has not been charged yet, the returned value is 0.0.
    *
    * @return The method returns a real value that represents the amount of funds subtracted from the account balance to pay for the brokers service in accordance with the terms and conditions of the account trading agreemen
    */
    getCommission(): number;
    /**
    * Gets the cumulative amount of funds that is added the account balance for holding the position overnight
    *
    * Rollover interest is expressed in the account currency. Its value can be positive or negative. If the position has not been held overnight, the returned value is 0.0.
    *
    * @return The method returns a real value that represents the cumulative amount of funds that is added the account balance for holding the position overnight
    */
    getRolloverInterest(): number;
    /**
    * Gets the unique identification number of the position a partial closing of which resulted in opening of the current position
    *
    * If there is no such position, the method returns an empty value.
    *
    * @return The method returns a string that represents the unique identification number of the position a partial closing of which resulted in opening of the current position
    */
    getTradeIdOrigin(): string;
    /**
    * Gets the simulated delivery date
    *
    * It is applicable only to open positions on accounts with the day netting position maintenance. Otherwise, the method returns an empty value.
    * The returned date shows when the position can be closed automatically. The date is provided in the yyyyMMdd format.
    *
    * @return The method returns a string that represents the simulated delivery date
    */
    getValueDate(): string;
    /**
    * Gets the unique identifier of the environment that was used to open the position
    *
    * @return The method returns a string that represents the unique identifier of the environment that was used to open the position
    */
    getParties(): string;
    /**
    * Gets the amount of dividends earned or paid for the position
    *
    * @return The method returns a real value that represents the amount of dividends earned or paid for the position
    */
    getDividends(): number;
}
/**
* The resilience interface
*/
export interface IResilience {
    /**
    * Gets period of waiting before the next attempt (millisecods)
    *
    * @return The method retuns an integer that represents a period of waiting before the next attempt
    */
    getPeriodInMilliseconds(): number;
    /**
    * Gets the number of attempts before the error report
    *
    * @return The method retuns an integer that represents a period of waiting before the error report
    */
    getAttempts(): number;
}
/**
* The resilience class
*/
export class Resilience  implements IResilience{
    /**
    * Gets period of waiting before next attempt (millisecods)
    *
    * @return The method returns the period of waiting
    */
    getPeriodInMilliseconds(): number;
    /**
    * Gets the number of attempts before error report
    *
    * @return The method returns the number of attempts before error report
    */
    getAttempts(): number;
    /**
    * Creates a new instance of the Resilence class
    *
    * @param attempts The number of attempts before error report
    * @param periodInMilliseconds The period of waiting before next attempt (millisecods)
    * @return The method returns the instance of the Resilence class
    */
    static create(attempts: number, periodInMilliseconds: number): Resilience;
}
/**
* The builder of the Resilience class
*/
export class ResilienceBuilder  extends Resilience{
    /**
    * Sets period of waiting before next attempt (millisecods)
    *
    * @param periodInMilliseconds The integer value
    */
    setPeriodInMilliseconds(periodInMilliseconds: number): void;
    /**
    * Sets the number of attempts before error report
    *
    * @param attempts The integer value
    */
    setAttempts(attempts: number): void;
    /**
    * Builds a new instance of the Resilience class with the set parameters
    *
    * @return The method returns the new instance of the Resilience class
    */
    build(): IResilience;
    /**
    * Allows the properties of an existing object to be copied into a new object
    *
    * @param resilience Defines properties and methods related to resilience in software applications
    */
    copyFrom(resilience: IResilience): void;
}
/**
* The class provides data for sending mail
*/
export class SendClientMessageRequest {
    /**
    * Gets the mail text
    *
    * @return The method returns a string value of the mail text
    */
    getText(): string;
    /**
    * Gets the mail receiver
    *
    * @return The method returns a string value of the mail receiver
    */
    getTo(): string;
    /**
    * Gets the mail type
    *
    * @return The method returns a string value of the mail type
    */
    getMessageType(): string;
    /**
    * Gets the mail feature
    *
    * @return The method returns a string value of the mail feature
    */
    getFeature(): string;
    /**
    * Gets the mail subject
    *
    * @return The method returns a string value of the mail subject
    */
    getSubject(): string;
}
/**
* The builder for SendClientMessageRequest
*/
export class SendClientMessageRequestBuilder  extends SendClientMessageRequest{
    /**
    * Sets the mail text
    *
    * @param text The value to be set
    * @return The method returns the current instance of the SendClientMessageRequest object
    */
    setText(text: string): SendClientMessageRequestBuilder;
    /**
    * Sets the mail receiver
    *
    * @param to The value to be set
    * @return The method returns the current instance of the SendClientMessageRequest object
    */
    setTo(to: string): SendClientMessageRequestBuilder;
    /**
    * Sets the mail type
    *
    * @param messageType The value to be set
    * @return The method returns the current instance of the SendClientMessageRequest object
    */
    setMessageType(messageType: string): SendClientMessageRequestBuilder;
    /**
    * Sets the mail feature
    *
    * @param feature The value to be set
    * @return The method returns the current instance of the SendClientMessageRequest object
    */
    setFeature(feature: string): SendClientMessageRequestBuilder;
    /**
    * Sets the mail subject
    *
    * @param subject The value to be set
    * @return The method returns the current instance of the SendClientMessageRequest object
    */
    setSubject(subject: string): SendClientMessageRequestBuilder;
    /**
    * Builds a new instance of the SendClientMessageRequest class with the set parameters
    *
    * @return The method returns an instance of the SendClientMessageRequest class
    */
    build(): SendClientMessageRequest;
}
/**
* The class provides access to account information
*/
export class Account {
    /**
    * Gets the unique identification number of the account
    *
    * @return The method returns a string that represents a unique identification number assigned to the account
    */
    getAccountId(): string;
    /**
    * Gets the type of the account
    *
    * The possible return values are:
    * 32 - Self-traded account, funds manager account (only LAMM), managed account (only LAMM)
    * 36 - Funds manager account (only PAMM)
    * 38 - Managed account (only PAMM)
    *
    * @return The method returns a string that represents the type of the account
    */
    getAccountKind(): string;
    /**
    * Gets the unique name of the account
    *
    * @return The method returns a string that represents the name of the account
    */
    getAccountName(): string;
    /**
    * Gets the maximum amount of an order that is allowed on the account
    *
    * @return The method returns an integer that represents the maximum amount of an order that is allowed on the account
    */
    getOrderAmountLimit(): number;
    /**
    * Gets the unique identification number of an account trading profile that specifies commission requirements
    *
    * @return The method returns a string that represents the unique identification number of an account trading profile that specifies commission requirements
    */
    getATPId(): string;
    /**
    * Gets the amount of funds on the account
    *
    * @return The method returns a real value that represents the amount of funds on the account
    */
    getBalance(): number;
    /**
    * Gets the size of one lot
    *
    * @return The method returns an integer that represents the size of one lot
    */
    getBaseUnitSize(): number;
    /**
    * Gets the date and time of the last occurrence of a Margin Call
    *
    * @return The method returns a datetime value that represents the date and time of the last occurrence of a Margin Call
    */
    getLastMarginCallDate(): Date;
    /**
    * Gets the unique identification number of an account leverage profile that specifies margin requirements
    *
    * @return The method returns a string that represents the unique identification number of an account leverage profile
    */
    getLeverageProfileId(): string;
    /**
    * Gets the equity balance of the account at the beginning of the trading day
    *
    * @return The method returns a real value that represents the equity balance of the account at the beginning of the trading day
    */
    getM2MEquity(): number;
    /**
    * Gets the rollover maintenance flag
    *
    * @return The method returns a boolean value that represents the rollover maintenance flag
    */
    getMaintenanceFlag(): boolean;
    /**
    * Gets the type of position maintenance
    *
    * The possible return values are:
    * Y - Hedging is allowed
    * N - Hedging is not allowed
    * 0 - Netting only
    * D - Day netting
    * F - FIFO
    *
    * @return The method returns a string that represents the type of position maintenance
    */
    getMaintenanceType(): string;
    /**
    * Gets the unique identification number of the funds manager account
    *
    * @return The method returns a string that represents the unique identification number of the funds manager account
    */
    getManagerAccountId(): string;
    /**
    * Gets the limitation state of the account
    *
    * The possible return values are:
    * Y - Margin call (all positions are liquidated, new positions cannot be opened)
    * W - Warning about a possible margin call (positions can be closed, new positions cannot be opened)
    * Q - Equity stop (all positions are liquidated, new positions cannot be opened up to the end of the trading day)
    * A - Equity alert (positions can be closed, new positions cannot be opened up to the end of the trading day)
    * N - No limitations (no limitations are imposed on the account operations)
    *
    * @return The method returns a string that represents the limitation state of the account
    */
    getMarginCallFlag(): string;
    /**
    * Gets the refresh profile flags of the account. The returned set of values defines the refresh profile flags that can be performed on the account in subsequent updates
    *
    * The possible return values are:
    * A|a|B|b|P|X - update Commission manager (refresh AccountCommissionsManager)
    * L|l|M|m|X - update Leverage manager (refresh LeverageProfilesManager)
    * R|r|Y - update Rollover manager (refresh RolloverProfilesManager)
    * C|E|O|U - not used
    *
    * @return The method returns a string that represents a string that represents the refresh profile flags of the account
    */
    getRefreshProfileFlags(): string;
    /**
    * Gets the amount of accounting transactions on the account during the current trading day
    *
    * @return The method returns a real value that represents the amount of accounting transactions on the account during the current trading day
    */
    getNonTradeEquity(): number;
    /**
    * Gets the base currency
    *
    * @return The method returns a string that represents the base currency
    */
    getBaseCurrency(): string;
    /**
    * Gets the base currency precision
    *
    * @return The method returns an integer that represents the base currency precision
    */
    getBaseCurrencyPrecision(): number;
    /**
    * Gets the Hedge Margin in percent. Hedge Margin is funds which are necessary to open and support an open locked (hedged) position; open positions on the same instrument in different directions
    *
    * @return The method returns a real value that represents the Hedge Margin in percent
    */
    getHedgeMarginPCT(): number;
    /**
    * Gets the RolloverProfileId for this account
    *
    * @return The method returns a string that represents the RolloverProfileId for the account
    */
    getRolloverProfileId(): string;
    /**
    * Gets the amount of funds on the account including profits and losses of all open positions
    *
    * @return The method returns a real value that represents the amount of funds on the account, including profits and losses of all open positions
    */
    getEquity(): number;
    /**
    * Gets the amount of profits and losses of all open positions on the account not including commissions, rollover, and dividends
    *
    * @return The method returns a real value that represents the amount of profits and losses of all open positions on the account, not including commissions, rollover, and dividends
    */
    getGrossPL(): number;
    /**
    * Gets the amount of funds used to maintain all open positions on the account
    *
    * @return The method returns a real value that represents the amount of funds used to maintain all open positions on the account
    */
    getUsedMargin(): number;
    /**
    * Gets the amount of funds available to open new positions or to absorb losses of existing positions
    *
    * @return The method returns a real value that represents the amount of funds available to open new positions or to absorb losses of existing positions
    */
    getUsableMargin(): number;
    /**
    * Gets the usable margin expressed as a percentage of equity
    *
    * @return The method returns a real value that represents the usable margin on the account, expressed as a percentage of equity
    */
    getUsableMarginPercentage(): number;
    /**
    * Gets the amount of funds used to maintain all open positions on the account with the three-level margin policy
    *
    * @return The method returns a real value that represents the amount of funds used to maintain all open positions on the account with the three-level margin policy
    */
    getUsedMaintenanceMargin(): number;
    /**
    * Gets the amount of funds available to open new positions or to absorb losses of existing positions on the account with the three-level margin policy
    *
    * @return The method returns a real value that represents the amount of funds available to open new positions or to absorb losses of existing positions on the account with the three-level margin policy
    */
    getUsableMaintenanceMargin(): number;
    /**
    * Gets the maintenance usable margin expressed as a percentage of equity
    *
    * @return The method returns a real value that represents the maintenance usable margin expressed as a percentage of equity
    */
    getUsableMaintenanceMarginPercentage(): number;
    /**
    * Gets the amount of profits and losses (both floating and realized) of the current trading day
    *
    * @return The method returns a real value that represents the amount of profits and losses of the current trading day
    */
    getDayPL(): number;
}
/**
* The class provides access to basic account information
*/
export class AccountInfo {
    /**
    * Gets the unique identification number of the account
    *
    * @return The method returns a string that represents the unique identification number of the account
    */
    getId(): string;
    /**
    * Gets the unique name of the account
    *
    * @return The method returns a string that represents the unique name of the account
    */
    getName(): string;
    /**
    * Gets the type of the account
    *
    * The possible return values are:
    * 32 - Self-traded account, funds manager account (only LAMM), managed account (only LAMM)
    * 36 - Funds manager account (only PAMM)
    * 38 - Managed account (only PAMM)
    *
    * @return The method returns a string that represents the type of the account
    */
    getType(): string;
}
/**
* The class provides access to information about a closed position
*/
export class ClosedPosition {
    /**
    * Gets the unique identification number of the position
    *
    * @return The method returns a string that represents the unique identification number of the position
    */
    getTradeID(): string;
    /**
    * Gets the unique identification number of the account the position was closed on
    *
    * @return The method returns a string that represents the unique identification number of the account the position was closed on
    */
    getAccountId(): string;
    /**
    * Gets the unique name of the account the position was closed on
    *
    * @return The function returns a string that represents the unique name of the account the position was closed on
    */
    getAccountName(): string;
    /**
    * Gets the type of the account the position was closed on
    *
    * The possible return values are:
    * 32 - Self-traded account, funds manager account (only LAMM), managed account (only LAMM)
    * 36 - Funds manager account (only PAMM)
    * 38 - Managed account (only PAMM)
    *
    * @return The method returns a string that represents the type of the account the position was closed on
    */
    getAccountKind(): string;
    /**
    * Gets the unique identification number of the instrument traded
    *
    * @return The method returns a string that represents the unique identification number of the instrument traded
    */
    getOfferId(): string;
    /**
    * Gets the amount of the closed position
    *
    * In the case of FX instruments, it is expressed in the base currency of the instrument.
    * In the case of CFD instruments, it is expressed in contracts.
    *
    * @return The method returns an integer that represents the amount of the closed position
    */
    getAmount(): number;
    /**
    * Gets the trade operation the position was opened by
    *
    * The possible return values are:
    * B - Buy
    * S - Sell
    *
    * @return The method returns a string that represents the trade operation the position was opened by. 'B' for 'Buy' or 'S' for 'Sell'
    */
    getBuySell(): string;
    /**
    * Gets the price at which the position was opened
    *
    * In the case of FX instruments, it is expressed in the instrument counter currency per one unit of base currency.
    * In the case of CFD instruments, it is expressed in the instrument native currency per contract.
    *
    * @return Method returns a real value that represents the price at which the position was opened
    */
    getOpenRate(): number;
    /**
    * Gets the date and time when the position was opened
    *
    * @return The method returns a datetime value that represents the date and time when the position was opened
    */
    getOpenTime(): Date;
    /**
    * Gets the unique identifier of the pair of prices bid and ask at which the position was opened
    *
    * @return The method returns a string that represents the unique identifier of the pair of prices bid and ask at which the position was opened
    */
    getOpenQuoteId(): string;
    /**
    * Gets the unique identification number of the order the position was opened by
    *
    * @return The method returns a string that represents the unique identification number of the order the position was opened by
    */
    getOpenOrderId(): string;
    /**
    * Gets the identifier of the order request the position was opened by
    *
    * @return The method returns a string that represents the identifier of the order request the position was opened by
    */
    getOpenOrderReqId(): string;
    /**
    * Gets the custom identifier of the order the position was opened by
    *
    * @return The method returns a string that represents the custom identifier of the order the position was opened by
    */
    getOpenOrderRequestTXT(): string;
    /**
    * Get the price at which the position was closed
    *
    * In the case of FX instruments, it is expressed in the instrument counter currency per one unit of base currency
    * In the case of CFD instruments, it is expressed in the instrument native currency per contract
    *
    * @return The method returns a real value that represents the price at which the position was closed
    */
    getCloseRate(): number;
    /**
    * Gets the date and time when the position was closed
    *
    * @return The method returns a datetime value that represents the date and time when the position was closed
    */
    getCloseTime(): Date;
    /**
    * Get the unique identifier of the price pair bid and ask at which the position was closed
    *
    * @return The method returns a string that represents the unique identifier of the price pair bid and ask at which the position was closed
    */
    getCloseQuoteId(): string;
    /**
    * Gets the unique identifier of the order at which the position was closed
    *
    * @return The method returns a string that represents the unique identifier of the order at which the position was closed
    */
    getCloseOrderId(): string;
    /**
    * Gets the unique identifier of the order request at which the position was closed
    *
    * @return The method returns a string that represents the unique identifier of the order request at which the position was closed
    */
    getCloseOrderReqId(): string;
    /**
    * Gets the custom identifier of the order at which the position was closed
    *
    * @return The method returns a string that represents the custom identifier of the order at which the position was closed
    */
    getCloseOrderRequestTXT(): string;
    /**
    * Gets the unique identifier of the environment that was used to close the position
    *
    * @return The method returns a string that represents the unique identifier of the environment that was used to close the position
    */
    getCloseOrderParties(): string;
    /**
    * Gets the amount of funds subtracted from the account balance to pay for the brokers service in accordance with the terms and conditions of the account trading agreement
    *
    * Commission is expressed in the account currency. If commission is not charged or has not been charged yet, the returned value is 0.0.
    *
    * @return The method returns a real value that represents the amount of funds subtracted from the account balance to pay for the brokers service in accordance with the terms and conditions of the account trading agreement
    */
    getCommission(): number;
    /**
    * Gets the cumulative amount of funds that is added the account balance for holding the position overnight
    *
    * Rollover interest is expressed in the account currency. Its value can be positive or negative. If the position has not been held overnight, the returned value is 0.0.
    *
    * @return The method returns a real value that represents the cumulative amount of funds that is added the account balance for holding the position overnight
    */
    getRolloverInterest(): number;
    /**
    * Gets the unique identification number of the position a partial closing of which resulted in opening of the current position
    *
    * If there is no such position, the method returns an empty value.
    *
    * @return The method returns a string that represents the unique identification number of the position a partial closing of which resulted in opening of the current position
    */
    getTradeIdOrigin(): string;
    /**
    * Gets the unique identification number of the position opened as a result of the partial closing of the current position
    *
    * If there is no such position, the method returns an empty value.
    *
    * @return The method returns a string that represents the unique identification number of the position opened as a result of the partial closing of the current position
    */
    getTradeIdRemain(): string;
    /**
    * Gets the simulated delivery date
    *
    * It is applicable only to closed positions on accounts with the day netting position maintenance. Otherwise, the method returns an empty value.
    * The returned date shows when the position can be closed automatically. The date is provided in the yyyyMMdd format
    *
    * @return The method returns a string that represents the date shows when the position can be closed automatically. The date is provided in the yyyyMMdd format
    */
    getValueDate(): string;
    /**
    * Gets the amount of dividends earned or paid for the position
    *
    * @return The method returns a real value that represents the amount of dividends earned or paid for the position
    */
    getDividends(): number;
    /**
    * Gets the profit or loss of one lot of the position in the account currency
    *
    * @return The method returns a real value that represents the profit or loss of one lot of the position in the account currency
    */
    getPL(): number;
    /**
    * Gets the profit or loss of one lot of the position in pips
    *
    * @return The method returns a real value that represents the profit or loss of one lot of the position in pips
    */
    getPLPips(): number;
    /**
    * Gets the amount of the position profit/loss including commissions, interest, and dividends
    *
    * @return The method returns a real value that represents the amount of the position profit/loss including commissions, interest, and dividends
    */
    getNetPL(): number;
    /**
    * Gets the profit or loss of the position in the account currency
    *
    * @return The method returns a real value that represents the profit or loss of the position in the account currency
    */
    getGrossPL(): number;
}
/**
* The class provides access to identification information of the closed position
*/
export class ClosedPositionInfo {
    /**
    * Gets the unique identification number of the closed position
    *
    * @return The method returns the unique identification number of the closed position
    */
    getId(): string;
}
/**
* The class provides access to margin requirements information
*/
export class MarginRequirements {
    /**
    * Gets the maintenance margin requirement
    *
    * @return The method returns a real value that represents the maintenance margin requirement. It has a return type of real
    */
    getMMR(): number;
    /**
    * Gets the limitation margin requirement
    *
    * @return The method returns a real value that represents the limitation margin requirement. It has a return type of real 
    */
    getLMR(): number;
    /**
    * Gets the entry margin requirement.
    *
    * @return The method returns a real value that represents the entry margin requirement. It has a return type of real 
    */
    getEMR(): number;
}
/**
* Defines constants for different statuses of orders in a trading system
*/
export class OrderStatus {
    /**
    * Status: waiting
    */
    static readonly Waiting = "W";
    /**
    * Status: in process
    */
    static readonly InProcess = "P";
    /**
    * Status: dealer intervention
    */
    static readonly DealerIntervention = "I";
    /**
    * Status: requoted
    */
    static readonly Requoted = "Q";
    /**
    * Status: executing
    */
    static readonly Executing = "E";
    /**
    * Status: cancelled
    */
    static readonly Cancelled = "C";
    /**
    * Status: rejected
    */
    static readonly Rejected = "R";
    /**
    * Status: expired
    */
    static readonly Expired = "T";
    /**
    * Status: executed
    */
    static readonly Executed = "F";
    /**
    * Status: pending calculated
    */
    static readonly PendingCalculated = "U";
    /**
    * Status: pending cancelled
    */
    static readonly PendingCancelled = "S";
    /**
    * Status: pending cancel calculated
    */
    static readonly PendingCancelCalculated = "H";
}
/**
* Defines constants for different types of orders in a trading system
*/
export class OrderType {
    /**
    * Type: open position at any available price
    */
    static readonly OpenAtMarket = "OM";
    /**
    * Type: open position by phone call
    */
    static readonly OpenByPhone = "OF";
    /**
    * Type: open position at specified price
    */
    static readonly OpenAtPrice = "O";
    /**
    * Type: open position at specified range of price
    */
    static readonly OpenAtRange = "OR";
    /**
    * Type: open position at specified price or at a more favorable price
    */
    static readonly OpenAtPriceOrLimit = "OL";
    /**
    * Type: open position by quote
    */
    static readonly OpenByQuote = "OQ";
    /**
    * Type: close position at any available price
    */
    static readonly CloseAtMarket = "CM";
    /**
    * Type: close position by phone call
    */
    static readonly CloseByPhone = "CF";
    /**
    * Type: close position at specified price
    */
    static readonly CloseAtPrice = "C";
    /**
    * Type: close position at specified range of price
    */
    static readonly CloseAtRange = "CR";
    /**
    * Type: close position at specified price or at a more favorable price
    */
    static readonly CloseAtPriceOrLimit = "CL";
    /**
    * Type: close position by quote
    */
    static readonly CloseByQuote = "CQ";
    /**
    * Type: trailing stop entry
    */
    static readonly TrailingStopEntry = "STE";
    /**
    * Type: stop entry
    */
    static readonly StopEntry = "SE";
    /**
    * Type: trailing limit entry
    */
    static readonly TrailingLimitEntry = "LTE";
    /**
    * Type: limit entry
    */
    static readonly LimitEntry = "LE";
    /**
    * Type: trailing stop
    */
    static readonly TrailingStop = "ST";
    /**
    * Type: stop
    */
    static readonly Stop = "S";
    /**
    * Type: trailing limit
    */
    static readonly TrailingLimit = "LT";
    /**
    * Type: limit
    */
    static readonly Limit = "L";
    /**
    * Type: range entry
    */
    static readonly RangeEntry = "RE";
    /**
    * Type: trailing range entry
    */
    static readonly TrailingRangeEntry = "RTE";
    /**
    * Type: margin call
    */
    static readonly MarginCall = "M";
    /**
    * Type: equity stop
    */
    static readonly EquityStop = "Q";
}
/**
* Defines constants how long an order will remain active before it is executed or expires in a trading system
*/
export class TimeInForce {
    /**
    * TimeInForce: good till cancelled
    */
    static readonly GoodTillCancelled = "GTC";
    /**
    * TimeInForce: immediate or cancel
    */
    static readonly ImmediateOrCancel = "IOC";
    /**
    * TimeInForce: fill or kill
    */
    static readonly FillOrKill = "FOK";
    /**
    * TimeInForce: day order
    */
    static readonly DayOrder = "DAY";
    /**
    * TimeInForce: good till date
    */
    static readonly GoodTillDate = "GTD";
}
/**
* Defines constants for different types of rates in a trading system
*/
export class RateType {
    /**
    * Rate: none
    */
    static readonly RateNone = 0;
    /**
    * Rate: non pegged
    */
    static readonly RateNonPegged = 1;
    /**
    * Rate: pegged open
    */
    static readonly RatePeggedOpen = 2;
    /**
    * Rate: pegged close
    */
    static readonly RatePeggedClose = 3;
}
/**
* Defines constants for different types of trailing stops in a trading system
*/
export class TrailingStopType {
    /**
    * Trailing stop: none
    */
    static readonly None = 0;
    /**
    * Trailing stop: dynamic
    */
    static readonly Dynamic = 1;
    /**
    * Trailing stop: fixed
    */
    static readonly Fixed = 2;
}
/**
* The class provides access to identification information of the order
*/
export class OrderInfo {
    /**
    * Gets the unique identification number of the order
    *
    * @return The method returns a string that represents the unique identification number of the order
    */
    getOrderId(): string;
    /**
    * Checks whether the order is executed
    *
    * @return The method returns a boolean value of 'true' if the order has been executed, and 'false' if it has not been executed
    */
    isExecuted(): boolean;
    /**
    * Gets the status
    *
    * @return The method returns a string that represents the status of an order, represented as a string value
    */
    getStatus(): string;
    /**
    * Gets the unique identification number of the position to be opened/closed by the order
    *
    * @return The method returns a string that represents the unique identification number of the position to be opened/closed by the order
    */
    getTradeId(): string;
    /**
    * Gets the custom identifier of the order
    *
    * @return The method returns a string that represents the custom identifier of the order
    */
    getRequestTxt(): string;
    /**
    * Checks whether the order changed with an error
    *
    * @return The method returns 'true' if the error variable is not equal to nil, and 'false' otherwise
    */
    hasError(): boolean;
    /**
    * Gets the error on the last order status change
    *
    * @return The method returns the error on the last order status change
    */
    getError(): IFXConnectLiteError;
}
/**
* The class provides access to order information
*/
export class Order {
    /**
    * Gets the unique identification number of the order
    *
    * @return The method returns a string that represents the unique identification number of the order
    */
    getOrderId(): string;
    /**
    * Gets the identifier of the request to create the order
    *
    * @return The method returns a string that represents the identifier of the request to create the order
    */
    getRequestId(): string;
    /**
    * Gets the price at which the order is placed
    *
    * @return The method returns a real value that represents the price at which the order is placed
    */
    getRate(): number;
    /**
    * Gets the price the order is executed at
    *
    * @return The method returns a real value that represents the price the order is executed at
    */
    getExecutionRate(): number;
    /**
    * Gets the minimum price at which the order can be filled
    *
    * @return The method returns a real value that represents the minimum price at which the order can be filled
    */
    getRateMin(): number;
    /**
    * Gets the maximum price at which the order can be filled
    *
    * @return The method returns a real value that represents the maximum price at which the order can be filled
    */
    getRateMax(): number;
    /**
    * Gets the unique identification number of the position to be opened/closed by the order
    *
    * @return The method returns a string that represents the unique identification number of the position to be opened/closed by the order
    */
    getTradeId(): string;
    /**
    * Gets the unique identification number of the account the order is placed on
    *
    * @return The method returns a string that represents the unique identification number of the account the order is placed on
    */
    getAccountId(): string;
    /**
    * Gets the unique name of the account on which the order is placed
    *
    * @return The method returns a string that represents the unique name of the account on which the order is placed
    */
    getAccountName(): string;
    /**
    * Gets the unique identification number of the instrument offer the order is placed for
    *
    * @return The method returns a string that represents the unique identification number of the instrument offer the order is placed for
    */
    getOfferId(): string;
    /**
    * Gets the Net Amount order flag
    *
    * @return The method returns the Net Amount order flag
    */
    getNetQuantity(): boolean;
    /**
    * Gets the trade operation of the order
    *
    * @return The method returns a string that represents the trade operation of the order
    */
    getBuySell(): string;
    /**
    * Gets the order action: O - open a position, C - close a position
    *
    * @return The method returns a string that represents the order action: O - open a position, C - close a position
    */
    getStage(): string;
    /**
    * Gets the type of the order
    *
    * @return The method returns a string that represents the type of the order
    */
    getType(): string;
    /**
    * Gets the status of the order
    *
    * @return The method returns a string that represents the status of the order
    */
    getStatus(): string;
    /**
    * Gets the date and time of the last update of the order state
    *
    * @return The method returns a datetime that represents the date and time of the last update of the order state
    */
    getStatusTime(): Date;
    /**
    * Gets the amount of the order
    *
    * @return The method returns an integer that represents the amount of the order
    */
    getAmount(): number;
    /**
    * Gets the time, during which the trader must accept or reject the order requoted by the dealer
    *
    * @return The method returns a real value that represents the time, during which the trader must accept or reject the order requoted by the dealer
    */
    getLifetime(): number;
    /**
    * Gets the distance in pips from the current market price within which the trader allows the order to be executed
    *
    * @return The method returns a real value that represents the distance in pips from the current market price within which the trader allows the order to be executed
    */
    getAtMarket(): number;
    /**
    * Gets the number of pips the market should move before the order moves the same number of pips after it
    *
    * @return The method returns an integer that represents the number of pips the market should move before the order moves the same number of pips after it
    */
    getTrailStep(): number;
    /**
    * Gets the market price at the time the order automatically moves following the market fluctuations
    *
    * @return The method returns a real value that represents the market price at the time the order automatically moves following the market fluctuations
    */
    getTrailRate(): number;
    /**
    * Gets the time-in-force option of the order
    *
    * @return The method returns a string that represents the time-in-force option of the order
    */
    getTimeInForce(): string;
    /**
    * Gets the type of the account the order is placed from
    *
    * @return The method returns a string that represents the type of the account the order is placed from
    */
    getAccountKind(): string;
    /**
    * Gets the custom identifier of the order
    *
    * @return The method returns a string that represents the custom identifier of the order
    */
    getRequestTxt(): string;
    /**
    * Gets the unique identifier of an existing contingency group which the order is linked to
    *
    * @return The method returns a string that represents the unique identifier of an existing contingency group which the order is linked to
    */
    getContingentOrderID(): string;
    /**
    * Gets the type of the contingent order which the order is linked to
    *
    * @return The method returns a string that represents the type of the contingent order which the order is linked to
    */
    getContingencyType(): number;
    /**
    * Gets the unique identification number of the primary order of the ELS or OTO contingent orders to which the order is linked
    *
    * @return The method returns a string that represents the unique identification number of the primary order of the ELS or OTO contingent orders to which the order is linked
    */
    getPrimaryId(): string;
    /**
    * Gets the original amount of the order when it was placed
    *
    * @return The method returns an integer that represents the original amount of the order when it was placed
    */
    getOriginAmount(): number;
    /**
    * Gets the amount of the last order portion filled
    *
    * @return The method returns an integer that represents the amount of the last order portion filled
    */
    getFilledAmount(): number;
    /**
    * Checks whether the order is active on the market or not, applicable only to secondary orders of ELS and OTO orders
    *
    * @return The method returns 'true' or 'false', depending on the value of the workingIndicator variable
    */
    getWorkingIndicator(): boolean;
    /**
    * Gets the price used to calculate the pegged order price: O - open price, M - close price. Applicable only to stop/limit orders and secondary orders of ELS orders
    *
    * @return The method returns a string that represents the price used to calculate the pegged order price: O - open price, M - close price
    */
    getPegType(): string;
    /**
    * Gets the offset to the pegged price
    *
    * @return The method returns a real value that represents the offset to the pegged price
    */
    getPegOffset(): number;
    /**
    * Gets the minimum allowed offset to the pegged price
    *
    * @return The method returns a real value that represents the minimum allowed offset to the pegged price
    */
    getPegOffsetMin(): number;
    /**
    * Gets the maximum allowed offset to the pegged price
    *
    * @return The method returns a real value that represents the maximum allowed offset to the pegged price
    */
    getPegOffsetMax(): number;
    /**
    * Gets the expiration date and time of the order, applicable only to orders with the DAY or GTD time-in-force option
    *
    * @return The method returns a datetime that represents the expiration date and time of the order
    */
    getExpireDate(): Date;
    /**
    * Gets the simulated delivery date when the position can be automatically closed, applicable only to orders placed from accounts with the day netting trading mode
    *
    * @return The method returns a string that represents the simulated delivery date when the position can be automatically closed
    */
    getValueDate(): string;
    /**
    * Gets the unique identifier of the environment that was used to place the order
    *
    * @return The method returns a string that represents the unique identifier of the environment that was used to place the order
    */
    getParties(): string;
    /**
    * Gets the side of the stop/limit order price: 1 - above the current market price, -1 - below the current market price
    *
    * @return The method returns an integer that represents the side of the stop/limit order price: 1 - above the current market price, -1 - below the current market price
    */
    getSide(): number;
    /**
    * Gets the price of the stop order attached to the entry order if there is one
    *
    * @return The method returns a real value that represents the price of the stop order attached to the entry order if there is one
    */
    getStop(): number;
    /**
    * Gets the price of the limit order attached to the entry order if there is one
    *
    * @return The method returns a real value that represents the price of the limit order attached to the entry order if there is one
    */
    getLimit(): number;
    /**
    * Gets the unique identification number of the stop order attached to the entry order if there is one
    *
    * @return The method returns a string that represents the unique identification number of the stop order attached to the entry order if there is one
    */
    getStopOrderId(): string;
    /**
    * Gets the unique identification number of the limit order attached to the entry order if there is one
    *
    * @return The method returns a string that represents the unique identification number of the limit order attached to the entry order if there is one
    */
    getLimitOrderId(): string;
    /**
    * Gets the rate type of the stop order
    *
    * @return The method returns an integer that represents the rate type of the stop order
    */
    getTypeStop(): number;
    /**
    * Gets the rate type of the limit order
    *
    * @return The method returns an integer that represents the rate type of the limit order
    */
    getTypeLimit(): number;
    /**
    * Gets the number of pips the market should move before the order moves the same number of pips after it
    *
    * @return The method returns an integer that represents the number of pips the market should move before the order moves the same number of pips after it
    */
    getStopTrailStep(): number;
    /**
    * Gets the market price at the time the order automatically moves following the market fluctuations
    *
    * @return The method returns a real value that represents the market price at the time the order automatically moves following the market fluctuations
    */
    getStopTrailRate(): number;
    /**
    * Gets the pips left until the stop is moved
    *
    * @return The method returns a real value that represents the pips left until the stop is moved
    */
    getStopMove(): number;
}
/**
* This class defines different types of contingency orders
*/
export class ContingencyType {
    /**
    * Contingency type: No
    */
    static readonly ContingencyTypeNo = 0;
    /**
    * Contingency type: OCO
    */
    static readonly ContingencyTypeOCO = 1;
    /**
    * Contingency type: OTO
    */
    static readonly ContingencyTypeOTO = 2;
    /**
    * Contingency type: ELS
    */
    static readonly ContingencyTypeELS = 3;
    /**
    * Contingency type: OTOCO
    */
    static readonly ContingencyTypeOTOCO = 4;
}
/**
* The class provides order change data
*/
export class ChangeOrderRequest {
    /**
    * Is enabled trailing stop
    *
    * @return The method returns a boolean value indicating whether or not a trailing stop is enabled for an instance of the ChangeOrderRequest class
    */
    isEnabledTrailing(): boolean;
    /**
    * Gets the trailing type
    *
    * @return The method returns an integer that represents the trailing type
    */
    getTrailingType(): number;
    /**
    * Gets the trailing step
    *
    * @return The method returns an integer that represents the trailing step
    */
    getTrailingStep(): number;
    /**
    * Gets the order amount
    *
    * @return The method returns an integer that represents the order amount
    */
    getAmount(): number;
    /**
    * Gets the unique identification number of order
    *
    * @return The method returns a string that represents the unique identification number of order
    */
    getOrderId(): string;
    /**
    * Gets the rate
    *
    * @return The method returns a real value that represents the rate
    */
    getRate(): number;
    /**
    * Gets the pips
    *
    * @return The method returns a real value that represents the pips
    */
    getPips(): number;
    /**
    * Gets the rate range
    *
    * @return The method returns a real value that represents the rate range
    */
    getRateRange(): number;
}
/**
* The builder for ChangeOrderRequest
*/
export class ChangeOrderRequestBuilder  extends ChangeOrderRequest{
    /**
    * Sets the trailing type
    *
    * @param trailingType The parameter for setting the trailing type of an order. Trailing type refers to the type of trailing stop that is used to protect profits on a trade
    * @return The method returns an instance of the ChangeOrderRequestBuilder class
    */
    setTrailingType(trailingType: number): ChangeOrderRequestBuilder;
    /**
    * Sets the trailing step
    *
    * @param trailingStep The parameter is using to set the trailing step of an order. The trailing step is the distance between the current market price and the trailing stop level
    * @return The method returns an instance of the ChangeOrderRequestBuilder class
    */
    setTrailingStep(trailingStep: number): ChangeOrderRequestBuilder;
    /**
    * Sets the number of lots 
    *
    * @param amount The parameter is using to set the number of lots for an order
    * @return The method returns an instance of the ChangeOrderRequestBuilder class
    */
    setAmount(amount: number): ChangeOrderRequestBuilder;
    /**
    * Sets the rate
    *
    * @param rate The parameter is using to set the rate for an order. Rate is an exchange rate between two currencies for a currency pair. The rate is used to determine the price at which the trade will be executed
    * @return The method returns an instance of the ChangeOrderRequestBuilder class
    */
    setRate(rate: number): ChangeOrderRequestBuilder;
    /**
    * Sets the pips
    *
    * @param pips The parameter pips is the smallest unit of price movement in a currency pair or financial instrument
    * @return The method returns an instance of the ChangeOrderRequestBuilder class
    */
    setPips(pips: number): ChangeOrderRequestBuilder;
    /**
    * Sets the rate range
    *
    * @param rateRange The parameter refers to the maximum distance between the current market price and the rate at which the trade will be executed
    * @return The method returns an instance of the ChangeOrderRequestBuilder class
    */
    setRateRange(rateRange: number): ChangeOrderRequestBuilder;
    /**
    * Sets the unique identification number of order
    *
    * @param orderId This parameter is a unique identification number assigned to each trade order. It helps to identify and track individual orders
    * @return The method returns an instance of the ChangeOrderRequestBuilder class
    */
    setOrderId(orderId: string): ChangeOrderRequestBuilder;
    /**
    * Creates and returns a new object ChangeOrderRequest based on the parameters that have been set using methods of the builder object
    *
    * @return The method returns an instance of the ChangeOrderRequestBuilder class
    */
    build(): ChangeOrderRequest;
}
/**
* The class provides information for a market order request
*/
export class MarketOrderRequest  extends OrderRequest{
    /**
    * Gets the pips at which the stop order must close the position
    *
    * @return The method returns a real value that represents the pips at which the stop order must close the position
    */
    getStopPips(): number;
    /**
    * Gets the pips at which the limit order must close the position
    *
    * @return The method returns a real value that represents the pips at which the stop limit must close the position
    */
    getLimitPips(): number;
    /**
    * Gets the price at which the stop order must close the position
    *
    * @return The method returns a real value that represents the price at which the stop order must close the position
    */
    getStopRate(): number;
    /**
    * Gets the price at which the limit order must close the position
    *
    * @return The method returns a real value that represents the price at which the limit order must close the position
    */
    getLimitRate(): number;
    /**
    * Checks whether the stop order is set for open market order
    *
    * @return The method returns a boolean value indicating whether a stop order is set for an open market order
    */
    isStopOrderSet(): boolean;
    /**
    * Checks whether the limit order is set for open market order
    *
    * @return The method returns a boolean value indicating whether a limit order is set for an open market order
    */
    isLimitOrderSet(): boolean;
    /**
    * Gets the rate range
    *
    * @return The method returns a real value that represents the rate range
    */
    getRateRange(): number;
    /**
    * Checks whether the rate range is set for open market order
    *
    * @return The method returns a boolean value indicating whether a rate range is set for an open market order
    */
    isRateRangeFilled(): boolean;
    /**
    * Is enabled trailing stop
    *
    * @return The method returns a boolean value indicating whether a trailing stop is enabled or not
    */
    isEnabledTrailingStop(): boolean;
    /**
    * Gets the trailing stop type
    *
    * @return The method returns an integer that represents the trailing stop type
    */
    getTrailingStopType(): number;
    /**
    * Gets the trailing stop step
    *
    * @return The method returns an integer that represents the trailing stop step
    */
    getTrailingStopStep(): number;
}
/**
* The builder of the MarketOrderRequest class
*/
export class MarketOrderRequestBuilder  extends MarketOrderRequest{
    /**
    * Sets the unique identification number of the account
    *
    * @param accountId Required parameter. The unique identification number that can be assigned to an account
    * @return The method returns an instance of the MarketOrderRequest class
    */
    setAccountId(accountId: string): MarketOrderRequestBuilder;
    /**
    * Sets the unique identification number of the offer
    *
    * @param offerId Required parameter. The unique identification number that can be assigned to an offer
    * @return The method returns an instance of the MarketOrderRequest class
    */
    setOfferId(offerId: string): MarketOrderRequestBuilder;
    /**
    * Sets the order amount
    *
    * @param amount Required parameter. The quantity of the instrument being traded that you want to buy or sell
    * @return The method returns an instance of the MarketOrderRequest class
    */
    setAmount(amount: number): MarketOrderRequestBuilder;
    /**
    * Sets the trade operation of the order
    *
    * @param buysell Required parameter. A parameter that specifies whether the order is a buy or sell order. It is a string value that can be set to either 'B' for buy or 'S' for sell
    * @return The method returns an instance of the MarketOrderRequest class
    */
    setBuySell(buysell: string): MarketOrderRequestBuilder;
    /**
    * Sets the time in force ('GTC', 'IOC', 'FOK', 'DAY', 'GTD')
    *
    * @param timeInForce A parameter that specifies how long the order will remain active before it is automatically cancelled
    * @return The method returns an instance of the MarketOrderRequest class
    */
    setTimeInForce(timeInForce: string): MarketOrderRequestBuilder;
    /**
    * Sets the expiration datetime Applicable only for orders with GTD time-in-force option.
    *
    * @param expirationDate The parameter that specifies the date and time at which the order will expire
    * @return The method returns an instance of the MarketOrderRequest class
    */
    setExpirationDate(expirationDate: Date): MarketOrderRequestBuilder;
    /**
    * Sets the custom ID
    *
    * @param customId A parameter that allows to assign a custom identifier to the order. This identifier can be any string value and it can be used to help track the order and identify it later
    * @return The method returns an instance of the MarketOrderRequest class
    */
    setCustomId(customId: string): MarketOrderRequestBuilder;
    /**
    * Sets the price at which the stop order must close the position
    *
    * @param rate The price at which a stop order will be executed. A stop order is an order type that is used to limit a trader's loss or to protect their profit. When the market reaches the stop rate, the stop order will be executed, and the position will be closed at the best available price
    * @return The method returns an instance of the MarketOrderRequest class
    */
    setStopRate(rate: number): MarketOrderRequestBuilder;
    /**
    * Sets the price at which the limit order must close the position
    *
    * @param rate The price at which a limit order must be executed
    * @return The method returns an instance of the MarketOrderRequest class
    */
    setLimitRate(rate: number): MarketOrderRequestBuilder;
    /**
    * Sets the pips the stop order must close the position at
    *
    * @param stopPips The distance between the current market price and the price at which a stop order should be executed
    * @return The method returns an instance of the MarketOrderRequest class
    */
    setStopPips(stopPips: number): MarketOrderRequestBuilder;
    /**
    * Sets the pips the limit order must close the position at
    *
    * @param limitPips The distance between the current market price and the price at which a limit order should be executed
    * @return The method returns an instance of the MarketOrderRequest class
    */
    setLimitPips(limitPips: number): MarketOrderRequestBuilder;
    /**
    * Sets the rate range
    *
    * @param rateRange The difference between the highest and lowest prices that you would accept for the trade
    * @return The method returns an instance of the MarketOrderRequest class
    */
    setRateRange(rateRange: number): MarketOrderRequestBuilder;
    /**
    * Enable trailing stop
    *
    * @param type The trailing type. Possible values: 0 - None, 1 - Dynamic, 2 - Fixed
    * @param stepInPips The trailing step in pips only for fixed trailing
    * @return The method returns an instance of the MarketOrderRequest class
    */
    enableTrailingStop(type: number, stepInPips: number): MarketOrderRequestBuilder;
    /**
    * Builds a new instance of the MarketOrderRequest class with the set parameters
    *
    * @return The method returns an instance of the MarketOrderRequest class
    */
    build(): MarketOrderRequest;
}
/**
* The class provides information for a close all positions market order request
*/
export class CloseAllPositionsRequest {
    /**
    * Gets the time in force ('GTC', 'IOC', 'FOK', 'DAY', 'GTD'). By default 'GTC'.
    *
    * @return The method returns a string that represents the time in force 
    */
    getTimeInForce(): string;
    /**
    * Gets the expiration datetime. Applicable only for orders with GTD time-in-force option.
    *
    * @return The method returns a datetime that represents the expiration datetime
    */
    getExpirationDate(): Date;
    /**
    * Required method. Gets the account ID
    *
    * @return The method returns a string that represents the account ID
    */
    getAcctId(): string;
    /**
    * Gets the custom ID to use in request
    *
    * @return The method returns a string that represents the custom ID to use in a request
    */
    getCustomId(): string;
    /**
    * Gets the rate range.
    *
    * @return The method returns a real value that represents the rate range
    */
    getRateRange(): number;
    /**
    * Checks whether the rate range is set for the request
    *
    * @return The method returns a boolean value indicating whether the rate range is set for the request
    */
    isRateRangeFilled(): boolean;
    /**
    * Gets the side for which remove positions. If not set, then positions will be removed for all sides
    *
    * @return The method returns a string that represents the side for which remove positions
    */
    getSide(): string;
    /**
    * Checks whether the side is set for the request
    *
    * @return The method returns a boolean value indicating whether the side is set for the request
    */
    isSideFilled(): boolean;
    /**
    * Gets the symbol for which remove positions. If not set, then positions will be removed for all instruments.
    *
    * @return The method returns a string that represents the symbol for which remove positions
    */
    getSymbol(): string;
    /**
    * Checks whether the symbol is set for the request
    *
    * @return The method returns a boolean value indicating whether the symbol is set for the request
    */
    isSymbolFilled(): boolean;
}
/**
* The builder for the CloseAllPositionsRequest
*/
export class CloseAllPositionsRequestBuilder  extends CloseAllPositionsRequest{
    /**
    * Sets the time in force
    *
    * @param timeInForce The time in force ('GTC', 'IOC', 'FOK', 'DAY', 'GTD')
    * @return The method returns a new instance of the CloseAllPositionsRequestBuilder class
    */
    setTimeInForce(timeInForce: string): CloseAllPositionsRequestBuilder;
    /**
    * Sets the expiration date
    *
    * @param expirationDate The expiration date
    * @return The method returns a new instance of the CloseAllPositionsRequestBuilder class
    */
    setExpirationDate(expirationDate: Date): CloseAllPositionsRequestBuilder;
    /**
    * Sets the account ID
    *
    * @param acctId The account ID
    * @return The method returns a new instance of the CloseAllPositionsRequestBuilder class
    */
    setAcctId(acctId: string): CloseAllPositionsRequestBuilder;
    /**
    * Sets the custom ID
    *
    * @param customId The custom ID
    * @return The method returns a new instance of the CloseAllPositionsRequestBuilder class
    */
    setCustomId(customId: string): CloseAllPositionsRequestBuilder;
    /**
    * Sets the rate range
    *
    * @param rateRange The rate range
    * @return The method returns a new instance of the CloseAllPositionsRequestBuilder class
    */
    setRateRange(rateRange: number): CloseAllPositionsRequestBuilder;
    /**
    * Sets the side
    *
    * @param side The side ('S', 'B')
    * @return The method returns a new instance of the CloseAllPositionsRequestBuilder class
    */
    setSide(side: string): CloseAllPositionsRequestBuilder;
    /**
    * Sets the symbol
    *
    * @param symbol The the symbol
    * @return The method returns a new instance of the CloseAllPositionsRequestBuilder class
    */
    setSymbol(symbol: string): CloseAllPositionsRequestBuilder;
    /**
    * Creates and returns a new CloseAllPositionsRequest object based on the parameters that have been set using the setter methods of the builder object
    *
    * @return The method returns a new instance of the CloseAllPositionsRequestBuilder class
    */
    build(): CloseAllPositionsRequest;
}
/**
* The class provides information for a stop/limit order request
*/
export class BaseSLOrderRequest {
    /**
    * Gets the price at which the stop/limit order must close the position
    *
    * @return The method returns a real value that represents the price at which the stop/limit order must close the position
    */
    getRate(): number;
    /**
    * Gets the pips at which the stop/limit order must close the position
    *
    * @return The method returns a real value that represents the pips at which the stop/limit order must close the position
    */
    getPips(): number;
    /**
    * Gets the unique identifier of the position to be closed by the stop/limit order
    *
    * @return The method returns a string that represents the unique identifier of the position to be closed by the stop/limit order
    */
    getTradeId(): string;
    /**
    * Gets the unique identifier of the order to be stop/limit order attached
    *
    * @return The method returns a string that represents the unique identifier of the order to be stop/limit order attached
    */
    getOrderId(): string;
    /**
    * Gets the custom ID
    *
    * @return The method returns a string that represents the custom identifier of the stop/limit order request
    */
    getCustomId(): string;
}
/**
* The builder of the LimitOrderRequest class
*/
export class LimitOrderRequestBuilder  extends LimitOrderRequest{
    /**
    * Sets the unique identification number of the position to be closed by the limit order
    *
    * @param tradeId The string that represents the unique identifier of the trade position to be closed
    * @return The method returns an instance of the LimitOrderRequest class
    */
    setTradeId(tradeId: string): LimitOrderRequestBuilder;
    /**
    * Sets the unique identifier of the order to be stop/limit order attached
    *
    * @param orderId The unique identifier of the order to which the stop/limit order will be attached
    * @return The method returns an instance of the LimitOrderRequest class
    */
    setOrderId(orderId: string): LimitOrderRequestBuilder;
    /**
    * Sets the price at which the limit order must close the position
    *
    * @param rate A real number that represents the price at which the limit order will be executed
    * @return The method returns an instance of the LimitOrderRequest class
    */
    setRate(rate: number): LimitOrderRequestBuilder;
    /**
    * Sets the pips at which the limit order must close the position
    *
    * @param pips A real number that represents the distance in pips from the current market price at which the limit order will be executed
    * @return The method returns an instance of the LimitOrderRequest class
    */
    setPips(pips: number): LimitOrderRequestBuilder;
    /**
    * Sets the custom ID
    *
    * @param customId A parameter that allows to assign a custom identifier to the order. This identifier can be any string value and it can be used to help track the order and identify it later
    * @return The method returns an instance of the LimitOrderRequest class
    */
    setCustomId(customId: string): LimitOrderRequestBuilder;
    /**
    * Builds a new instance of the LimitOrderRequest class with the set parameters
    *
    * @return The method returns an instance of the LimitOrderRequest class
    */
    build(): LimitOrderRequest;
}
/**
* Represents a stop order request that can be sent to a trading platform
*/
export class StopOrderRequest  extends BaseSLOrderRequest{
    /**
    * Is enabled trailing stop
    *
    * @return The method returns a boolean value indicating whether a trailing is enabled or not
    */
    isEnabledTrailing(): boolean;
    /**
    * Gets the trailing type
    *
    * @return The method returns the trailing type
    */
    getTrailingType(): number;
    /**
    * Gets the trailing step
    *
    * @return The method returns the trailing step
    */
    getTrailingStep(): number;
}
/**
* The builder of the StopOrderRequest class
*/
export class StopOrderRequestBuilder  extends StopOrderRequest{
    /**
    * Sets the unique identification number of the position to be closed by the stop order
    *
    * @param tradeId The parameter represents the unique identification number of the position to be closed by the stop order
    * @return The method returns an instance of the StopOrderRequest class
    */
    setTradeId(tradeId: string): StopOrderRequestBuilder;
    /**
    * Sets the unique identifier of the order to be stop/limit order attached
    *
    * @param orderId The unique identifier of the order to which the stop/limit order is attached
    * @return The method returns an instance of the StopOrderRequest class
    */
    setOrderId(orderId: string): StopOrderRequestBuilder;
    /**
    * Sets the price at which the stop order must close the position
    *
    * @param rate The price at which the stop order must close the position
    * @return The method returns an instance of the StopOrderRequest class
    */
    setRate(rate: number): StopOrderRequestBuilder;
    /**
    * Sets the pips at which the limit order must close the position
    *
    * @param pips The number of pips at which the limit order must close the position
    * @return The method returns an instance of the StopOrderRequest class
    */
    setPips(pips: number): StopOrderRequestBuilder;
    /**
    * Sets the custom ID
    *
    * @param customId A parameter that allows to assign a custom identifier to the order. This identifier can be any string value and it can be used to help track the order and identify it later
    * @return The method returns an instance of the StopOrderRequest class
    */
    setCustomId(customId: string): StopOrderRequestBuilder;
    /**
    * Enable trailing
    *
    * @param type The trailing type. Possible values: 0 - None, 1 - Dynamic, 2 - Fixed
    * @param stepInPips The trailing step in pips only for fixed trailing
    * @return The method returns an instance of the StopOrderRequest class
    */
    enableTrailing(type: number, stepInPips: number): StopOrderRequestBuilder;
    /**
    * Builds a new instance of the StopOrderRequest class with the set parameters
    *
    * @return The method returns an instance of the StopOrderRequest class
    */
    build(): StopOrderRequest;
}
/**
* The request to place a limit order
*/
export class LimitOrderRequest  extends BaseSLOrderRequest{
}
/**
* The class provides information for a close market order request
*/
export class CloseMarketOrderRequest {
    /**
    * Gets the unique identifier of the position to be closed by the stop/limit order
    *
    * @return The method returns a string that represents the unique identifier of the position to be closed by the stop/limit order
    */
    getTradeId(): string;
    /**
    * Gets the order amount
    *
    * @return The method returns an integer that represents the order amount
    */
    getAmount(): number;
    /**
    * Gets the time in force ('GTC', 'IOC', 'FOK', 'DAY', 'GTD')
    *
    * @return The method returns a string that represents the time in force 
    */
    getTimeInForce(): string;
    /**
    * Gets the expiration datetime. Applicable only for orders with GTD time-in-force option.
    *
    * @return The method returns a datetime that represents the expiration datetime
    */
    getExpirationDate(): Date;
    /**
    * Gets the custom ID
    *
    * @return The method returns a string that represents the custom identifier
    */
    getCustomId(): string;
    /**
    * Gets the rate range
    *
    * @return The method returns a real value that represents the rate range
    */
    getRateRange(): number;
    /**
    * Checks whether the rate range is set for open market order
    *
    * @return The method checks whether the rate range is set for an open market order and returns a boolean value indicating this condition
    */
    isRateRangeFilled(): boolean;
}
/**
* The builder of the CloseMarketOrderRequest class
*/
export class CloseMarketOrderRequestBuilder  extends CloseMarketOrderRequest{
    /**
    * Sets the unique identification number of the position to be closed by the stop order
    *
    * @param tradeId Required parameter. The unique identification number assigned to a specific trade or position. Parameter for the order, allowing to specify which trade or position you want to close
    * @return The method returns an instance of the CloseMarketOrderRequest class
    */
    setTradeId(tradeId: string): CloseMarketOrderRequestBuilder;
    /**
    * Sets the order amount
    *
    * @param amount Required parameter. The size or volume of a trade or position of the trade you want to close
    * @return The method returns an instance of the CloseMarketOrderRequest class
    */
    setAmount(amount: number): CloseMarketOrderRequestBuilder;
    /**
    * Sets the time in force ('GTC', 'IOC', 'FOK', 'DAY', 'GTD')
    *
    * @param timeInForce The parameter that specifies how long an order will remain active before it is either executed or cancelled. Helps to manage trades by setting specific time limits for orders
    * @return The method returns an instance of the CloseMarketOrderRequest class
    */
    setTimeInForce(timeInForce: string): CloseMarketOrderRequestBuilder;
    /**
    * Sets the expiration datetime. Applicable only for orders with GTD time-in-force option.
    *
    * @param expirationDate The expiration date is the date and time at which a pending order will automatically be cancelled if it has not been executed
    * @return The method returns an instance of the CloseMarketOrderRequest class
    */
    setExpirationDate(expirationDate: Date): CloseMarketOrderRequestBuilder;
    /**
    * Sets the custom ID
    *
    * @param customId The unique identifier that can be assigned to an order to help  identify and manage positions more effectively
    * @return The method returns an instance of the CloseMarketOrderRequest class
    */
    setCustomId(customId: string): CloseMarketOrderRequestBuilder;
    /**
    * Sets the rate range
    *
    * @param rateRange The maximum allowable difference between the market price and the price at which an order will be executed
    * @return The method returns an instance of the CloseMarketOrderRequest class
    */
    setRateRange(rateRange: number): CloseMarketOrderRequestBuilder;
    /**
    * Builds a new instance of the MarketOrderRequest class with the set parameters
    *
    * @return The method returns an instance of the CloseMarketOrderRequest class
    */
    build(): CloseMarketOrderRequest;
}
/**
* The class provides info for an order request
*/
export class OrderRequest {
    /**
    * Gets the unique identification number of the account to create the order on
    *
    * @return The method returns the unique identification number of the account
    */
    getAccountId(): string;
    /**
    * Gets the unique identification number of the instrument offer to create the order for
    *
    * @return The method returns the unique identification number of the instrument offer
    */
    getOfferId(): string;
    /**
    * Gets the order amount
    *
    * @return The method returns the order amount
    */
    getAmount(): number;
    /**
    * Gets the trade operation of the order
    *
    * @return The method returns the trade operation of the order ('S' or 'B')
    */
    getBuySell(): string;
    /**
    * Gets the time in force ('GTC', 'IOC', 'FOK', 'DAY', 'GTD')
    *
    * @return The method returns the time in force 
    */
    getTimeInForce(): string;
    /**
    * Gets the expiration datetime. Applicable only for orders with GTD time-in-force option.
    *
    * @return The method returns the expiration datetime
    */
    getExpirationDate(): Date;
    /**
    * Gets the custom ID
    *
    * @return The method returns the custom ID to use in a request
    */
    getCustomId(): string;
}
/**
* The class provides info for request new entry order
*/
export class EntryOrderRequest  extends OrderRequest{
    /**
    * Gets the pips at which the stop order must close the position
    *
    * @return The method returns the pips at which the stop order must close the position
    */
    getStopPips(): number;
    /**
    * Gets the pips at which the limit order must close the position
    *
    * @return The method returns a real value that represents the pips at which the limit order must close the position
    */
    getLimitPips(): number;
    /**
    * Gets the rate
    *
    * @return The method returns a real value that represents the rate
    */
    getRate(): number;
    /**
    * Gets the stop rate
    *
    * @return The method returns a real value that represents the stop rate
    */
    getStopRate(): number;
    /**
    * Gets the limit rate
    *
    * @return The method returns a real value that represents the limit rate
    */
    getLimitRate(): number;
    /**
    * Checks whether the stop order is set for open market order
    *
    * @return The method returns returns a boolean value indicating whether the stop order is set for an open market order
    */
    isStopOrderSet(): boolean;
    /**
    * Checks whether the limit order is set for open market order
    *
    * @return The method returns returns a boolean value indicating whether the limit order is set for an open market order
    */
    isLimitOrderSet(): boolean;
    /**
    * Gets the rate range
    *
    * @return The method returns a real value that represents the rate range
    */
    getRateRange(): number;
    /**
    * Is enabled trailing stop
    *
    * @return The method returns a boolean value indicating whether a trailing stop is enabled or not
    */
    isEnabledTrailingStop(): boolean;
    /**
    * Gets the trailing stop type
    *
    * @return The method returns an integer that represents the trailing stop type
    */
    getTrailingStopType(): number;
    /**
    * Gets the trailing stop step
    *
    * @return The method returns an integer that represents the trailing stop step
    */
    getTrailingStopStep(): number;
}
/**
* The builder for creating instances of the EntryOrderRequest class, which is used for creating orders in a trading platform
*/
export class EntryOrderRequestBuilder  extends EntryOrderRequest{
    /**
    * Sets the unique identification number of the offer
    *
    * @param accountId The unique identification number that can be assigned to an account
    * @return The method returns an instance of the EntryOrderRequest class
    */
    setAccountId(accountId: string): EntryOrderRequestBuilder;
    /**
    * Sets the unique identification number of the offer
    *
    * @param offerId The unique identification number that can be assigned to an offer
    * @return The method returns an instance of the EntryOrderRequest class
    */
    setOfferId(offerId: string): EntryOrderRequestBuilder;
    /**
    * Sets the number of lots 
    *
    * @param amount The number of lots, which is the standard unit size of a trading position
    * @return The method returns an instance of the EntryOrderRequest class
    */
    setAmount(amount: number): EntryOrderRequestBuilder;
    /**
    * Sets the amount 
    *
    * @param buysell The parameter that specifies whether the order is a buy or sell order. It is a string value that can be set to either 'B' for buy or 'S' for sell
    * @return The method returns an instance of the EntryOrderRequest class
    */
    setBuySell(buysell: string): EntryOrderRequestBuilder;
    /**
    * Sets the rate
    *
    * @param rate The exchange rate at which the order is to be executed. It represents the price at which you would buy or sell the instrument being traded
    * @return The method returns an instance of the EntryOrderRequest class
    */
    setRate(rate: number): EntryOrderRequestBuilder;
    /**
    * Sets the stop rate
    *
    * @param stopRate The price at which a stop order will be executed. A stop order is an order type that is used to limit a trader's loss or to protect their profit. When the market reaches the stop rate, the stop order will be executed, and the position will be closed at the best available price
    * @return The method returns an instance of the EntryOrderRequest class
    */
    setStopRate(stopRate: number): EntryOrderRequestBuilder;
    /**
    * Sets the limit rate
    *
    * @param limitRate The price at which a stop order will be executed
    * @return The method returns an instance of the EntryOrderRequest class
    */
    setLimitRate(limitRate: number): EntryOrderRequestBuilder;
    /**
    * Sets the pips the stop order must close the position at
    *
    * @param stopPips The number of pips at which a stop order will be executed. A pip is a unit of measurement that represents the smallest incremental price movement in a currency pair
    * @return The method returns an instance of the EntryOrderRequest class
    */
    setStopPips(stopPips: number): EntryOrderRequestBuilder;
    /**
    * Sets the pips the limit order must close the position at
    *
    * @param limitPips The number of pips at which a limit order will be executed
    * @return The method returns an instance of the EntryOrderRequest class
    */
    setLimitPips(limitPips: number): EntryOrderRequestBuilder;
    /**
    * Sets the rate range
    *
    * @param rateRange The range of prices within which the order can be executed
    * @return The method returns an instance of the EntryOrderRequest class
    */
    setRateRange(rateRange: number): EntryOrderRequestBuilder;
    /**
    * Enable trailing stop
    *
    * @param type The trailing type. Possible values: 0 - None, 1 - Dynamic, 2 - Fixed
    * @param stepInPips The trailing step in pips only for fixed trailing
    * @return The method returns an instance of the EntryOrderRequest class
    */
    enableTrailingStop(type: number, stepInPips: number): EntryOrderRequestBuilder;
    /**
    * Sets the time in force ('GTC', 'DAY', 'GTD')
    *
    * @param timeInForce A parameter that specifies how long the order will remain active before it is automatically cancelled
    * @return The method returns an instance of the EntryOrderRequest class
    */
    setTimeInForce(timeInForce: string): EntryOrderRequestBuilder;
    /**
    * Sets the expiration datetime. Applicable only for orders with GTD time-in-force option.
    *
    * @param expirationDate The date and time at which an order will be automatically cancelled if it has not been executed
    * @return The method returns an instance of the EntryOrderRequest class
    */
    setExpirationDate(expirationDate: Date): EntryOrderRequestBuilder;
    /**
    * Sets the custom ID
    *
    * @param customId A parameter that allows to assign a custom identifier to the order. This identifier can be any string value and it can be used to help track the order and identify it later
    * @return The method returns an instance of the EntryOrderRequest class
    */
    setCustomId(customId: string): EntryOrderRequestBuilder;
    /**
    * Builds a new instance of the EntryOrderRequest class with the set parameters
    *
    * @return The method returns an instance of the EntryOrderRequest class
    */
    build(): EntryOrderRequest;
}
/**
* An instance of this class stores connection parameters
*/
export class ConnectionParameters  implements IConnectionParameters{
    /**
    * Gets the login completion timeout in seconds
    *
    * @return The method returns an integer that represents the login completion timeout in seconds
    */
    getLoginTimeoutInSeconds(): number;
    /**
    * Gets the application name
    *
    * @return The method returns a string that represents the application name
    */
    getApplicationName(): string;
    /**
    * Gets the library name
    *
    * @return The method returns a string that represents the library name
    */
    getAgent(): string;
    /**
    * Gets the number of reconnection attempts
    *
    * @return The method returns an integer that represents the number of reconnection attempts
    */
    getReconnectionsNumber(): number;
    /**
    * Gets the reconnection delay in seconds
    *
    * @return The method returns an integer that represents the reconnection delay in seconds
    */
    getReconnectionDelayInSeconds(): number;
    /**
    * Gets the Resilience object
    *
    * @return The method returns the Resilience object
    */
    getResilience(): IResilience;
}
/**
* Sets additional connection parameters, including application name, number of reconnects before attempting to disconnect, resilience policy, agent name, login timeout, and number of seconds before reconnect
*/
export class ConnectionParametersBuilder  extends ConnectionParameters{
    /**
    * Returns object used to set and manage parameters related to resilience policies in the application
    *
    * @return The method returns an object used to set and manage parameters related to resilience policies in the application
    */
    getResilienceBuilder(): ResilienceBuilder;
    /**
    * Sets the number of seconds that the client application should wait for a login response before timing out
    *
    * @param loginTimeoutInSeconds An integer parameter, that sets a login timeout in seconds
    */
    setLoginTimeoutInSeconds(loginTimeoutInSeconds: number): void;
    /**
    * Sets application name
    *
    * @param applicationName The application name
    */
    setApplicationName(applicationName: string): void;
    /**
    * Sets agent's name
    *
    * @param agent The agent name
    */
    setAgent(agent: string): void;
    /**
    * Sets number of reconnects before attempting to disconnect
    *
    * @param reconnectionsNumber The number of reconnections
    */
    setReconnectionsNumber(reconnectionsNumber: number): void;
    /**
    * Sets the number of seconds before reconnecting
    *
    * @param reconnectionDelayInSeconds The number of seconds before reconnecting
    */
    setReconnectionDelayInSeconds(reconnectionDelayInSeconds: number): void;
    /**
    * Sets a resilience policy
    *
    * @param resilienceBuilder The parameters of resilience policies in the application
    */
    setResilienceBuilder(resilienceBuilder: ResilienceBuilder): void;
    /**
    * Sets the parameters of the connection
    *
    * @return This method returns an object of type ConnectionParameters
    */
    build(): ConnectionParameters;
    /**
    * Copies properties from one object to another, setting properties in the current object equal to the values of the chosen parameters by calling the appropriate accessor methods
    *
    * @param connectionParameters An instance of the interface containing properties related to login and reconnection
    */
    copyFrom(connectionParameters: IConnectionParameters): void;
}
/**
* The interface of a terminal
*/
export interface ITerminal {
    /**
    * Gets the Id of the terminal
    *
    * @return The method returns a string value that represents the Id of the terminal
    */
    getId(): string;
    /**
    * Gets the type of the terminal
    *
    * @return The method returns a string value that represents the type of the terminal
    */
    getType(): string;
    /**
    * Gets the name of the terminal
    *
    * @return The method returns a string value that represents the name of the terminal
    */
    getName(): string;
    /**
    * Gets the Sub Id of the terminal
    *
    * @return The method returns a string value that represents the Sub Id of the terminal
    */
    getSubId(): string;
    /**
    * Gets the status of the terminal
    *
    * @return The method returns a string value that represents the status of the terminal
    */
    getStatus(): string;
    /**
    * Gets the inactive text of the terminal
    *
    * @return The method returns a string value that represents the inactive text of the terminal
    */
    getInactiveText(): string;
    /**
    * Gets the URLs of the terminal
    *
    * @return The method returns an array of ITerminalUrl instances
    */
    getUrls(): ITerminalUrl[];
    /**
    * Gets the price streams of the terminal
    *
    * @return The method returns an array of ITerminalUrl instances
    */
    getStreams(): string[];
}
/**
* The interface of the terminal URL
*/
export interface ITerminalUrl {
    /**
    * Gets the name of the URL
    *
    * @return The method returns a string value that represents the name of the URL
    */
    getName(): string;
    /**
    * Gets the path of the URL
    *
    * @return The method returns a string value that represents the path of the URL
    */
    getUrl(): string;
    /**
    * Gets the terminal protocol of the URL
    *
    * @return The method returns a string value that represents the terminal protocol of the URL
    */
    getTerminalProtocol(): string;
    /**
    * Gets the HTTP protocol of the URL
    *
    * @return The method returns a string value that represents the HTTP protocol of the URL
    */
    getProtocol(): string;
    /**
    * Checks whether the connection is secure
    *
    * @return The method returns a boolean value that represents whether the connection is secure
    */
    isSecure(): boolean;
    /**
    * Gets the specified URL parameter
    *
    * @param _param The parameter name
    * @return The method returns a string value that represents the specified URL parameter
    */
    getParam(_param: string): string;
    /**
    * Gets keys of all URL parameters
    *
    * @return The method returns an array of string keys
    */
    getParamKeys(): string[];
}
/**
* The interface of the trading terminal
*/
export interface ITradingTerminal  extends ITerminal{
    /**
    * Gets the description of the terminal
    *
    * @return The method returns a string value
    */
    getDescription(): string;
    /**
    * Gets the password salt of the terminal
    *
    * @return The method returns a string value
    */
    getSalt(): string;
    /**
    * Gets the associated price terminal instances
    *
    * @return The method returns array of ITerminal instance or 'nil' if the price terminal is not set
    */
    getPriceTerminals(): ITerminal[];
    /**
    * Returns the interface of the trading terminal instance associated with the specified price stream ID
    *
    * @param streamId A price stream ID is an unique identificator of a continuous stream of live market data for a specific financial instrument. Parameter is a string representing the ID of the price stream
    * @return The method returns the interface of the trading terminal instance associated with the specified price stream ID
    */
    getPriceTerminalByPriceStream(streamId: string): ITerminal;
    /**
    * Gets the associated chart terminal instance
    *
    * @return The method returns an ITerminal instance or 'nil' if the chart terminal is not set
    */
    getChartTerminal(): ITerminal;
}
/**
* The class provides access to offer information of a trading instrument, its current prices, high and low prices for the trading day
*/
export class Offer {
    /**
    * Gets the current market price the instrument can be sold at
    *
    * In the case of FX instruments, the returned value is expressed in the instrument counter currency per one unit of the base currency
    * In the case of CFD instruments, the returned value is expressed in the instrument native currency per one contract
    *
    * @return The method returns a real value that represents the current market price the instrument can be sold at
    */
    getBid(): number;
    /**
    * Gets the current market price the instrument can be bought at
    *
    * In the case of FX instruments, the returned value is expressed in the instrument counter currency per one unit of the base currency
    * In the case of CFD instruments, the returned value is expressed in the instrument native currency per one contract
    *
    * @return The method returns a real value that represents the current market price the instrument can be bought at
    */
    getAsk(): number;
    /**
    * Gets the highest ask price (buy price) of the instrument for the current trading day
    *
    * @return The method returns a real value that represents the highest ask price (buy price) of the instrument for the current trading day
    */
    getHigh(): number;
    /**
    * Gets the lowest bid price (sell price) of the instrument for the current trading day
    *
    * @return The method returns a real value that represents the lowest bid price (sell price) of the instrument for the current trading day
    */
    getLow(): number;
    /**
    * Gets the unique identification number of the offer
    *
    * @return The method returns a string that represents the unique identification number of the offer
    */
    getOfferId(): string;
    /**
    * Gets the trading status of the bid price, it defines whether the bid price of the instrument is available for trading or not
    *
    * The possible return values are:
    * T - The bid price is available for trading
    * I - The bid price is view only
    * N - The bid price is not available for trading
    *
    * @return The method returns a string that represents the trading status of the bid price, it defines whether the bid price of the instrument is available for trading or not
    */
    getBidTradable(): string;
    /**
    * Gets the trading status of the ask price, it defines whether the ask price of the instrument is available for trading or not
    *
    * The possible return values are:
    * T - The ask price is available for trading
    * I - The ask price is view only
    * N - The ask price is not available for trading
    *
    * @return The method returns a string that represents the trading status of the ask price, it defines whether the ask price of the instrument is available for trading or not
    */
    getAskTradable(): string;
    /**
    * Gets the unique identification number of the pair of prices (bid and ask) at which the instrument can be traded
    *
    * @return The method returns a string that represents the unique identification number of the price pair at which the instrument can be traded
    */
    getQuoteId(): string;
    /**
    * Gets the tick volume of the current minute
    *
    * @return The method returns an integer that represents the tick volume of the current minute
    */
    getVolume(): number;
    /**
    * Gets the date and time of the last update of the instrument
    *
    * @return The method returns a datetime value that represents the date and time of the last update of the instrument
    */
    getTime(): Date;
}
/**
* The class provides information about a financial instrument offer
*/
export class OfferInfo {
    /**
    * This method is a constructor for the class provides information about a financial instrument offer. The constructor does not return any values
    */
    Offer(): void;
    /**
    * Gets the unique identification number of the offer
    *
    * @return The method returns the unique identification number of the offer
    */
    getOfferId(): string;
}
/**
* The class provides access to raw offer information of a trading instrument, its received from the trading server without calculated fields.
*/
export class RawOffer {
    /**
    * Gets the current market price the instrument can be sold at
    *
    * In the case of FX instruments, the returned value is expressed in the instrument counter currency per one unit of the base currency
    * In the case of CFD instruments, the returned value is expressed in the instrument native currency per one contract
    *
    * @return The method returns a real value that represents the current market price the instrument can be sold at
    */
    getBid(): number;
    /**
    * Gets the current market price the instrument can be bought at
    *
    * In the case of FX instruments, the returned value is expressed in the instrument counter currency per one unit of the base currency
    * In the case of CFD instruments, the returned value is expressed in the instrument native currency per one contract
    *
    * @return The method returns a real value that represents the current market price the instrument can be bought at
    */
    getAsk(): number;
    /**
    * Gets the highest ask price (buy price) of the instrument for the current trading day
    *
    * @return The method returns a real value that represents the highest ask price (buy price) of the instrument for the current trading day
    */
    getHigh(): number;
    /**
    * Gets the lowest bid price (sell price) of the instrument for the current trading day
    *
    * @return The method returns a real value that represents the lowest bid price (sell price) of the instrument for the current trading day
    */
    getLow(): number;
    /**
    * Gets the unique identification number of the offer
    *
    * @return The method returns a string that represents the unique identification number of the offer
    */
    getOfferId(): string;
    /**
    * Gets the trading status of the bid price, it defines whether the bid price of the instrument is available for trading or not
    *
    * The possible return values are:
    * T - The bid price is available for trading
    * I - The bid price is view only
    * N - The bid price is not available for trading
    *
    * @return The method returns a string that represents the trading status of the bid price, it defines whether the bid price of the instrument is available for trading or not
    */
    getBidTradable(): string;
    /**
    * Gets the trading status of the ask price, it defines whether the ask price of the instrument is available for trading or not
    *
    * The possible return values are:
    * T - The ask price is available for trading
    * I - The ask price is view only
    * N - The ask price is not available for trading
    *
    * @return The method returns a string that represents the trading status of the ask price, it defines whether the ask price of the instrument is available for trading or not
    */
    getAskTradable(): string;
    /**
    * Gets the instrument price precision
    *
    * It defines the number of digits after the decimal point in the instrument price quote. For example, it is 5 for EUR/USD and 3 for USD/JPY
    *
    * @return The method returns an integer that represents the instrument price precision
    */
    getDigits(): number;
    /**
    * Gets the size of one pip
    *
    * It defines the smallest move the instrument price can make. In the case of FX instruments, it is expressed in the instrument counter currency. In the case of CFD instruments, it is expressed in the instrument native currency
    *
    * @return The method returns a real value that represents the size of one pip
    */
    getPointSize(): number;
    /**
    * Gets the instrument trading status
    *
    * The possible return values are:
    * O - Open, in other words, the instrument is tradable
    * C - Closed, in other words, the instrument is not tradable
    * <EMPTY> - Unknown, in other words, the trading status of the instrument is unknown
    *
    * @return The method returns a string that represents the instrument trading status
    */
    getTradingStatus(): string;
}
/**
* The class provides access to summary information about all open positions in one instrument
*/
export class PositionsSummary {
    /**
    * Gets the symbol of the instrument. For example, EUR/USD
    *
    * @return The method returns a string that repesents the symbol of the instrument
    */
    getInstrument(): string;
    /**
    * Gets the unique identification number of the instrument offer
    *
    * @return The method returns a string that repesents the unique identification number of the instrument offer
    */
    getOfferId(): string;
    /**
    * Gets the current profit/loss of all short (sell) positions in the account currency. It includes commissions, interest, and dividends
    *
    * @return The method returns a real value that represents the current profit/loss of all short (sell) positions in the account currency
    */
    getSellNetPL(): number;
    /**
    * Gets the current profit/loss of all short (sell) positions in pips
    *
    * @return The method returns a real value that represents the current profit/loss of all short (sell) positions in pips
    */
    getSellPipPL(): number;
    /**
    * Gets the amount of used margin currently allocated to maintain all short (sell) positions
    *
    * @return The method returns a real value that represents the amount of used margin currently allocated to maintain all short (sell) positions
    */
    getSellUsedMr(): number;
    /**
    * Gets the cumulative amount of all short (sell) positions
    *
    * @return The method returns an integer that represents the cumulative amount of all short (sell) positions
    */
    getSellAmount(): number;
    /**
    * Gets the average open price of all short (sell) positions
    *
    * @return The method returns a real value that represents the average open price of all short (sell) positions
    */
    getSellAvgOpen(): number;
    /**
    * Gets the current sell (bid) price for your long (buy) positions
    *
    * @return The method returns a real value that represents the current sell (bid) price for your long (buy) positions
    */
    getSellClose(): number;
    /**
    * Gets the current profit/loss of all long (buy) positions in the account currency. It includes commissions, interest, and dividends
    *
    * @return The method returns a real value that represents the current profit/loss of all long (buy) positions in the account currency
    */
    getBuyNetPL(): number;
    /**
    * Gets the current profit/loss of all long (buy) positions in pips
    *
    * @return The method retuns a real value that represents the current profit/loss of all long (buy) positions in pips
    */
    getBuyPipPL(): number;
    /**
    * Gets the amount of used margin currently allocated to maintain all buy (long) positions
    *
    * @return The method returns a real value that represents the amount of used margin currently allocated to maintain all buy (long) positions
    */
    getBuyUsedMr(): number;
    /**
    * Gets the cumulative amount of all long (buy) positions
    *
    * @return The method returns an integer that represents the cumulative amount of all long (buy) positions
    */
    getBuyAmount(): number;
    /**
    * Gets the average open price of all long (buy) positions
    *
    * @return The method returns a real value that represents the average open price of all long (buy) positions
    */
    getBuyAvgOpen(): number;
    /**
    * Gets the current buy (long) price for your short (sell) positions
    *
    * @return The method returns a real value that represents the current buy (long) price for your short (sell) positions
    */
    getBuyClose(): number;
    /**
    * Gets the amount of all positions, both long and short, (abs(S amount - B amount))
    *
    * @return The method returns an integer that represents the amount of all positions
    */
    getAmount(): number;
    /**
    * Gets the current profit or loss of all positions (both long and short) in the account currency
    *
    * @return The method returns a real value that represents the current profit or loss of all positions
    */
    getGrossPL(): number;
    /**
    * Gets the current profit or loss of all 'buy' positions (both long and short) in the account currency
    *
    * @return The method returns a real value that represents the current profit or loss of all 'buy' positions (both long and short) in the account currency
    */
    getBuyGrossPL(): number;
    /**
    * Gets the current profit or loss of all 'sell' positions (both long and short) in the account currency
    *
    * @return The method returns a real value that represents the current profit or loss of all 'sell' positions (both long and short) in the account currency
    */
    getSellGrossPL(): number;
    /**
    * Gets the amount of rollover interest received or paid for all positions
    *
    * @return The method returns a real value that represents the amount of rollover interest received or paid for all positions
    */
    getRolloverInterest(): number;
    /**
    * Gets the profit or loss of all positions (both long and short) in the account currency. It includes commissions, interest, and dividends
    *
    * @return The method returns a real value that represents the profit or loss of all positions (both long and short) in the account currency
    */
    getNetPL(): number;
    /**
    * Gets the number of positions in this instrument
    *
    * @return The method returns a real value that represents the number of positions in this instrument
    */
    getNumberOfPositions(): number;
    /**
    * Gets the default sort order position
    *
    * @return The method returns a real value that represents the default sort order position
    */
    getSortOrder(): number;
    /**
    * Gets the amount of dividends earned or paid for all positions
    *
    * @return The method returns a real value that represents the amount of dividends earned or paid for all positions
    */
    getDividends(): number;
}
/**
* The class provides value and quantity of a pip cost
*/
export class PipCost {
    /**
    * Gets quantity for pip cost value
    *
    * @return The method returns the quantity
    */
    getQuantity(): number;
    /**
    * Gets pip cost value
    *
    * @return The method returns a pip cost value
    */
    getValue(): number;
}
/**
* The class for the trailing type
*/
export class TrailingType {
    /**
    * Trailing: denied
    */
    static readonly TrailingDenied = 0;
    /**
    * Trailing: dynamic
    */
    static readonly TrailingDynamic = 1;
    /**
    * Trailing: fluctuate
    */
    static readonly TrailingFluctuate = 2;
    /**
    * Trailing: dynamic and fluctuate
    */
    static readonly TrailingDynamicAndFluctuate = 3;
    /**
    * Trailing: stop dynamic
    */
    static readonly TrailingStopDynamic = 4;
    /**
    * Trailing: stop fluctuate
    */
    static readonly TrailingStopFluctuate = 5;
    /**
    * Takes an integer parameter trailingType, sets the class variable trailingType to the value of the trailingType parameter passed into the method. This method allows for the value of trailingType to be set dynamically. Method is intended to be called by other methods in the program to update the value of trailingType
    *
    * @param trailingType An integer parameter, that sets a type of trailing behavior
    */
    setTrailingType(trailingType: number): void;
    /**
    * Checks whether the trailing type is TrailingDenied
    *
    * @return The method returns a boolean value. If the trailing type is TrailingDenied, the function returns 'true' otherwise it returns 'false'
    */
    isTrailingDenied(): boolean;
    /**
    * Checks whether the trailing type is TrailingDynamic
    *
    * @return The method returns a boolean value. If the trailing type is TrailingDynamic, the function returns 'true' otherwise it returns 'false'
    */
    isTrailingDynamic(): boolean;
    /**
    * Checks whether the trailing type is TrailingFluctuate
    *
    * @return The method returns a boolean value. If the trailing type is TrailingFluctuate, the function returns 'true' otherwise it returns 'false'
    */
    isTrailingFluctuate(): boolean;
    /**
    * Checks whether the trailing type is TrailingDynamicAndFluctuate
    *
    * @return The method returns a boolean value. If the trailing type is TrailingDynamicAndFluctuate, the function returns 'true' otherwise it returns 'false'
    */
    isTrailingDynamicAndFluctuate(): boolean;
    /**
    * Checks whether the trailing type is TrailingStopDynamic
    *
    * @return The method returns a boolean value. If the trailing type is TrailingStopDynamic, the function returns 'true' otherwise it returns 'false'
    */
    isTrailingStopDynamic(): boolean;
    /**
    * Checks whether the trailing type is TrailingStopFluctuate
    *
    * @return The method returns a boolean value. If the trailing type is TrailingStopFluctuate, the function returns 'true' otherwise it returns 'false'
    */
    isTrailingStopFluctuate(): boolean;
}
/**
* The error codes
*/
export class FXConnectLiteErrorCodes {
    /**
    * Error: code undefined
    */
    static readonly CODE_UNDEFINED = 0;
    /**
    * Error: code session not connected
    */
    static readonly CODE_SESSION_NOT_CONNECTED = 1;
    /**
    * Error: code required parameter not set
    */
    static readonly CODE_REQUIRED_PARAMETER_NOT_SET = 2;
    /**
    * Error: code instrument is not found
    */
    static readonly CODE_INSTRUMENT_IS_NOT_FOUND = 3;
    /**
    * Error: code not found terminal for price stream
    */
    static readonly CODE_NOT_FOUND_TERMINAL_FOR_PRICE_STREAM = 4;
    /**
    * Error: code no required data
    */
    static readonly CODE_DATA_NOT_EXIST = 5;
}
/**
* The class of the time frames
*/
export class Timeframe {
    /**
    * Gets the size of the time frame
    *
    * @return The method returns an integer that represents the size of the time frame
    */
    getSize(): number;
    /**
    * Gets the type of the time frame
    *
    * @return The method returns an integer that represents the type of the time frame
    */
    getUnit(): number;
    /**
    * Creates a new instance of the class of the time frames with the specified unit and size parameters
    *
    * @param unit The type of time frame that is being created, such as minutes, hours, days, or ticks
    * @param size The length of the time frame in the specified 'unit'
    * @return The method returns a new instance of the class of the time frames with the specified unit and size parameters
    */
    static create(unit: number, size: number): Timeframe;
    /**
    * Returns a string representation of the  object, which includes the size and unit properties. This string can be used to display information about the object, or to compare objects
    *
    * @return The method returns a string that represents the  object, which includes the size and unit properties
    */
    toString(): string;
}
/**
* The class with all unit types of time frames
*/
export class TimeframeUnit {
    /**
    * Time frame: unknown
    */
    static readonly Unknown = 0;
    /**
    * Time frame: minute
    */
    static readonly Minute = 1;
    /**
    * Time frame: hour
    */
    static readonly Hour = 2;
    /**
    * Time frame: day
    */
    static readonly Day = 3;
    /**
    * Time frame: week
    */
    static readonly Week = 4;
    /**
    * Time frame: month
    */
    static readonly Month = 5;
    /**
    * Time frame: year
    */
    static readonly Year = 6;
    /**
    * Time frame: tick
    */
    static readonly Tick = 7;
    /**
    * Takes an integer input representing a time frame unit and returns a string representation of that unit. If the input value matches one of the predefined constants in the class, the function returns the corresponding string representation. If the input value does not match any of the predefined constants, the function returns 'unknown'. This function is useful for displaying time values in a human-readable format
    *
    * @param unit An integer value that represents a time frame unit
    * @return The method returns a string that represents a time frame unit
    */
    static toString(unit: number): string;
    /**
    * Takes a string input representing a time frame unit and returns an integer representation of that unit
    *
    * @param unit A time frame unit
    * @return The method returns an integer that represents a time frame unit
    */
    static fromString(unit: string): number;
}
/**
* This class defines a set of constants and methods to represent different types of users
*/
export class UserKind {
    /**
    * Type of user: trader
    */
    static readonly TRADER_NAME = "Trader";
    /**
    * Type of user: customer
    */
    static readonly CUSTOMER_NAME = "Customer";
    /**
    * Type of user: dealer
    */
    static readonly DEALER_NAME = "Dealer";
    /**
    * Type of user: admin
    */
    static readonly ADMIN_NAME = "Admin";
    /**
    * Type of user: merchant
    */
    static readonly MERCHANT_NAME = "Merchant";
    /**
    * Type of user: undefined
    */
    static readonly UNDEFINED_NAME = "Undefined";
    /**
    * Creates a new instance of the class with a specified user type
    *
    * @param kind  The user type as a string
    * @return The method returns an instance of the UserKind class
    */
    static create(kind: string): UserKind;
    /**
    * Returns a boolean value indicating if the user type is a 'Trader'
    *
    * @return The method returns a boolean value indicating if the user type is a 'Trader'
    */
    isTrader(): boolean;
    /**
    * Returns a boolean value indicating if the user type is a 'Customer'
    *
    * @return The method returns a boolean value indicating if the user type is a 'Customer'
    */
    isCustomer(): boolean;
    /**
    * Returns a boolean value indicating if the user type is a 'Dealer'
    *
    * @return The method returns a boolean value indicating if the user type is a 'Dealer'
    */
    isDealer(): boolean;
    /**
    * Returns a boolean value indicating if the user type is a 'Admin'
    *
    * @return The method returns a boolean value indicating if the user type is a 'Admin'
    */
    isAdmin(): boolean;
    /**
    * Returns a boolean value indicating if the user type is a 'Merchant'
    *
    * @return The method returns a boolean value indicating if the user type is a 'Merchant'
    */
    isMerchant(): boolean;
    /**
    * Returns a string representing the name of the user type
    *
    * @return The method returns a string representing the name of the user type
    */
    getName(): string;
}
/**
* The factory for creating a session of connection to the trading system
*/
export class FXConnectLiteSessionFactory {
    /**
    * Creates a session of connection to the trading system
    *
    * @param applicationName The application name
    * @return The method returns session of connection to the trading system as an instance of the IFXConnectLiteSession interface
    */
    static create(applicationName: string): IFXConnectLiteSession;
    /**
    * Creates a session of connection to the trading system with custom parameters
    *
    * @param applicationName The application name
    * @param connectionParameters The connection parameters
    * @return The method returns a session of connection to the trading system, which allows for providing custom connection parameters
    */
    static createWithCustomParameters(applicationName: string, connectionParameters: IConnectionParameters): IFXConnectLiteSession;
    /**
    * Create a session of connection to the trading system with custom parameters and flags
    *
    * @param applicationName The application name
    * @param connectionParameters The connection parameters
    * @param flags Flags
    * @return The method returns a session of connection to the trading system, which allows for providing custom connection parameters and flags
    */
    static createWithCustomParametersAndFlags(applicationName: string, connectionParameters: IConnectionParameters, flags: string[]): IFXConnectLiteSession;
    /**
    * Create a session of connection to the trading system with flags
    *
    * @param applicationName The application name
    * @param flags Flags
    * @return The method returns a session of connection to the trading system, which allows for providing custom flags
    */
    static createWithFlags(applicationName: string, flags: string[]): IFXConnectLiteSession;
}
/**
* The interface for getting access to the trading system
*/
export interface IFXConnectLiteSession {
    /**
    * Subscribes to the connection status change event
    *
    * @param listener An instance of the callback class for handling connection status change events
    */
    subscribeConnectionStatusChange(listener: IConnectionStatusChangeListener): void;
    /**
    * Unsubscribes from the connection status change event
    *
    * @param listener An instance of the callback class for handling connection status change events
    */
    unsubscribeConnectionStatusChange(listener: IConnectionStatusChangeListener): void;
    /**
    * Logs the user in to the trading system
    *
    * @param user The username
    * @param password The password
    * @param tradingSystemUrl The URL of the server. The URL must be a full URL, including the path to the host descriptor
    * @param connection The name of the connection, for example 'Demo' or 'Real'
    * @param loginCallback An instance of the callback class for handling login events
    */
    login(user: string, password: string, tradingSystemUrl: string, connection: string, loginCallback: ILoginCallback): void;
    /**
    * Logs the user in to the trading system by SSO token
    *
    * @param user The username
    * @param ssoToken The SSO token
    * @param tradingSystemUrl The URL of the server. The URL must be a full URL, including the path to the host descriptor
    * @param connection The name of the connection, for example 'Demo' or 'Real'
    * @param loginCallback An instance of the callback class for handling login events
    */
    loginBySsoToken(user: string, ssoToken: string, tradingSystemUrl: string, connection: string, loginCallback: ILoginCallback): void;
    /**
    * Logs the user in to the trading system by external SSO token
    *
    * @param ssoToken The SSO token
    * @param tradingSystemUrl The URL of the server. The URL must be a full URL, including the path to the host descriptor
    * @param connection The name of the connection, for example 'Demo' or 'Real'
    * @param loginCallback An instance of the callback class for handling login events
    */
    loginByExternalSsoToken(ssoToken: string, tradingSystemUrl: string, connection: string, loginCallback: ILoginCallback): void;
    /**
    * Attaching to an existing session by JSON web token
    *
    * @param jwt The JSON web token
    * @param tradingSystemUrl The URL of the server. The URL must be a full URL, including the path to the host descriptor
    * @param connection The name of the connection, for example 'Demo' or 'Real'
    */
    attach(jwt: string, tradingSystemUrl: string, connection: string): void;
    /**
    * Closes the existing connection with the trading system
    */
    logout(): void;
    /**
    * Gets the trading settings provider
    *
    * @return The method returns an object that implements the ITradingSettingsProvider interface, which allows getting the trading settings from the trading system
    */
    getTradingSettingsProvider(): ITradingSettingsProvider;
    /**
    * Gets the system settings provider
    *
    * @return The method returns an object that implements the ISystemSettingsProvider interface, which allows getting the system settings from the trading system
    */
    getSystemSettingsProvider(): ISystemSettingsProvider;
    /**
    * Gets the current status of connection to the trading system
    *
    * @return The method returns the current status of the connection 
    */
    getConnectionStatus(): IConnectionStatus;
    /**
    * Gets the accounts manager
    *
    * @return The method returns an object that implements the IAccountsManager interface, which allows managing the trading accounts associated with the logged-in user
    */
    getAccountsManager(): IAccountsManager;
    /**
    * Gets the open positions manager
    *
    * @return The method returns an object that implements the IOpenPositionsManager interface, which allows managing the open positions of the logged-in user
    */
    getOpenPositionsManager(): IOpenPositionsManager;
    /**
    * Gets the closed positions manager
    *
    * @return The method returns an object that implements the IClosedPositionsManager interface, which allows managing the closed positions of the logged-in user
    */
    getClosedPositionsManager(): IClosedPositionsManager;
    /**
    * Gets the closed positions manager
    *
    * @param accountInfo The account info
    * @return The method returns an object that implements the IClosedPositionsManager interface, which allows managing the closed positions of a specific trading account
    */
    getClosedPositionsManagerByAccount(accountInfo: AccountInfo): IClosedPositionsManager;
    /**
    * Gets the history prices manager
    *
    * @return The method returns an object that implements the IPriceHistoryManager interface, which allows getting historical price data for a specified symbol from the trading system
    */
    getPriceHistoryManager(): IPriceHistoryManager;
    /**
    * Gets the offers manager
    *
    * @return The method returns an object that implements the IOffersManager interface, which allows managing the offers available in the trading system. Offers include financial instruments that can be traded in the system
    */
    getOffersManager(): IOffersManager;
    /**
    * Gets the instruments manager
    *
    * @return The method returns an object that implements the IInstrumentsManager interface, which allows managing the instruments available in the trading system
    */
    getInstrumentsManager(): IInstrumentsManager;
    /**
    * Gets the orders manager
    *
    * @return The method returns an object that implements the IOrdersManager interface
    */
    getOrdersManager(): IOrdersManager;
    /**
    * Gets the orders manager
    *
    * @param accountInfo The account info
    * @return The method returns an interface, which represents the orders manager for a specific account
    */
    getOrdersManagerByAccount(accountInfo: AccountInfo): IOrdersManager;
    /**
    * Gets the positions summary manager
    *
    * @return The method returns an interface, which represents the positions summary manager 
    */
    getPositionsSummaryManager(): IPositionsSummaryManager;
    /**
    * Gets the positions summary manager
    *
    * @param accountInfo The account info
    * @return The method returns the positions summary manager for a specific account
    */
    getPositionsSummaryManagerByAccount(accountInfo: AccountInfo): IPositionsSummaryManager;
    /**
    * Gets the rollover profiles manager
    *
    * @return The method returns an interface, which represents the rollover profiles manager in the software
    */
    getRolloverProfilesManager(): IRolloverProfilesManager;
    /**
    * Sets the logger
    *
    * @param logger An instance of a class that implements the interface. This parameter is used to set the logger that will be used for logging events and messages in the trading system
    */
    setLogger(logger: ILogger): void;
    /**
    * Sets the event logger
    *
    * @param eventLogger An instance of a class that implements the interface. The purpose of the event logger is to log events that occur in the trading system
    */
    setEventLogger(eventLogger: IEventLogger): void;
    /**
    * Gets the account commissions manager
    *
    * @return The method returns an interface, which represents the account commissions manager in the software
    */
    getAccountCommissionsManager(): IAccountCommissionsManager;
    /**
    * Gets the margin provider
    *
    * @return The method returns an interface, which represents the margin provider
    */
    getMarginProvider(): IMarginProvider;
    /**
    * Gets the dividends provider
    *
    * @return The method returns an interface, which represents the dividends provider
    */
    getDividendsProvider(): IDividendsProvider;
    /**
    * Gets the leverage profiles manager
    *
    * @return The method returns an interface, which represents the leverage profiles manager
    */
    getLeverageProfilesManager(): ILeverageProfilesManager;
    /**
    * Gets the open positions manager by account
    *
    * @param accountInfo An instance of the class, which contains information about the account, such as the account number, the account type, and the currency. Parameter is used to retrieve the open positions manager for a specific account
    * @return The method returns interface, which represents the open positions manager for a specific account
    */
    getOpenPositionsManagerByAccount(accountInfo: AccountInfo): IOpenPositionsManager;
    /**
    * Gets the client messages manager
    *
    * @return The method returns an object that implements the IClientMessagesManager interface
    */
    getClientMessagesManager(): IClientMessagesManager;
    /**
    * Gets the MDT connection manager
    *
    * @return The method returns an object that implements the IMdtConnectionManager interface
    */
    getMdtConnectionManager(): IMdtConnectionManager;
    /**
    * Gets the dependencies manager
    *
    * @return The method returns an object that implements the IDependenciesManager interface
    */
    getDependenciesManager(): IDependenciesManager;
}
/**
* The interface for error
*/
export interface IFXConnectLiteError {
    /**
    * Gets the error message
    *
    * @return The method returns the error message
    */
    getMessage(): string;
}
/**
* The base monitoring events.
*/
export class BaseEvent {
    /**
    * Gets the name of event
    *
    * @return The method returns a string that represents the name of event
    */
    getName(): string;
    /**
    * Gets the date time of event
    *
    * @return The method retuns a datetime value that represents the date time of event
    */
    getDateTime(): Date;
}
/**
* This class provides methods to get the error message and create a new object with an error message
*/
export class ErrorEvent  extends BaseEvent{
    /**
    * Gets error message
    *
    * @return The method retuns a string that represents the error message
    */
    getErrorMessage(): string;
    /**
    * Constructs and returns a new instance of the class with the provided name, event date, and error message
    *
    * @param name A string that represents the name of the object instance being created
    * @param eventDate The event date
    * @param errorMessage A string represents the event message
    * @return The method returns an instance of ErrorEvent class with the provided name, event date, and error message
    */
    static create(name: string, eventDate: Date, errorMessage: string): ErrorEvent;
}
/**
* This class helps to track the execution time of a specific event or function in a program
*/
export class ExecutionTimeEvent  extends BaseEvent{
    /**
    * Gets the length of time in milliseconds for the event
    *
    * @return The method an integer that represents returns the length of time in milliseconds for the event
    */
    getDuration(): number;
    /**
    * Constructs a new instance of the class and sets the properties of the instance
    *
    * @param name A string that represents the name of the event
    * @param eventDate The event date
    * @param duration An integer property that represents the length of time in milliseconds for the event being tracked
    * @return The method returns an instance of ExecutionTimeEvent class
    */
    static create(name: string, eventDate: Date, duration: number): ExecutionTimeEvent;
}
/**
* This class creates objects that can be used to trigger actions or display information in response to certain events
*/
export class InfoEvent  extends BaseEvent{
    /**
    * Gets event text message
    *
    * @return The method returns an event text message
    */
    getMessage(): string;
}
/**
* The interface for processing notifications about the specific monitoring events.
*/
export interface IEventLogger {
    /**
    * Log a error event
    *
    * @param errorEvent Event to be logged
    */
    error(errorEvent: ErrorEvent): void;
    /**
    * Log a performance event
    *
    * @param executionTimeEvent execution time event to be logged
    */
    performance(executionTimeEvent: ExecutionTimeEvent): void;
    /**
    * Trace start for performance event
    *
    * @param id The unique event id
    * @param name The name of event
    */
    performanceTraceStart(id: string, name: string): void;
    /**
    * Trace finish for performance even
    *
    * @param id The unique event id
    * @param name The name of event
    */
    performanceTraceFinish(id: string, name: string): void;
    /**
    * Trace finish for performance even with error
    *
    * @param id The unique event id
    * @param name The name of event
    */
    performanceTraceFinishWithError(id: string, name: string): void;
}
/**
* The interface provides access to the trading system settings and properties
*/
export interface ITradingSettingsProvider {
    /**
    * Subscribes to the 'market open' change event
    *
    * @param listener An instance of the callback class for handling 'market open' change events
    */
    subscribeMarketOpenChange(listener: IMarketOpenChangeListener): void;
    /**
    * Unsubscribes from the 'market open' change event
    *
    * @param listener An instance of the callback class for handling 'market open' change events
    */
    unsubscribeMarketOpenChange(listener: IMarketOpenChangeListener): void;
    /**
    * Gets an array of cross symbols
    *
    * @param symbol The financial instrument's symbol for which the cross symbols are being requested
    * @param account The trading account for which the cross symbols are being requested
    * @return The method returns an array of cross symbols
    */
    getCrossSymbols(symbol: string, account: Account): string[];
    /**
    * Checks whether the market is open
    *
    * @return The method returns a boolean value indicating whether the market is open
    */
    isMarketOpen(): boolean;
    /**
    * Gets the base unit size
    *
    * @param instrument The financial instrument for which the base unit size is being requested
    * @param account The trading account for which the base unit size is being requested
    * @return The method returns an integer that represents the base unit size
    */
    getBaseUnitSize(instrument: Instrument, account: Account): number;
    /**
    * Gets the minimum allowed amount of an order
    *
    * @param instrument The financial instrument for which the minimum allowed amount of an order is being requested
    * @param account The trading account for which the minimum allowed amount of an order is being requested
    * @return The method returns an integer that represents the minimum allowed amount of an order
    */
    getMinQuantity(instrument: Instrument, account: Account): number;
    /**
    * Gets the pip cost object of a specific offer
    *
    * @param instrument The financial instrument for which the amount for the pip cost value of a specific offer is being requested
    * @param account The trading account for which the base unit size is being requested
    * @return The method returns the pip cost object of a specific offer
    */
    getPipCost(instrument: Instrument, account: Account): PipCost;
    /**
    * Gets a maximum quantity in lots for an order for specified instrument and account
    *
    * @param instrument The financial instrument for which the maximum quantity for an order is being requested
    * @param account The account for which the maximum quantity for an order is being requested
    * @return The method returns an integer that represents a maximum quantity in lots for an order for specified instrument and account
    */
    getMaxQuantity(instrument: Instrument, account: Account): number;
    /**
    * Gets the financial date
    *
    * @param date The source date object
    * @param symbol The instrument's symbol for which to get the value
    * @return The method returns the financial date in string format 'MM/dd/yyyy'
    */
    getFinancialDate(date: Date, symbol: string): string;
    /**
    * Gets the start of a financial date
    *
    * @param symbol The instrument's symbol for which to get the value
    * @return The method returns the start of a financial date in string format 'hh:mm:ss'
    */
    getStartFinancialDay(symbol: string): string;
}
/**
* The interface for processing 'market open' change event
*/
export interface IMarketOpenChangeListener {
    /**
    * Processes a notification about the 'market open' changed
    *
    * @param newValue The new vlue of 'market open'
    */
    onChange(newValue: boolean): void;
}
/**
* The interface for MDT connections manager
*/
export interface IMdtConnectionManager {
    /**
    * Subscribes to the connection status change event
    *
    * @param listener An instance of the callback class for handling connection status change events
    */
    subscribeConnectionStatusChange(listener: IMdtConnectionStatusChangeListener): void;
    /**
    * Unsubscribes from the connection status change event
    *
    * @param listener An instance of the callback class for handling connection status change events
    */
    unsubscribeConnectionStatusChange(listener: IMdtConnectionStatusChangeListener): void;
    /**
    * Get all available MDT sessions
    *
    * @return The method returns an array of all available MDT sessions
    */
    getAllMdtSessions(): IMdtSession[];
    /**
    * Get MDT session by ID
    *
    * @param id An identifier of MDT session
    * @return The method returns the MDT session or NIL if not founs
    */
    getMdtSessionById(id: string): IMdtSession;
}
/**
* The interface for providing notification about MDT session status changes
*/
export interface IMdtConnectionStatusChangeListener {
    /**
    * Processes notifications about MDT session status changes
    *
    * @param mdtId The ID of the MDT session
    * @param status The connection status
    */
    onConnectionStatusChange(mdtId: string, status: IConnectionStatus): void;
}
/**
* The interface for MDT connection
*/
export interface IMdtSession {
    /**
    * Gets the current status of connection to the MDT
    *
    * @return The method returns the current status of the connection
    */
    getConnectionStatus(): IConnectionStatus;
    /**
    * Gets the identifier of the MDT connection
    *
    * @return The method returns the identifier of the MDT connection
    */
    getMdtId(): string;
    /**
    * Gets the price streams of the MDT connection
    *
    * @return The method returns an array of price streams
    */
    getPriceStreams(): string[];
    /**
    * Connect to the MDT
    */
    connect(): void;
    /**
    * Disconnect from the MDT
    */
    disconnect(): void;
}
/**
* The interface for checking the current connection status of the session
*/
export interface IConnectionStatus {
    /**
    * Checks whether the session status is Connected
    *
    * @return The method returns a boolean value indicating whether the session status is connected or not
    */
    isConnected(): boolean;
    /**
    * Checks whether the session status is Disconnected
    *
    * @return The method returns a boolean value indicating whether the session status is disconnected or not
    */
    isDisconnected(): boolean;
    /**
    * Checks whether the session status is Connecting
    *
    * @return The method returns a boolean value indicating whether the session status is connecting or not
    */
    isConnecting(): boolean;
    /**
    * Checks whether the session status is Reconnecting
    *
    * @return The method returns a boolean value indicating whether the session status is reconnecting or not
    */
    isReconnecting(): boolean;
    /**
    * Checks whether the last session status was changed with error
    *
    * @return The method returns a boolean value indicating whether the last session status was changed with error or not
    */
    hasError(): boolean;
    /**
    * Gets the error on the last session status change
    *
    * @return The method returns an object of type IFXConnectLiteError, which contains information about the specific error that occurred during the session status change
    */
    getError(): IFXConnectLiteError;
}
/**
* The interface for providing notification about session status changes
*/
export interface IConnectionStatusChangeListener {
    /**
    * Processes notifications about session status changes
    *
    * @param status The connection status
    */
    onConnectionStatusChange(status: IConnectionStatus): void;
}
/**
* This class defines an interface to provide logging functionality in a software system
*/
export interface ILogger {
    /**
    * Log debug message
    *
    * @param message Message to be logged
    */
    debug(message: string): void;
    /**
    * Log information message
    *
    * @param message Message to be logged
    */
    info(message: string): void;
    /**
    * Log warning message
    *
    * @param message Message to be logged
    */
    warning(message: string): void;
    /**
    * Log error message
    *
    * @param message Message to be logged
    */
    error(message: string): void;
    /**
    * Log fatal message
    *
    * @param message Message to be logged
    */
    fatal(message: string): void;
}
/**
* The interface for processing notifications about the get url process
*/
export interface IGetUrlCallback {
    /**
    * Processes a notification about a get url failure
    *
    * @param error The error text
    */
    onError(error: string): void;
    /**
    * Processes a notification about a get url success
    *
    * @param url The generated url
    */
    onSuccess(url: string): void;
}
/**
* The interface provides access to the system settings and properties
*/
export interface ISystemSettingsProvider {
    /**
    * Subscribes to the system property change event
    *
    * @param listener An instance of the callback class for handling system property change events
    */
    subscribeSystemPropertyChange(listener: ISystemPropertyChangeListener): void;
    /**
    * Unubscribes from the system property change event
    *
    * @param listener An instance of the callback class for handling system property change events
    */
    unsubscribeSystemPropertyChange(listener: ISystemPropertyChangeListener): void;
    /**
    * Checks whether the password is expired
    *
    * @return The method returns a boolean value indicating whether the password is expired
    */
    isPasswordExpired(): boolean;
    /**
    * Gets the size of one lot, i.e. the minimum amount per trade that is allowed on the instrument on the account.
    *
    * @return The method returns returns an integer that represents the size of one lot
    */
    getBaseUnitSize(): number;
    /**
    * Gets the currency symbol of the base currency of the system. The base currency is the currency of the account. Margin requirements, profit/loss, account balance and equity are also expressed in the base currency units. Example of the value: USD.
    *
    * @return The method retuns returns a string that represents the currency symbol of the base currency of the system
    */
    getBaseCurrency(): string;
    /**
    * Gets the base currency precision of the system
    *
    * @return The method retuns an integer that represents the base currency precision of the system
    */
    getBaseCurrencyPrecision(): number;
    /**
    * Gets the property of the system by name
    *
    * @param name A string that represents the name of the property
    * @return The method returns a string that represents the property of the system by name
    */
    getPropertyByName(name: string): string;
    /**
    * Gets report URL
    *
    * @param account Account ID.
    * @param from Start date of the report period.
    * @param to End date of the report period.
    * @param type type of report. Possible parameter values described in class ReportType
    * @param format Report format. Possible parameter values described in class ReportFormat
    * @param callback An instance of the callback class for handling get url events
    * @param langID A string that represents the language ID that should be used for the report. This parameter is used to generate a report in a specific language if the report is available in multiple languages
    * @return The method retuns the report URL
    */
    getReportUrl(account: AccountInfo, from: Date, to: Date, type: string, format: string, langID: string, callback: IGetUrlCallback): void;
    /**
    * Gets account URL
    *
    * @param callback An instance of the callback class for handling get url events
    * @return The method returns the account URL
    */
    getAccountUrl(callback: IGetUrlCallback): void;
    /**
    * Gets push bind URL
    *
    * @return The method retuns a string that represents the push bind URL
    */
    getPushBindURL(): string;
    /**
    * Gets push 2 URL
    *
    * @return The method retuns a string that represents the push 2 URL
    */
    getPush2URL(): string;
    /**
    * Gets apply now URL
    *
    * @return The method retuns a string that represents the apply now URL
    */
    getApplyNowURL(): string;
    /**
    * Gets trailing type
    *
    * @return The method returns the trailing type
    */
    getTrailingType(): TrailingType;
    /**
    * Gets user kind
    *
    * @return The method returns the user kind
    */
    getUserKind(): UserKind;
}
/**
* The formats of reports
*/
export class ReportFormat {
    /**
    * Format of reports: HTML
    */
    static readonly HTML = "HTML";
    /**
    * Format of reports: XLS
    */
    static readonly XLS = "XLS";
    /**
    * Format of reports: PDF
    */
    static readonly PDF = "PDF";
    /**
    * Format of reports: CSV
    */
    static readonly CSV = "CSV";
    /**
    * Format of reports: XML
    */
    static readonly XML = "XML";
}
/**
* The types of reports
*/
export class ReportType {
    /**
    * Customer account statement report
    */
    static readonly CUSTOMER_ACCOUNT_STATEMENT = "CUSTOMER_ACCOUNT_STATEMENT";
}
/**
* The interface for processing system property change event
*/
export interface ISystemPropertyChangeListener {
    /**
    * Processes a notification about system property changed
    *
    * @param propertyName The name of changed system property
    */
    onChange(propertyName: string): void;
}
/**
* The interface for storing connection parameters
*/
export interface IConnectionParameters {
    /**
    * Gets the login completion timeout in seconds
    *
    * @return The method returns an integer that represents the login completion timeout in seconds
    */
    getLoginTimeoutInSeconds(): number;
    /**
    * Gets the number of reconnection attempts
    *
    * @return The method returns an integer that represents the number of reconnection attempts
    */
    getReconnectionsNumber(): number;
    /**
    * Gets the reconnection delay in seconds
    *
    * @return The method returns an integer that represents the reconnection delay in seconds
    */
    getReconnectionDelayInSeconds(): number;
    /**
    * Gets the application name
    *
    * @return The method returns a string that represents the application name
    */
    getApplicationName(): string;
    /**
    * Gets the library name
    *
    * @return The method returns a string that represents the library name
    */
    getAgent(): string;
    /**
    * Gets the Resilience object
    *
    * @return The method returns the Resilience object
    */
    getResilience(): IResilience;
}
/**
* The interface for processing notifications about the login process
*/
export interface ILoginCallback {
    /**
    * Processes a notification about a login failure
    *
    * @param error The instance of the LoginError class
    */
    onLoginError(error: LoginError): void;
    /**
    * Processes a notification about the necessity to select a trading terminal
    *
    * @param tradingTerminalSelector An instance of the callback class for selecting a trading terminal
    * @param tradingTerminals A collection of available trading terminals
    */
    onTradingTerminalRequest(tradingTerminalSelector: ITradingTerminalSelector, tradingTerminals: ITradingTerminal[]): void;
    /**
    * Processes a notification about a required PIN code
    *
    * @param setPinSetter An instance of the callback class for setting a PIN code
    * @param pinCodeSetter The parameter is used to handle the user's PIN code input during the login process
    */
    onPinCodeRequest(pinCodeSetter: IPinCodeSetter): void;
}
/**
* The interface for setting a PIN code for the login
*/
export interface IPinCodeSetter {
    /**
    * Sets a PIN code
    *
    * @param code The PIN code value to set
    */
    setPinCode(code: string): void;
}
/**
* The interface for selecting a terminal for the login
*/
export interface ITradingTerminalSelector {
    /**
    * Selects a trading terminal from available terminals
    *
    * @param terminal The trading terminal to be selected
    */
    selectTerminal(terminal: ITradingTerminal): void;
}
/**
* The interface for getting commissions by account.
*/
export interface IAccountCommissionsManager  extends IDataManager{
    /**
    * Get the open commission
    *
    * @param offer The offer being traded
    * @param account The account making the trade
    * @param amount The amount being traded
    * @param buySell The type of trade: 'B'or 'S'
    * @param rate The exchange rate
    * @return The method returns returns a real value that represents the open commission
    */
    getOpenCommission(offer: Offer, account: Account, amount: number, buySell: string, rate: number): number;
    /**
    * Get close commission
    *
    * @param offer The offer being traded
    * @param account The account making the trade
    * @param amount The amount being traded
    * @param buySell The type of trade: 'B'or 'S'
    * @param rate The exchange rate
    * @return The method returns returns a real value that represents the close commission
    */
    getCloseCommission(offer: Offer, account: Account, amount: number, buySell: string, rate: number): number;
}
/**
* The interface for providing notification about instrument changes
*/
export interface IInstrumentChangeListener {
    /**
    * Processes notifications about an instrument changed
    *
    * @param instrument The changed instrument
    */
    onChange(instrument: Instrument): void;
    /**
    * Processes notifications about a new instrument added
    *
    * @param instrument The added instrument
    */
    onAdd(instrument: Instrument): void;
}
/**
* The interface for getting access to instruments data
*/
export interface IInstrumentsManager  extends IDataManager{
    /**
    * Subscribes to the instrument change event
    *
    * @param listener An instance of the callback class for handling instrument change events
    */
    subscribeInstrumentChange(listener: IInstrumentChangeListener): void;
    /**
    * Unsubscribes from the instrument change event
    *
    * @param listener An instance of the callback class for handling instrument change events
    */
    unsubscribeInstrumentChange(listener: IInstrumentChangeListener): void;
    /**
    * Gets the data of all instruments. (Method deprecated. Use getSubscribedInstruments instead)
    *
    * @return The method returns the data of all instruments
    */
    getAllInstruments(): Instrument[];
    /**
    * Gets the data of all instrument descriptors
    *
    * @return The method returns the data of all instruments descriptors
    */
    getAllInstrumentDescriptors(): InstrumentDescriptor[];
    /**
    * Gets a data of a specific instrument by the instrument symbol
    *
    * @param symbol A string parameter used to get data of a specific instrument
    * @return The method returns a data of a specific instrument by the instrument symbol
    */
    getInstrumentBySymbol(symbol: string): Instrument;
    /**
    * Gets a data of a specific instrument by its offer ID
    *
    * @param offerId The parameter represents the unique identification number for the offer
    * @return The method returns a data of a specific instrument by its offer ID
    */
    getInstrumentByOfferId(offerId: string): Instrument;
    /**
    * Gets a data of a specific instrument descriptor by its offer ID
    *
    * @param offerId The parameter represents the unique identification number for the offer
    * @return The method returns a data of a specific instrument descriptor by its offer ID
    */
    getInstrumentDescriptorByOfferId(offerId: string): InstrumentDescriptor;
    /**
    * Gets a data of a specific instrument descriptor by the symbol
    *
    * @param symbol A string parameter used to get the instrument descriptor
    * @return The method returns a data of a specific instrument descriptor by the symbol
    */
    getInstrumentDescriptorBySymbol(symbol: string): InstrumentDescriptor;
    /**
    * Subscribes to the instrument
    *
    * @param symbols The instrument symbols that users wants to add to the list of subscribed instruments
    * @param callback An interface providing a callback method that is called when the subscription is complete
    */
    subscribeInstruments(symbols: string[], callback: ISubscribeInstrumentsCallback): void;
    /**
    * Unsubscribes from the instrument
    *
    * @param symbols The instrument symbols that the user wants to remove from the list of subscribed instruments
    * @param callback An interface providing a callback method that is called when the unsubscription is complete
    */
    unsubscribeInstruments(symbols: string[], callback: ISubscribeInstrumentsCallback): void;
    /**
    * Subscribes to the instrument and save info about subscription on the server. Subscription will remain between sessions.
    *
    * @param callback An interface provides a callback method that is called when the subscription is complete, and it can be used to handle any errors that may occur during the subscription process or to perform further actions after the subscription is complete
    * @param symbols The instrument symbols that users wants to add to the list of subscribed instruments
    */
    subscribeInstrumentsAndStoreOnServer(symbols: string[], callback: ISubscribeInstrumentsCallback): void;
    /**
    * Unsubscribes from the instrument and remove info about subscription on the server
    *
    * @param callback An interface provides a callback method that is called when the unsubscription is complete, and it can be used to handle any errors that may occur during the unsubscription process or to perform further actions after the unsubscription is complete
    * @param symbols The instrument symbols that the user wants to remove from the list of subscribed instruments
    */
    unsubscribeInstrumentsAndStoreOnServer(symbols: string[], callback: ISubscribeInstrumentsCallback): void;
    /**
    * Gets a list of subscribed instruments
    *
    * @return The method returns a list of subscribed instruments
    */
    getSubscribedInstruments(): Instrument[];
}
/**
* This class defines an interface for a callback function that will be called when subscribing or unsubscribing from instruments on a trading platform
*/
export interface ISubscribeInstrumentsCallback {
    /**
    * Processes notifications about successful (un)subscribe
    *
    * @param instrument The changed instrument
    */
    onSuccess(): void;
    /**
    * Is fired on an unsuccessful execution of (un)subscribe
    *
    * @param error The error message
    * @param unsucceededSymbols The array of symbols that were not (un)subscribed
    */
    onError(error: string, unsucceededSymbols: string[]): void;
}
/**
* The interface for getting dividends.
*/
export interface IDividendsProvider {
    /**
    * Gets the number of dividends in account CCY when buying for required instrument and account
    *
    * @param instrument A financial instrument for which the dividend is being requested
    * @param account An account for which the dividend is being requested
    * @return The method returns the number of dividends
    */
    getDividendBuy(instrument: Instrument, account: Account): number;
    /**
    * Gets the number of dividends in account CCY when selling for required instrument and account
    *
    * @param instrument A financial instrument for which the dividend is being requested
    * @param account An account for which the dividend is being requested
    * @return The method returns the number of dividends
    */
    getDividendSell(instrument: Instrument, account: Account): number;
}
/**
* The interface for providing information about the open position
*/
export interface IGetOpenPositionCallback {
    /**
    * Processes notifications about the open position received
    *
    * @param openPosition The open position
    */
    onOpenPositionReceived(openPosition: OpenPosition): void;
}
/**
* The interface for providing information about all open positions
*/
export interface IGetOpenPositionsSnapshotCallback {
    /**
    * Processes notifications about all open positions received
    *
    * @param openPositions An array of open positions
    */
    onOpenPositionsReceived(openPositions: OpenPosition[]): void;
}
/**
* The interface for providing notification about open position changes
*/
export interface IOpenPositionChangeListener {
    /**
    * Processes notifications about an open position changed
    *
    * @param openPositionInfo The identification information of the open position
    */
    onChange(openPositionInfo: OpenPositionInfo): void;
    /**
    * Processes notifications about a new open position added
    *
    * @param openPositionInfo The identification information of the open position
    */
    onAdd(openPositionInfo: OpenPositionInfo): void;
    /**
    * Processes notifications about an open position deleted
    *
    * @param openPositionInfo The identification information of the open position
    */
    onDelete(openPositionInfo: OpenPositionInfo): void;
    /**
    * Processes notifications about open positions data refreshed
    */
    onRefresh(): void;
}
/**
* The interface for getting access to open positions data
*/
export interface IOpenPositionsManager  extends IDataManager{
    /**
    * Subscribes to the open position change event
    *
    * @param listener An instance of the callback class for handling open position change events
    */
    subscribeOpenPositionChange(listener: IOpenPositionChangeListener): void;
    /**
    * Unsubscribes from the open position change event
    *
    * @param listener An instance of the callback class for handling open position change events
    */
    unsubscribeOpenPositionChange(listener: IOpenPositionChangeListener): void;
    /**
    * Gets a data of a particular open position by ID
    *
    * @param positionId A parameter that represents the unique identifier of the open position that the function should retrieve data for
    * @return The method returns a data of a particular open position by ID
    */
    getOpenPosition(positionId: string): OpenPosition;
    /**
    * Gets a raw data of a particular open position by ID
    *
    * @param positionId A parameter that represents the unique identifier of the open position for which the function should retrieve raw data
    * @return The method returns a raw data of a particular open position by ID
    */
    getRawOpenPosition(positionId: string): RawOpenPosition;
    /**
    * Gets a snapshot of all open positions
    *
    * @return The method returns a snapshot of all open positions
    */
    getOpenPositionsSnapshot(): OpenPosition[];
    /**
    * Gets a snapshot of all raw open positions
    *
    * @return The method returns a snapshot of all raw open positions
    */
    getRawOpenPositionsSnapshot(): RawOpenPosition[];
    /**
    * Gets the count of open positions
    *
    * @return The method returns the count of open positions
    */
    getCount(): number;
    /**
    * Gets the IDs of all open positions
    *
    * @return The method returns the IDs of open positions
    */
    getOpenPositionIds(): string[];
}
/**
* The interface for getting rollover data by account.
*/
export interface IRolloverProfilesManager  extends IDataManager{
    /**
    * Get the rollover buy by an instrument and account
    *
    * @param instrument The financial instrument for which the rollover buy data is being requested
    * @param account The trading account for which the rollover buy data is being requested
    * @return The method returns a real value that represents the rollover buy by an instrument and account
    */
    getRolloverBuy(instrument: Instrument, account: Account): number;
    /**
    * Get the rollover sell by an instrument and account
    *
    * @param instrument The financial instrument for which the rollover sell data is being requested
    * @param account The trading account for which the rollover sell data is being requested
    * @return The method returns a real value that represents the rollover sell by an instrument and account
    */
    getRolloverSell(instrument: Instrument, account: Account): number;
}
/**
* The interface for getting access to accounts data
*/
export interface IAccountsManager {
    /**
    * Gets basic information about all accounts of the user
    *
    * @return Array of 'AccountInfo' objects
    */
    getAccountsInfo(): AccountInfo[];
    /**
    * Subscribes to the account change event
    *
    * @param listener An instance of the callback class for handling account change events
    */
    subscribeAccountChange(listener: IAccountChangeListener): void;
    /**
    * Unsubscribes from the account change event
    *
    * @param listener An instance of the callback class for handling account change events
    */
    unsubscribeAccountChange(listener: IAccountChangeListener): void;
    /**
    * Gets data of a particular account
    *
    * @param accountInfo The information of a particular account
    * @param getAccountCallback An interface that defines a callback method for handling the data of a particular account
    */
    getAccount(accountInfo: AccountInfo, getAccountCallback: IGetAccountCallback): void;
    /**
    * Gets data of a particular account by id
    *
    * @param accountId The parameter represents the unique identification number for the account
    * @return The method returns the data of a particular account by id
    */
    getAccountById(accountId: string): Account;
    /**
    * Gets a snapshot of all accounts
    *
    * @param accountsSnapshotCallback An interface that defines a callback method for handling a snapshot of all the accounts
    */
    getAccountsSnapshot(accountsSnapshotCallback: IGetAccountsSnapshotCallback): void;
    /**
    * Forces refresh of accounts data
    */
    refresh(): void;
}
/**
* The interface for providing notification about account changes
*/
export interface IAccountChangeListener {
    /**
    * Processes notifications about an account changed
    *
    * @param accountInfo The basic account information
    */
    onChange(accountInfo: AccountInfo): void;
    /**
    * Processes notifications about a new account added
    *
    * @param accountInfo The basic account information
    */
    onAdd(accountInfo: AccountInfo): void;
    /**
    * Processes notifications about an account deleted
    *
    * @param accountInfo The basic account information
    */
    onDelete(accountInfo: AccountInfo): void;
    /**
    * Processes notifications about accounts data refreshed
    */
    onRefresh(): void;
}
/**
* The interface for providing information about the specified account
*/
export interface IGetAccountCallback {
    /**
    * Processes notifications about the account information received
    *
    * @param account The account
    */
    onAccountReceived(account: Account): void;
}
/**
* The interface for providing information about all accounts
*/
export interface IGetAccountsSnapshotCallback {
    /**
    * Processes notifications about all accounts received
    *
    * @param accounts An array of accounts
    */
    onAccountsReceived(accounts: Account[]): void;
}
/**
* The interface for getting access to leverage profiles data
*/
export interface ILeverageProfilesManager  extends IDataManager{
}
/**
* The interface for managing orders
*/
export interface IOrdersManager  extends IDataManager{
    /**
    * Subscribes to the order change event
    *
    * @param listener An instance of the callback class for handling market change events
    */
    subscribeOrderChange(listener: IOrderChangeListener): void;
    /**
    * Unsubscribes from the order change event
    *
    * @param listener An instance of the callback class for handling order change events
    */
    unsubscribeOrderChange(listener: IOrderChangeListener): void;
    /**
    * Gets a data of a specific market order by order ID
    *
    * @param orderId A parameter that represents the unique identifier of the market order that the function should retrieve data for
    * @return The method returns a data of a specific market order by order ID
    */
    getOrderById(orderId: string): Order;
    /**
    * Gets a snapshot of all orders
    *
    * @return The method returns a snapshot of all orders
    */
    getOrdersSnapshot(): Order[];
    /**
    * Get request factory
    *
    * @return The method returns an object of type IOrdersRequestBuilderFactory
    */
    getRequestFactory(): IOrdersRequestBuilderFactory;
    /**
    * Create open market order
    *
    * @param marketOrderRequest Required parameter. The request to create an open market order. A market order is an order to buy or sell an asset at the best available current price in the market
    */
    createOpenMarketOrder(marketOrderRequest: MarketOrderRequest): void;
    /**
    * Create stop order
    *
    * @param stopOrderRequest Required parameter. The request to create a stop order
    */
    createStopOrder(stopOrderRequest: StopOrderRequest): void;
    /**
    * Create limit order
    *
    * @param limitOrderRequest Required parameter. The request to create a limit order
    */
    createLimitOrder(limitOrderRequest: LimitOrderRequest): void;
    /**
    * Create close market order
    *
    * @param closeMarketOrderRequest Required parameter. The request to create a close market order
    */
    createCloseMarketOrder(closeMarketOrderRequest: CloseMarketOrderRequest): void;
    /**
    * Create entry order
    *
    * @param entryOrderRequest Required parameter. The request to create an entry order
    */
    createEntryOrder(entryOrderRequest: EntryOrderRequest): void;
    /**
    * Create OCO order
    *
    * @param entryOrderRequests Required parameter. An array of entry order requests
    */
    createOcoOrder(entryOrderRequests: EntryOrderRequest[]): void;
    /**
    * Create stop entry order
    *
    * @param entryOrderRequest Required parameter. The request to create a stop entry order
    */
    createStopEntryOrder(entryOrderRequest: EntryOrderRequest): void;
    /**
    * Create limit entry order
    *
    * @param entryOrderRequest Required parameter. The request to create limit entry order
    */
    createLimitEntryOrder(entryOrderRequest: EntryOrderRequest): void;
    /**
    * Remove order
    *
    * @param orderId Required parameter. A parameter that represents the unique identifier of the market order that the function should remove
    */
    removeOrder(orderId: string): void;
    /**
    * Change order
    *
    * @param changeOrderRequest Required parameter. The request to change order
    */
    changeOrder(changeOrderRequest: ChangeOrderRequest): void;
    /**
    * Close all positions
    *
    * @param closeAllPositionsRequest Required parameter. The CloseAllPositionsRequest class instance
    */
    closeAllPositions(closeAllPositionsRequest: CloseAllPositionsRequest): void;
}
/**
* This class is an interface that defines methods for creating different types of order request builders
*/
export interface IOrdersRequestBuilderFactory {
    /**
    * Creates an instance of the Market Order Request Builder
    *
    * @return The method returns an instance of the Market Order Request Builder
    */
    createMarketOrderRequestBuilder(): MarketOrderRequestBuilder;
    /**
    * Creates an instance of the Limit Order Request Builder
    *
    * @return The method returns an instance of the Limit Order Request Builder
    */
    createLimitOrderRequestBuilder(): LimitOrderRequestBuilder;
    /**
    * Creates an instance of the Stop Order Request Builder
    *
    * @return The method returns an instance of the Stop Order Request Builder
    */
    createStopOrderRequestBuilder(): StopOrderRequestBuilder;
    /**
    * Creates an instance of the Close Market Order Request Builder
    *
    * @return The method returns an instance of the Close Market Order Request Builder
    */
    createCloseMarketOrderRequestBuilder(): CloseMarketOrderRequestBuilder;
    /**
    * Creates an instance of the Entry Order Request Builder
    *
    * @return The method returns an instance of the Enty Order Request Builder
    */
    createEntryOrderRequestBuilder(): EntryOrderRequestBuilder;
    /**
    * Creates an instance of the Change Order Request Builder
    *
    * @return The method returns an instance of the Change Order Request Builder
    */
    createChangeOrderRequestBuilder(): ChangeOrderRequestBuilder;
    /**
    * Creates an instance of the Close All Positions Request builder
    *
    * @return The method returns an instance of the Close All Positions Request Builder
    */
    createCloseAllPositionsRequestBuilder(): CloseAllPositionsRequestBuilder;
}
/**
* The interface for providing notification about order changes
*/
export interface IOrderChangeListener {
    /**
    * Processes notifications about an order change
    *
    * @param orderInfo The info about changed order
    */
    onChange(orderInfo: OrderInfo): void;
    /**
    * Processes notifications about a new order added
    *
    * @param orderInfo The info about added order
    */
    onAdd(orderInfo: OrderInfo): void;
    /**
    * Processes notifications about an order removed or finished
    *
    * @param orderInfo The info about removed order
    */
    onDelete(orderInfo: OrderInfo): void;
    /**
    * Processes notifications about a order error
    *
    * @param orderInfo The info about order error
    */
    onError(orderInfo: OrderInfo): void;
}
/**
* The interface for providing notification about client message receives
*/
export interface IClientMessageReceiveListener {
    /**
    * Processes notifications about a client message receive
    *
    * @param clientMessage The client message
    */
    onReceive(clientMessage: ClientMessage): void;
}
/**
* The interface for managing client messages
*/
export interface IClientMessagesManager  extends IDataProvider{
    /**
    * Subscribes to the message receive event
    *
    * @param listener An instance of the callback class for handling message receive events
    */
    subscribeMessageReceive(listener: IClientMessageReceiveListener): void;
    /**
    * Unsubscribes from the message receive event
    *
    * @param listener An instance of the callback class for handling message receive events
    */
    unsubscribeMessageReceive(listener: IClientMessageReceiveListener): void;
    /**
    * Gets all received messages
    *
    * @return The method retuns all received messages
    */
    getMessages(): ClientMessage[];
    /**
    * Sends a client message
    *
    * @param sendClientMessageRequest An instance of the client message request
    */
    sendMessage(sendClientMessageRequest: SendClientMessageRequest): void;
    /**
    * Creates client message request builder
    *
    * @return The method returns a new instance of 'SendClientMessageRequestBuilder'
    */
    createClientMessageRequestBuilder(): SendClientMessageRequestBuilder;
}
/**
* The interface for getting margin requirements data.
*/
export interface IMarginProvider  extends IDataProvider{
    /**
    * Gets the plain MMR for the specified instrument by account
    *
    * @param instrument A financial instrument for which the margin requirements data is being requested
    * @param account An account for which the margin requirements data are being requested
    * @return The method retuns the plain MMR for the specified instrument by account
    */
    getMMR(instrument: Instrument, account: Account): number;
    /**
    * Whether three level margin is used
    *
    * @param account The account for which the method is checking whether three level margin is used
    * @return The method returns returns a boolean value that indicates whether or not the three level margin is used for a given account
    */
    isThreeTier(account: Account): boolean;
    /**
    * Gets the margin requirements for the specified instrument by account
    *
    * @param instrument A financial instrument for which the margin requirements data is being requested
    * @param account An account for which the margin requirements data are being requested
    * @return The method returns the margin requirements for the specified instrument by account
    */
    getMargins(instrument: Instrument, account: Account): MarginRequirements;
}
/**
* The interface for providing notification about positions summary changes
*/
export interface IPositionsSummaryChangeListener {
    /**
    * Processes notifications about a positions summary changed
    *
    * @param instrument The symbol of the instrument of the positions summary
    */
    onChange(instrument: string): void;
    /**
    * Processes notifications about a new positions summary added
    *
    * @param instrument The symbol of the instrument of the positions summary
    */
    onAdd(instrument: string): void;
    /**
    * Processes notifications about a positions summary deleted
    *
    * @param instrument The symbol of the instrument of the positions summary
    */
    onDelete(instrument: string): void;
    /**
    * Processes notifications about positions summary data refreshed
    */
    onRefresh(): void;
}
/**
* The interface for getting access to positions summary data
*/
export interface IPositionsSummaryManager  extends IDataManager{
    /**
    * Subscribes to the positions summary change event
    *
    * @param listener An instance of the callback class for handling positions summary change events
    */
    subscribePositionsSummaryChange(listener: IPositionsSummaryChangeListener): void;
    /**
    * Unsubscribes from the positions summary change event
    *
    * @param listener An instance of the callback class for handling positions summary change events
    */
    unsubscribePositionsSummaryChange(listener: IPositionsSummaryChangeListener): void;
    /**
    * Gets a data of a positions summary by instrument symbol
    *
    * @param instrument The financial instrument for which position summary is to be retrieved
    * @return The method returns a data of a positions summary by instrument symbol
    */
    getPositionsSummary(instrument: string): PositionsSummary;
    /**
    * Gets a snapshot of all positions summaries
    *
    * @return The method returns a snapshot of all positions summaries
    */
    getPositionsSummarySnapshot(): PositionsSummary[];
    /**
    * Gets the currency in which the summary is calculated
    *
    * @return The method returns the currency in which the summary is calculated
    */
    getBaseCurrency(): string;
}
/**
* The interface for getting access to dependencies data
*/
export interface IDependenciesManager {
    /**
    * Subscribes to the instruments with loading data from dependencies
    *
    * @param symbols The instrument symbols that users wants to add to the list of subscribed instruments
    * @param callback An interface providing a callback method that is called when the subscription is complete
    */
    subscribeInstruments(symbols: string[], callback: ISubscribeInstrumentsCallback): void;
}
/**
* The interface for managing the state of trading data
*/
export interface IDataManager  extends IDataProvider{
    /**
    * Refreshes specific trading data
    */
    refresh(): void;
}
/**
* The interface for checking the state of the data manager
*/
export interface IDataManagerState {
    /**
    * Checks whether the state is Not Loaded
    *
    * @return The method returns a boolean value indicating whether the state is Not Loaded
    */
    isNotLoaded(): boolean;
    /**
    * Checks whether the state is Loading
    *
    * @return The method returns a boolean value indicating whether the state is Loading
    */
    isLoading(): boolean;
    /**
    * Checks whether the state is Loaded
    *
    * @return The method returns a boolean value indicating whether the state is Loaded
    */
    isLoaded(): boolean;
    /**
    * Checks whether any error occurred on the last state change
    *
    * @return The method returns a boolean value indicating whether any error occurred on the last state change
    */
    hasError(): boolean;
    /**
    * Gets the error that occurred on the state change
    *
    * @return The method returns the error that occurred on the state change
    */
    getError(): IFXConnectLiteError;
}
/**
* The interface for providing notification about data manager state changes
*/
export interface IDataManagerStateChangeListener {
    /**
    * Processes notifications about data manager state changes
    *
    * @param state The new state
    */
    onStateChange(state: IDataManagerState): void;
}
/**
* The interface for providing the state of trading data
*/
export interface IDataProvider {
    /**
    * Subscribes to the data manager state change event
    *
    * @param listener An instance of the callback class for handling data manager state change events
    */
    subscribeStateChange(listener: IDataManagerStateChangeListener): void;
    /**
    * Unsubscribes from the data manager state change event
    *
    * @param listener An instance of the callback class for handling data manager state change events
    */
    unsubscribeStateChange(listener: IDataManagerStateChangeListener): void;
    /**
    * Gets the current state of the data manager
    *
    * @return The method returns the current state of the data manager
    */
    getState(): IDataManagerState;
}
/**
* The interface for providing notification about closed position changes
*/
export interface IClosedPositionChangeListener {
    /**
    * Processes notifications about a closed position changed
    *
    * @param closedPositionInfo The identification information of the closed position
    */
    onChange(closedPositionInfo: ClosedPositionInfo): void;
    /**
    * Processes notifications about a new closed position added
    *
    * @param closedPositionInfo The identification information of the closed position
    */
    onAdd(closedPositionInfo: ClosedPositionInfo): void;
    /**
    * Processes notifications about closed positions data refreshed
    */
    onRefresh(): void;
}
/**
* The interface for getting access to closed positions data
*/
export interface IClosedPositionsManager  extends IDataManager{
    /**
    * Subscribes to the closed position change event
    *
    * @param listener An instance of the callback class for handling closed position change events
    */
    subscribeClosedPositionChange(listener: IClosedPositionChangeListener): void;
    /**
    * Unsubscribes from the closed position change event
    *
    * @param listener An instance of the callback class for handling closed position change events
    */
    unsubscribeClosedPositionChange(listener: IClosedPositionChangeListener): void;
    /**
    * Gets data of a particular closed position by ID
    *
    * @param positionId A string parameter used to get data of a particular closed position
    * @return The method returns the data of a particular closed position by ID
    */
    getClosedPosition(positionId: string): ClosedPosition;
    /**
    * Gets a snapshot of all closed positions
    *
    * @return The method returns a snapshot of all closed positions
    */
    getClosedPositionsSnapshot(): ClosedPosition[];
}
/**
* The interface for result of get offers snapshot operation
*/
export interface IOffersSnapshotCallback {
    /**
    * Is executed on successful receiving the offer data
    *
    * @param offers The data of received offers
    */
    onSuccess(offers: Offer[]): void;
    /**
    * Is executed on an error occurred while requesting the price terminal
    *
    * @param error An error or exception that occurred during requesting offers snapshot from  price terminal
    */
    onError(error: IFXConnectLiteError): void;
}
/**
* The interface for result of get raw offers snapshot operation
*/
export interface IRawOffersSnapshotCallback {
    /**
    * Is executed on successful receiving the rawOffer data
    *
    * @param rawOffers The data of received raw offers
    */
    onSuccess(rawOffers: RawOffer[]): void;
    /**
    * Is executed on an error occurred while requesting the price terminal
    *
    * @param error An error or exception that occurred during requesting offers snapshot  from  price terminal
    */
    onError(error: IFXConnectLiteError): void;
}
/**
* The interface for providing notification about offer changes
*/
export interface IOfferChangeListener {
    /**
    * Processes notifications about an offer changed
    *
    * @param offerInfo The info about changed offer
    */
    onChange(offerInfo: OfferInfo): void;
    /**
    * Processes notifications about a new offer added
    *
    * @param offerInfo The info about added offer
    */
    onAdd(offerInfo: OfferInfo): void;
}
/**
* The interface for getting access to offers data
*/
export interface IOffersManager  extends IDataManager{
    /**
    * Subscribes to the offer change event
    *
    * @param listener An instance of the callback class for handling offer change events
    */
    subscribeOfferChange(listener: IOfferChangeListener): void;
    /**
    * Unsubscribes from the offer change event
    *
    * @param listener An instance of the callback class for handling offer change events
    */
    unsubscribeOfferChange(listener: IOfferChangeListener): void;
    /**
    * Gets a data of a specific offer by offer ID
    *
    * @param offerId The parameter represents the unique identification number of the offer
    * @return The method returns a data of a specific offer by offer ID
    */
    getOfferById(offerId: string): Offer;
    /**
    * Gets the data of all offers
    *
    * @return The method returns the data of all offers
    */
    getAllOffers(): Offer[];
    /**
    * Gets a initial raw data  for specific offers.
    *
    * @param offerIds The list of specific offersIDs
    * @param callback The operation result callback
    */
    getRawOffersSnapshot(offerIds: string[], callback: IRawOffersSnapshotCallback): void;
    /**
    * Gets a latest offers snapshot from the price terminals for specific offers.
    *
    * @param offerIds The list of specific offersIDs
    * @param callback The operation result callback
    */
    getLatestOffersSnapshot(offerIds: string[], callback: IOffersSnapshotCallback): void;
    /**
    * Gets the count of offers
    *
    * @return The method returns the count of offers
    */
    getCount(): number;
    /**
    * Gets Ids of all offers
    *
    * @return The method returns Ids of all offers
    */
    getOfferIds(): string[];
}
/**
* The interface for getting history prices
*/
export interface IPriceHistoryManager {
    /**
    * Gets history prices
    *
    * @param instrument The instrument required
    * @param timeframe The time frame required
    * @param from The from datetime
    * @param to The to datetime
    * @param quotesCount The maximum number of bars in history
    * @param callback The callback class instance
    * @return The method returns identity of the 'get prices' command or NIL in case of error
    */
    getPrices(instrument: string, timeframe: Timeframe, from: Date, to: Date, quotesCount: number, callback: IPriceHistoryManagerCallback): string;
    /**
    * Checks wheather price history for the required instrument contains 'ask' prices
    *
    * @param instrument The instrument required
    * @return The method returns 'true' if the required instrument contains 'ask' prices, 'false' otherwise
    */
    hasAskPrice(instrument: string): boolean;
    /**
    * Stops the 'get prices' command
    *
    * @param identity The identity of the 'get prices' command to be stopped
    */
    stopCommand(identity: string): void;
}
/**
* The interface for callback of getPrices method in IPriceHistoryManager
*/
export interface IPriceHistoryManagerCallback {
    /**
    * Is executed on successful receiving the history data
    *
    * @param response The parameter contains the historical pricing data for a given financial instrument or asset
    */
    onSuccess(response: IPriceHistoryResponse): void;
    /**
    * Is executed on fail
    *
    * @param error An error or exception that occurred during the execution of the 'getPrices' method of the 'IpriceHistoryManager’ interface
    */
    onError(error: IFXConnectLiteError): void;
}
/**
* The interface for getting access to received history data
*/
export interface IPriceHistoryResponse {
    /**
    * Gets the instrument of the responce
    *
    * @return The method returns a string that represents the instrument of the responce
    */
    getInstrument(): string;
    /**
    * Gets the time frame of the responce
    *
    * @return The method returns a Timeframe value that represents the time frame of the responce
    */
    getTimeframe(): Timeframe;
    /**
    * Gets the number of bars or ticks
    *
    * @return The method returns an integer that represents the number of bars or ticks
    */
    getCount(): number;
    /**
    * Checks whether the historical prices in the response are represented as bars or ticks
    *
    * @return The method returns a boolean value indicating whether the historical prices in the response are represented as bars or ticks
    */
    isBar(): boolean;
    /**
    * Gets the ask price of a tick
    *
    * @param index The index of a tick
    * @return The method returns a real value that represents the ask price of a tick
    */
    getAsk(index: number): number;
    /**
    * Gets the open price of an ask bar
    *
    * @param index The index of a bar
    * @return The method returns a real value that represents the open price of an ask bar
    */
    getAskOpen(index: number): number;
    /**
    * Gets the close price of an ask bar
    *
    * @param index The index of a bar
    * @return The method returns a real value that represents the close price of an ask bar
    */
    getAskClose(index: number): number;
    /**
    * Gets the highest price of an ask bar
    *
    * @param index The index of a bar
    * @return The method returns a real value that represents the highest price of an ask bar
    */
    getAskHigh(index: number): number;
    /**
    * Gets the lowest price of an ask bar
    *
    * @param index The index of a bar
    * @return The method returns a real value that represents the lowest price of an ask bar
    */
    getAskLow(index: number): number;
    /**
    * Gets the bid price of a tick
    *
    * @param index The index of a tick
    * @return The method returns a real value that represents the bid price of a tick
    */
    getBid(index: number): number;
    /**
    * Gets the open price of an bid bar
    *
    * @param index The index of a bar
    * @return The method returns a real value that represents the open price of an bid bar
    */
    getBidOpen(index: number): number;
    /**
    * Gets the close price of an bid bar
    *
    * @param index The index of a bar
    * @return The method returns a real value that represents the close price of an bid bar
    */
    getBidClose(index: number): number;
    /**
    * Gets the highest price of an bid bar
    *
    * @param index The index of a bar
    * @return The method returns a real value that represents the highest price of an bid bar
    */
    getBidHigh(index: number): number;
    /**
    * Gets the lowest price of an bid bar
    *
    * @param index The index of a bar
    * @return The method returns a real value that represents the lowest price of an bid bar
    */
    getBidLow(index: number): number;
    /**
    * Gets the beginning of a bar's date/time
    *
    * @param index The index of a bar
    * @return The method returns a real value that represents the beginning of a bar's date/time
    */
    getDate(index: number): Date;
    /**
    * Gets a date and time of the last tick of the last bar
    *
    * @return The method returns a real value that represents a date and time of the last tick of the last bar
    */
    getLastBarTime(): Date;
    /**
    * Gets the tick volume of a bar
    *
    * @param index The index of a bar
    * @return The method returns a real value that represents the tick volume of a bar
    */
    getVolume(index: number): number;
}
/**
* The logger factory
*/
export class LoggerFactory {
    /**
    * The 'debug' logging level
    */
    static readonly LEVEL_DEBUG = "debug";
    /**
    * The 'info' logging level
    */
    static readonly LEVEL_INFO = "info";
    /**
    * The 'warning' logging level
    */
    static readonly LEVEL_WARNING = "warning";
    /**
    * The 'error' logging level
    */
    static readonly LEVEL_ERROR = "error";
    /**
    * The 'fatal' logging level
    */
    static readonly LEVEL_FATAL = "fatal";
    /**
    * Creates a new logger
    *
    * @param level The maximum logging level
    * @return The method returns a new logger instance
    */
    static createLogger(level: string): ILogger;
}
